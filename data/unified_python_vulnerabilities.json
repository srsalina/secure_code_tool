[
    {
        "source": "SafetyDB",
        "package": "10cent10",
        "advisory": "10Cent10 is a malicious package, typosquatting.  It steals Discord access tokens, passwords, and even stage dependency confusion attacks.\r\nhttps://thehackernews.com/2021/11/11-malicious-pypi-python-libraries.html",
        "cve": "PVE-2022-45461",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "10cent11",
        "advisory": "10Cent11 is a malicious package, typosquatting.  It steals Discord access tokens, passwords, and even stage dependency confusion attacks.\r\nhttps://thehackernews.com/2021/11/11-malicious-pypi-python-libraries.html",
        "cve": "PVE-2022-45462",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "accesscontrol",
        "advisory": "AccessControl 4.4, 5.8 and 6.2 include a fix for CVE-2023-41050: Python's \"format\" functionality allows someone controlling the format string to \"read\" objects accessible (recursively) via attribute access and subscription from accessible objects. Those attribute accesses and subscriptions use Python's full blown 'getattr' and 'getitem', not the policy restricted 'AccessControl' variants '_getattr_' and '_getitem_'. This can lead to critical information disclosure. 'AccessControl' already provides a safe variant for 'str.format' and denies access to 'string.Formatter'. However, 'str.format_map' is still unsafe. Affected are all users who allow untrusted users to create 'AccessControl' controlled Python code and execute it.",
        "cve": "CVE-2023-41050",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "adyen",
        "advisory": "Adyen version 7.1.0 addresses a security vulnerability related to a timing attack in HMAC comparisons.\r\nhttps://github.com/Adyen/adyen-python-api-library/pull/170/commits/092f2062eafff2d92adc4d9f73c684510fe090d1",
        "cve": "PVE-2024-66853",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "adyen",
        "advisory": "Versions of the Adyen Python API from 2.2.0 to below 7.1.0 are susceptible to a Timing Attack. This vulnerability stems from inadequate HMAC comparisons within the `is_valid_hmac()` and `is_valid_hmac_notification()` functions.\r\nhttps://github.com/Adyen/adyen-python-api-library/pull/170",
        "cve": "PVE-2024-99763",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "agraph-python",
        "advisory": "Agraph-python 101.0.1 updates requests from 2.18.4 to 2.20.0 for security reasons.",
        "cve": "CVE-2018-18074",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "agraph-python",
        "advisory": "Agraph-python 101.0.1 updates urllib3 from 1.22 to 1.23 for security reasons.",
        "cve": "CVE-2018-20060",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "agraph-python",
        "advisory": "Agraph-python 101.0.3 updates urllib3 to 1.24.2 for security reasons.",
        "cve": "CVE-2019-11324",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ai-python",
        "advisory": "Ai-python 0.8.1 updates its dependency 'tensorflow' to v2.6.1 to include security fixes.",
        "cve": "CVE-2021-41213",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ai-python",
        "advisory": "Ai-python 0.8.1 updates its dependency 'tensorflow' to v2.6.1 to include security fixes.",
        "cve": "CVE-2021-41208",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ai-python",
        "advisory": "Ai-python 0.8.1 updates its dependency 'tensorflow' to v2.6.1 to include security fixes.",
        "cve": "CVE-2021-41211",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ai-python",
        "advisory": "Ai-python 0.8.1 updates its dependency 'tensorflow' to v2.6.1 to include security fixes.",
        "cve": "CVE-2021-41209",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ai-python",
        "advisory": "Ai-python 0.8.1 updates its dependency 'tensorflow' to v2.6.1 to include security fixes.",
        "cve": "CVE-2021-41228",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ai-python",
        "advisory": "Ai-python 0.8.1 updates its dependency 'tensorflow' to v2.6.1 to include security fixes.",
        "cve": "CVE-2021-41217",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ai-python",
        "advisory": "Ai-python 0.8.1 updates its dependency 'tensorflow' to v2.6.1 to include security fixes.",
        "cve": "CVE-2021-41214",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ai-python",
        "advisory": "Ai-python 0.8.1 updates its dependency 'tensorflow' to v2.6.1 to include security fixes.",
        "cve": "CVE-2021-41219",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ai-python",
        "advisory": "Ai-python 0.8.1 updates its dependency 'tensorflow' to v2.6.1 to include security fixes.",
        "cve": "CVE-2021-41218",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ai-python",
        "advisory": "Ai-python 0.8.1 updates its dependency 'tensorflow' to v2.6.1 to include security fixes.",
        "cve": "CVE-2021-41216",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ai-python",
        "advisory": "Ai-python 0.8.1 updates its dependency 'tensorflow' to v2.6.1 to include security fixes.",
        "cve": "CVE-2021-41206",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ai-python",
        "advisory": "Ai-python 0.8.1 updates its dependency 'tensorflow' to v2.6.1 to include security fixes.",
        "cve": "CVE-2021-41201",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ai-python",
        "advisory": "Ai-python 0.8.1 updates its dependency 'tensorflow' to v2.6.1 to include security fixes.",
        "cve": "CVE-2021-41197",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ai-python",
        "advisory": "Ai-python 0.8.1 updates its dependency 'tensorflow' to v2.6.1 to include security fixes.",
        "cve": "CVE-2021-41204",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ai-python",
        "advisory": "Ai-python 0.8.1 updates its dependency 'tensorflow' to v2.6.1 to include security fixes.",
        "cve": "CVE-2021-41222",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ai-python",
        "advisory": "Ai-python 0.8.1 updates its dependency 'tensorflow' to v2.6.1 to include security fixes.",
        "cve": "CVE-2021-41224",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ai-python",
        "advisory": "Ai-python 0.8.1 updates its dependency 'tensorflow' to v2.6.1 to include security fixes.",
        "cve": "CVE-2021-41220",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ai-python",
        "advisory": "Ai-python 0.8.1 updates its dependency 'tensorflow' to v2.6.1 to include security fixes.",
        "cve": "CVE-2021-41207",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ai-python",
        "advisory": "Ai-python 0.8.1 updates its dependency 'tensorflow' to v2.6.1 to include security fixes.",
        "cve": "CVE-2021-41202",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ai-python",
        "advisory": "Ai-python 0.8.1 updates its dependency 'tensorflow' to v2.6.1 to include security fixes.",
        "cve": "CVE-2021-41198",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ai-python",
        "advisory": "Ai-python 0.8.1 updates its dependency 'tensorflow' to v2.6.1 to include security fixes.",
        "cve": "CVE-2021-41215",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ai-python",
        "advisory": "Ai-python 0.8.1 updates its dependency 'tensorflow' to v2.6.1 to include security fixes.",
        "cve": "CVE-2021-41210",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ai-python",
        "advisory": "Ai-python 0.8.1 updates its dependency 'tensorflow' to v2.6.1 to include security fixes.",
        "cve": "CVE-2021-41196",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ai-python",
        "advisory": "Ai-python 0.8.1 updates its dependency 'tensorflow' to v2.6.1 to include security fixes.",
        "cve": "CVE-2021-41225",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ai-python",
        "advisory": "Ai-python 0.8.1 updates its dependency 'tensorflow' to v2.6.1 to include security fixes.",
        "cve": "CVE-2021-41203",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ai-python",
        "advisory": "Ai-python 0.8.1 updates its dependency 'tensorflow' to v2.6.1 to include security fixes.",
        "cve": "CVE-2021-41212",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ai-python",
        "advisory": "Ai-python 0.8.1 updates its dependency 'tensorflow' to v2.6.1 to include security fixes.",
        "cve": "CVE-2021-41195",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ai-python",
        "advisory": "Ai-python 0.8.1 updates its dependency 'tensorflow' to v2.6.1 to include security fixes.",
        "cve": "CVE-2021-41200",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ai-python",
        "advisory": "Ai-python 0.8.1 updates its dependency 'tensorflow' to v2.6.1 to include security fixes.",
        "cve": "CVE-2021-41226",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ai-python",
        "advisory": "Ai-python 0.8.1 updates its dependency 'tensorflow' to v2.6.1 to include security fixes.",
        "cve": "CVE-2021-41227",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ai-python",
        "advisory": "Ai-python 0.8.1 updates its dependency 'tensorflow' to v2.6.1 to include security fixes.",
        "cve": "CVE-2021-41221",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ai-python",
        "advisory": "Ai-python 0.8.1 updates its dependency 'tensorflow' to v2.6.1 to include security fixes.",
        "cve": "CVE-2021-41205",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ai-python",
        "advisory": "Ai-python 0.8.1 updates its dependency 'tensorflow' to v2.6.1 to include security fixes.",
        "cve": "CVE-2021-41199",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ai-python",
        "advisory": "Ai-python 0.8.1 updates its dependency 'pillow' to v8.3.2 to include security fixes.",
        "cve": "CVE-2021-34552",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ai-python",
        "advisory": "Ai-python 0.8.1 updates its dependency 'pillow' to v8.3.2 to include security fixes.",
        "cve": "CVE-2021-23437",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "aiohttp",
        "advisory": "The aiohttp versions minor than 3.9. has a vulnerability that affects the Python HTTP parser used in the aiohttp library. It allows for minor differences in allowable character sets, which could lead to robust frame boundary matching of proxies to protect against the injection of additional requests. The vulnerability also allows \r\n exceptions during validation that aren't handled consistently with other malformed inputs.",
        "cve": "CVE-2024-23829",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "aiohttp",
        "advisory": "aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. A XSS vulnerability exists on index pages for static file handling. This vulnerability is fixed in 3.9.4. We have always recommended using a reverse proxy server (e.g. nginx) for serving static files. Users following the recommendation are unaffected. Other users can disable `show_index` if unable to upgrade. See CVE-2024-27306.",
        "cve": "CVE-2024-27306",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "aiohttp-socks5",
        "advisory": "Aiohttp-socks5 is a malicious package, typosquatting. It installs a Trojan in your system.\r\nhttps://blog.sonatype.com/trojanized-pypi-package-imitates-a-popular-python-server-library",
        "cve": "PVE-2022-47822",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "aiosmtpd",
        "advisory": "aiosmtpd is a reimplementation of the Python stdlib smtpd.py based on asyncio. aiosmtpd is vulnerable to inbound SMTP smuggling. SMTP smuggling is a novel vulnerability based on not so novel interpretation differences of the SMTP protocol. By exploiting SMTP smuggling, an attacker may send smuggle/spoof e-mails with fake sender addresses, allowing advanced phishing attacks. This issue is also existed in other SMTP software like Postfix. With the right SMTP server constellation, an attacker can send spoofed e-mails to inbound/receiving aiosmtpd instances. This issue has been addressed in version 1.4.5. Users are advised to upgrade. There are no known workarounds for this vulnerability. See CVE-2024-27305.",
        "cve": "CVE-2024-27305",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "aiosmtpd",
        "advisory": "aiosmptd is a reimplementation of the Python stdlib smtpd.py based on asyncio. Prior to version 1.4.6, servers based on aiosmtpd accept extra unencrypted commands after STARTTLS, treating them as if they came from inside the encrypted connection. This could be exploited by a man-in-the-middle attack. Version 1.4.6 contains a patch for the issue. See CVE-2024-34083.",
        "cve": "CVE-2024-34083",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "aiosmtplib",
        "advisory": "Aiosmtplib 1.1.7 fixes a possible injection vulnerability (a variant of https://consensys.net/diligence/vulnerabilities/python-smtplib-multiple-crlf-injection/).",
        "cve": "PVE-2022-50882",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "airflow",
        "advisory": "Specific versions of Airflow are susceptible to arbitrary code execution due to unchecked user input being sent to the Python eval function, allowing for direct execution of parameters. This vulnerability enables any user with the capability to create or edit charts to potentially execute arbitrary code on the server.\r\nhttps://github.com/apache/airflow/commit/88d9b0dc96e7528c87326c8070ee276e8565545f",
        "cve": "PVE-2024-99818",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ait-core",
        "advisory": "An issue in the YAML Python library of NASA AIT-Core allows attackers to execute arbitrary commands via supplying a crafted YAML file.",
        "cve": "CVE-2024-35060",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ait-core",
        "advisory": "An issue in the Pickle Python library of NASA AIT-Core allows attackers to execute arbitrary commands.",
        "cve": "CVE-2024-35059",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "algokit",
        "advisory": "Algokit 0.3.0 updates its dependency 'GitPython' to v3.1.30 to include a security fix.",
        "cve": "CVE-2022-24439",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "allmydata-tahoe",
        "advisory": "Allmydata-tahoe 1.7.0 updates its Python version dependency to 2.4.4 to include a fix for a buffer overrun in repr() in cPython.\r\nhttps://tahoe-lafs.org/trac/tahoe-lafs/ticket/1066",
        "cve": "CVE-2006-4980",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "altair-recipes",
        "advisory": "Altair-recipes 0.9.2 updates its dependency 'ipython' to v7.31.1 to include a security fix.",
        "cve": "CVE-2022-21699",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "amqp",
        "advisory": "AMQP versions 0.8 to 0.9.1 (Python client) do not carry out hostname verification during tls connections, paving the way for potential Man-in-the-Middle attacks.",
        "cve": "PVE-2023-99972",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "amqplib",
        "advisory": "AMQPlib versions 0.8 to 0.9.1 (Python client) do not carry out hostname verification during tls connections, paving the way for potential Man-in-the-Middle attacks.",
        "cve": "PVE-2023-99972",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "anchorpy",
        "advisory": "Anchorpy 0.6.4 updates its dependency 'ipython' to v8.0.1 to include a security fix.",
        "cve": "CVE-2022-21699",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "anomalib",
        "advisory": "Anomalib 0.5.0 includes a fix for CVE-2007-4559: Directory traversal vulnerability in the (1) extract and (2) extractall functions in the tarfile module in Python allows user-assisted remote attackers to overwrite arbitrary files via a .. (dot dot) sequence in filenames in a TAR archive, a related issue to CVE-2001-1267.",
        "cve": "CVE-2007-4559",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ansible-vault",
        "advisory": "An exploitable vulnerability exists in the yaml loading functionality of ansible-vault before 1.0.5. A specially crafted vault can execute arbitrary python commands resulting in command execution. An attacker can insert python into the vault to trigger this vulnerability.\r\nhttps://github.com/tomoh1r/ansible-vault/commit/3f8f659ef443ab870bb19f95d43543470168ae04",
        "cve": "CVE-2017-2809",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ansys-geometry-core",
        "advisory": "PyAnsys Geometry is a Python client library for the Ansys Geometry service and other CAD Ansys products. On file src/ansys/geometry/core/connection/product_instance.py, upon calling this method _start_program directly, users could exploit its usage to perform malicious operations on the current machine where the script is ran. This vulnerability is fixed in 0.3.3 and 0.4.12. See CVE-2024-29189.",
        "cve": "CVE-2024-29189",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "anthropic",
        "advisory": "Anthropic 0.3.2 updates its dependency 'certifi' to version '2023.5.7' to include a security fix.\r\nhttps://github.com/anthropics/anthropic-sdk-python/pull/51",
        "cve": "CVE-2022-23491",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "apache-age-python",
        "advisory": "Apache-age-python is affected by CVE-2022-45786: There are issues with the AGE drivers for Golang and Python that enable SQL injections to occur. This impacts AGE for PostgreSQL 11 & AGE for PostgreSQL 12, all versions up-to-and-including 1.1.0, when using those drivers. The fix is to update to the latest Golang and Python drivers in addition to the latest version of AGE that is used for PostgreSQL 11 or PostgreSQL 12. The update of AGE will add a new function to enable parameterization of the cypher() function, which, in conjunction with the driver updates, will resolve this issue. Background (for those who want more information): After thoroughly researching this issue, we found that due to the nature of the cypher() function, it was not easy to parameterize the values passed into it. This enabled SQL injections, if the developer of the driver wasn't careful. The developer of the Golang and Pyton drivers didn't fully utilize parameterization, likely because of this, thus enabling SQL injections. The obvious fix to this issue is to use parameterization in the drivers for all PG SQL queries. However, parameterizing all PG queries is complicated by the fact that the cypher() function call itself cannot be parameterized directly, as it isn't a real function. At least, not the parameters that would take the graph name and cypher query. The reason the cypher() function cannot have those values parameterized is because the function is a placeholder and never actually runs. The cypher() function node, created by PG in the query tree, is transformed and replaced with a query tree for the actual cypher query during the analyze phase. The problem is that parameters - that would be passed in and that the cypher() function transform needs to be resolved - are only resolved in the execution phase, which is much later. Since the transform of the cypher() function needs to know the graph name and cypher query prior to execution, they can't be passed as parameters. The fix that we are testing right now, and are proposing to use, is to create a function that will be called prior to the execution of the cypher() function transform. This new function will allow values to be passed as parameters for the graph name and cypher query. As this command will be executed prior to the cypher() function transform, its values will be resolved. These values can then be cached for the immediately following cypher() function transform to use. As added features, the cached values will store the calling session's pid, for validation. And, the cypher() function transform will clear this cached information after function invocation, regardless of whether it was used. This method will allow the parameterizing of the cypher() function indirectly and provide a way to lock out SQL injection attacks.",
        "cve": "CVE-2022-45786",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "apache-airflow",
        "advisory": "Generation of Error Message Containing Sensitive Information vulnerability in Apache Software Foundation Apache Airflow.This issue affects Apache Airflow: before 2.5.2. The traceback contains information that might be useful for a potential attacker to better target their attack (Python/Airflow version, node name). This information should not be shown if traceback is shown to unauthenticated user.",
        "cve": "CVE-2023-25695",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "apache-airflow",
        "advisory": "Apache-airflow 1.10.15 and 2.0.2 include a fix for CVE-2021-28359: The \"origin\" parameter passed to some of the endpoints like '/trigger' was vulnerable to XSS exploit. This issue affects Apache Airflow versions <1.10.15 in 1.x series and affects 2.0.0 and 2.0.1 and 2.x series. This is the same as CVE-2020-13944 & CVE-2020-17515 but the implemented fix did not fix the issue completely. Update to Airflow 1.10.15 or 2.0.2. Please also update your Python version to the latest available PATCH releases of the installed MINOR versions, example update to Python 3.6.13 if you are on Python 3.6. (Those contain the fix for CVE-2021-23336 https://nvd.nist.gov/vuln/detail/CVE-2021-23336).",
        "cve": "CVE-2021-28359",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "apache-dolphinscheduler",
        "advisory": "Prior to version 1.3.6, Apache DolphinScheduler had an issue where authorized users could exploit SQL injections in the data source center. However, this is only the case for MySQL data sources that use an internal login account password. The Python library PyDolphinScheduler generally follows the same versioning as its Java counterpart. This remains the case until November 7, 2022, or until PyDolphinScheduler reached version 4.0.0.\r\n\r\nhttps://dolphinscheduler.apache.org/python/main/index.html#version",
        "cve": "CVE-2021-27644",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "apache-dolphinscheduler",
        "advisory": "Users have the ability to access any files through the log server. Apache-dolphinscheduler 2.0.5 (Python SDK) corresponds to DolphinScheduler version 2.0.5 Therefore, it is strongly recommended for users of Apache DolphinScheduler to update to version 2.0.6 or above. \r\n\r\nAlso known as: GHSA-vpgf-fgm8-gxr2",
        "cve": "CVE-2022-26884",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "apache-dolphinscheduler",
        "advisory": "A vulnerability exists while utilizing tasks to view configuration files, leading to possible leak of database passwords. Apache-dolphinscheduler 2.0.5 (Python SDK) corresponds to DolphinScheduler version 2.0.5. It's advised to update to version 2.0.6 or beyond. \r\n\r\nAdvisory Alias: GHSA-jvc3-wjf6-7c6c",
        "cve": "CVE-2022-26885",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "apache-dolphinscheduler",
        "advisory": "Apache-dolphinscheduler 3.0.0 (Python SDK) corresponds to DolphinScheduler version 3.0.0, which updates its MAVEN dependency 'jackson.databind' to v2.9.10.8 to include security fixes.",
        "cve": "CVE-2018-11307",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "apache-dolphinscheduler",
        "advisory": "Apache-dolphinscheduler 3.0.0 (Python SDK) corresponds to DolphinScheduler version 3.0.0, that updates its Maven dependency 'postgresql' to v42.3.4 to include security fixes.",
        "cve": "CVE-2022-26520",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "apache-dolphinscheduler",
        "advisory": "Apache-dolphinscheduler (Python API) 3.1.0 works together with apache-dolphinscheduler (core) 3.1.0, that updates its MAVEN dependency 'h2' to v2.1.210 to include security fixes.",
        "cve": "CVE-2021-23463",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "apache-dolphinscheduler",
        "advisory": "Apache-dolphinscheduler (Python API) 3.1.0 works together with apache-dolphinscheduler (core) 3.1.0, that updates its MAVEN dependency 'cron-utils' to v9.1.6 to include a security fix.",
        "cve": "CVE-2021-41269",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "apache-dolphinscheduler",
        "advisory": "Apache-dolphinscheduler (Python API) 3.1.0 works together with apache-dolphinscheduler (core) 3.1.0, that fixes a vulnerability in LDAP login.\r\nhttps://github.com/apache/dolphinscheduler/commit/17a9dd25fa0e80b048394f79db130f56eb8ef72f",
        "cve": "PVE-2022-51292",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "apache-dolphinscheduler",
        "advisory": "Apache-dolphinscheduler (Python API) 3.1.0 works together with apache-dolphinscheduler (core) 3.1.0, that updates its MAVEN dependency 'logback-core' to v 1.2.11 to include security fixes.",
        "cve": "CVE-2021-42550",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "apache-dolphinscheduler",
        "advisory": "Apache-dolphinscheduler (Python API) 3.1.0 works together with apache-dolphinscheduler (core) 3.1.0, that updates its MAVEN dependency 'h2' to v2.1.210 to include security fixes.",
        "cve": "CVE-2022-23221",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "apache-dolphinscheduler",
        "advisory": "Apache-dolphinscheduler (Python API) 3.1.0 works together with apache-dolphinscheduler (core) 3.1.0, that updates its MAVEN dependency 'h2' to v2.1.210 to include security fixes.",
        "cve": "CVE-2021-42392",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "apache-dolphinscheduler",
        "advisory": "Apache-dolphinscheduler (Python API) 3.1.0 works together with apache-dolphinscheduler (core) 3.1.0, that adds validations of possible malicious keys.\r\nhttps://github.com/apache/dolphinscheduler/commit/5811b84fcc7cc0ff354cf8e871f36aa3ae61aa2a",
        "cve": "PVE-2022-51304",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "apache-dolphinscheduler",
        "advisory": "Apache-dolphinscheduler (Python API) 3.1.0 works together with apache-dolphinscheduler (core) 3.1.0, that updates its MAVEN dependency 'commons-io' to v2.11.0 to include a security fix.",
        "cve": "CVE-2021-29425",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "apache-dolphinscheduler",
        "advisory": "Apache-dolphinscheduler (Python API) 3.1.0 works together with apache-dolphinscheduler (core) 3.1.0, that updates its MAVEN dependency 'postgresql' to v42.4.1 to include a security fix.",
        "cve": "CVE-2022-31197",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "apache-dolphinscheduler",
        "advisory": "Apache-dolphinscheduler (Python API) 3.1.0 works together with apache-dolphinscheduler (core) 3.1.0, that updates its MAVEN dependency 'hadoop' to v2.7.7 to include security fixes.",
        "cve": "CVE-2018-8009",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "apache-dolphinscheduler",
        "advisory": "Apache-dolphinscheduler (Python API) 3.1.0 works together with apache-dolphinscheduler (core) 3.1.0, that updates its MAVEN dependency 'hive-jdbc' to v2.3.3 to include a security fix.",
        "cve": "CVE-2018-1282",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "apache-dolphinscheduler",
        "advisory": "Apache-dolphinscheduler (Python API) 3.1.0 works together with apache-dolphinscheduler (core) 3.1.0, that updates its MAVEN dependency 'hadoop' to v2.7.7 to include security fixes.",
        "cve": "CVE-2017-15718",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "apache-dolphinscheduler",
        "advisory": "Apache-dolphinscheduler 2.0.5 (Python SDK) corresponds to DolphinScheduler version 2.0.5, that fixes CVE-2022-25598:\r\nApache DolphinScheduler user registration is vulnerable to Regular express Denial of Service (ReDoS) attacks.",
        "cve": "CVE-2022-25598",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "apache-superset",
        "advisory": "Apache-superset 0.37.1 includes a fix for CVE-2020-13948: While investigating a bug report on Apache Superset, it was determined that an authenticated user could craft requests via a number of templated text fields in the product that would allow arbitrary access to Python\u2019s 'os' package in the web application process in versions < 0.37.1. It was thus possible for an authenticated user to list and access files, environment variables, and process information. Additionally it was possible to set environment variables for the current process, create and update files in folders writable by the web process, and execute arbitrary programs accessible by the web process. All other operations available to the 'os' package in Python were also available, even if not explicitly enumerated in this CVE.",
        "cve": "CVE-2020-13948",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "apache-superset",
        "advisory": "Apache-superset 2.1.1 includes a fix for CVE-2023-37941: If an attacker gains write access to the Apache Superset metadata database, they could persist a specifically crafted Python object that may lead to remote code execution on Superset's web backend.\r\nhttps://lists.apache.org/thread/6qk1zscc06yogxxfgz2bh2bvz6vh9g7h",
        "cve": "CVE-2023-37941",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "apache-trafficcontrol",
        "advisory": "Apache Traffic Control 3.1.0 (Python client) supports Apache-trafficcontrol 6.1.0, that sets files with potential sensitive data with 0600 permissions, to avoid users other than ats or root can read them.\r\nhttps://github.com/apache/trafficcontrol/issues/6032",
        "cve": "PVE-2022-51294",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "apimatic-core",
        "advisory": "Apimatic-core 0.2.3 updates its dependency 'requests' to version '2.31.0' to include a fix for an Information Exposure vulnerability.\r\nhttps://github.com/apimatic/core-lib-python/pull/40",
        "cve": "CVE-2023-32681",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "appwrite",
        "advisory": "Appwrite (SDK for Python) version 0.2.0 adds support for appwrite 0.8.0. Appwrite 0.7.1 fixed an XSS vulnerability in the appwrite console.",
        "cve": "PVE-2021-40600",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "appwrite",
        "advisory": "Appwrite (SDK for Python) version 0.4.0 adds support for appwrite 0.9.0. Appwrite 0.9.0 fixed a potential XSS injection on the console.",
        "cve": "PVE-2021-40934",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "appwrite",
        "advisory": "Appwrite (SDK for Python) version 0.5.0 adds support for appwrite 0.10.0. Appwrite 0.9.4 fixed a security vulnerability that exposes project ID's from other admin users.",
        "cve": "PVE-2021-41261",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "argo-workflows",
        "advisory": "Argo-workflows 5.0.0 (Python SDK) is compatible with Argo-workflows core v3.0.0, which updates its NPM dependency 'swagger-ui-react' to v3.29.0, that includes a version of 'lodash' that fixes a vulnerability.",
        "cve": "CVE-2020-8203",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "argo-workflows",
        "advisory": "Argo-workflows 5.0.0 (Python SDK) is compatible with Argo-workflows core v3.0.0, which fixes a XSS vulnerability.\r\nhttps://github.com/argoproj/argo-workflows/pull/3975",
        "cve": "PVE-2022-46473",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "argo-workflows",
        "advisory": "Argo-workflows 5.0.0 (Python SDK) is compatible with Argo-workflows core v3.0.0, which improves cookie security.\r\nhttps://github.com/argoproj/argo-workflows/issues/2759",
        "cve": "PVE-2022-46476",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "argo-workflows",
        "advisory": "Argo-workflows 5.0.0 (Python SDK) is compatible with Argo-workflows core v3.0.0, which includes a fix for an issue that allowed to list archived workflows that shouldn't be accessible.\r\nhttps://github.com/argoproj/argo-workflows/blob/7e9fc374a22c63fd5e09c322b37bd810f5d57a0e/sdks/python/README.md\r\nhttps://github.com/argoproj/argo-workflows/pull/2079",
        "cve": "PVE-2022-46479",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "argo-workflows",
        "advisory": "Argo-workflows 6.1.0rc1 (Python SDK) is compatible with Argo-workflow core v3.1.0rc1, which enforces TLS version >= 1.2.\r\nhttps://github.com/argoproj/argo-workflows/commit/199016a6bed5284df3ec5caebbef9f2d018a2d43",
        "cve": "PVE-2022-46465",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "argo-workflows",
        "advisory": "Argo-workflows 6.2.0rc1 (Python SDK) is compatible with Argo-workflow core v3.2.0rc1, that fixes security issues related to file closing and paths.\r\nhttps://github.com/argoproj/argo-workflows/commit/4fd38facbfb66b06ab0205b04f6e1f1e9943eb6a",
        "cve": "PVE-2022-46464",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "argo-workflows",
        "advisory": "Argo-workflows 6.3.0rc1 (Python SDK) is compatible with Argo-workflow core v3.3.0rc1, that updates its NPM dependency 'prismjs' to v1.26 to include a security fix.\r\nhttps://github.com/argoproj/argo-workflows/issues/7599\r\nhttps://github.com/argoproj/argo-workflows/commit/2e343eb7f1328c8ec242116d38bb7e651703ea26",
        "cve": "CVE-2021-3801",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "argo-workflows",
        "advisory": "Argo-workflows 6.3.0rc9 (Python SDK) is compatible with Argo-workflow core v3.3.0rc9, that fixes a directory traversal vulnerability.\r\nhttps://github.com/argoproj/argo-workflows/commit/f9c7ab58e20fda8922fa00e9d468bda89031887a",
        "cve": "PVE-2022-46461",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "argo-workflows",
        "advisory": "Argo-workflows 6.3.10 and 6.4.4 (Python SDK) are compatible with Argo-workflows core v3.3.10 and v3.4.4, that update 'kubectl' to v1.24.8 to fix vulnerabilities.\r\nhttps://github.com/argoproj/argo-workflows/commit/fd31eb811160c62f16b5aef002bf232235e0d2c6\r\nhttps://github.com/argoproj/argo-workflows/issues/10006",
        "cve": "CVE-2021-25740",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "argo-workflows",
        "advisory": "Argo-workflows 6.3.10 and 6.4.4 (Python SDK) are compatible with Argo-workflows core v3.3.10 and v3.4.4, that update 'kubectl' to v1.24.8 to fix vulnerabilities.\r\nhttps://github.com/argoproj/argo-workflows/commit/fd31eb811160c62f16b5aef002bf232235e0d2c6\r\nhttps://github.com/argoproj/argo-workflows/issues/10006",
        "cve": "CVE-2022-3172",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "argo-workflows",
        "advisory": "Argo-workflows 6.3.9 (Python SDK) is compatible with Argo-workflows core v3.3.9, that updates Maven dependencies to include security fixes.\r\nhttps://github.com/argoproj/argo-workflows/commit/481137c259b05c6a5b3c0e3adab1649c2b512364",
        "cve": "CVE-2021-35517",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "argo-workflows",
        "advisory": "Argo-workflows 6.3.9 (Python SDK) is compatible with Argo-workflows core v3.3.9, that updates NPM dependencies to include security fixes.\r\nhttps://github.com/argoproj/argo-workflows/commit/d874c1a87b65b300b2a4c93032bd2970d6f91d8f",
        "cve": "CVE-2022-24785",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "argo-workflows",
        "advisory": "Argo-workflows 6.3.9 (Python SDK) is compatible with Argo-workflows core v3.3.9, that updates Maven dependencies to include security fixes.\r\nhttps://github.com/argoproj/argo-workflows/commit/481137c259b05c6a5b3c0e3adab1649c2b512364",
        "cve": "CVE-2021-22569",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "argo-workflows",
        "advisory": "Argo-workflows 6.3.9 (Python SDK) is compatible with Argo-workflows core v3.3.9, that updates Maven dependencies to include security fixes.\r\nhttps://github.com/argoproj/argo-workflows/commit/481137c259b05c6a5b3c0e3adab1649c2b512364",
        "cve": "CVE-2020-8908",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "argo-workflows",
        "advisory": "Argo-workflows 6.3.9 (Python SDK) is compatible with Argo-workflows core v3.3.9, that updates Maven dependencies to include security fixes.\r\nhttps://github.com/argoproj/argo-workflows/commit/481137c259b05c6a5b3c0e3adab1649c2b512364",
        "cve": "CVE-2020-28052",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "argo-workflows",
        "advisory": "Argo-workflows 6.3.9 (Python SDK) is compatible with Argo-workflows core v3.3.9, that updates NPM dependencies to include security fixes.\r\nhttps://github.com/argoproj/argo-workflows/commit/d874c1a87b65b300b2a4c93032bd2970d6f91d8f",
        "cve": "CVE-2021-23648",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "argo-workflows",
        "advisory": "Argo-workflows 6.4.0rc1 (Python SDK) is compatible with Argo-workflows core v3.4.0rc1, that fixes a potential XSS vulnerability.\r\nhttps://github.com/argoproj/argo-workflows/pull/8289/commits/e78b1c9b840ea89a28e03d8aa0d5f9f1629c0c86",
        "cve": "PVE-2022-50679",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "argo-workflows",
        "advisory": "Argo-workflows 6.4.7 (Python SDK) is compatible with Argo-workflows core v3.4.7, which upgrades docker to v20.10.24 to include security fixes.\r\nhttps://github.com/argoproj/argo-workflows/pull/10868",
        "cve": "CVE-2023-28841",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "argo-workflows",
        "advisory": "Argo-workflows 6.4.7 (Python SDK) is compatible with Argo-workflows core v3.4.7, which upgrades docker to v20.10.24 to include security fixes.\r\nhttps://github.com/argoproj/argo-workflows/pull/10868",
        "cve": "CVE-2023-28842",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "argo-workflows",
        "advisory": "Argo-workflows 6.4.7 (Python SDK) is compatible with Argo-workflows core v3.4.7, which updates UI NPM dependencies to include security fixes.\r\nhttps://github.com/argoproj/argo-workflows/pull/10842",
        "cve": "CVE-2021-4279",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "argo-workflows",
        "advisory": "Argo-workflows 6.4.7 (Python SDK) is compatible with Argo-workflows core v3.4.7, which upgrades docker to v20.10.24 to include security fixes.\r\nhttps://github.com/argoproj/argo-workflows/pull/10868",
        "cve": "CVE-2023-28840",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "argo-workflows",
        "advisory": "Argo-workflows 6.5.0 (Python SDK) is compatible with Argo-workflows core v3.5.0, which fixes gRPC and HTTP2 high-severity vulnerabilities.\r\nhttps://github.com/argoproj/argo-workflows/pull/11986",
        "cve": "CVE-2023-44487",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "aries-cloudagent",
        "advisory": "Aries-cloudagent is affected by a Insufficient Verification of Data Authenticity vulnerability. When verifying W3C Format Verifiable Credentials using JSON-LD with Linked Data Proofs (LDP-VCs), the result of verifying the presentation 'document.proof' was not factored into the final 'verified' value ('true'/'false') on the presentation record. The flaw enables holders of W3C Format Verifiable Credentials using JSON-LD with Linked Data Proofs (LDPs) to present incorrectly constructed proofs, and allows malicious verifiers to save and replay a presentation from such holders as their own.\r\nhttps://github.com/hyperledger/aries-cloudagent-python/security/advisories/GHSA-97x9-59rv-q5pm",
        "cve": "CVE-2024-21669",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "asterix-decoder",
        "advisory": "Croatia Control Asterix 2.8.1 (python_v0.7.2) has a heap-based buffer over-read, with additional details to be disclosed at a later date.",
        "cve": "CVE-2021-44144",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "astropy",
        "advisory": "Astropy is a project for astronomy in Python that fosters interoperability between Python astronomy packages. Version 5.3.2 of the Astropy core package is vulnerable to remote code execution due to improper input validation in the `TranformGraph().to_dot_graph` function. A malicious user can provide a command or a script file as a value to the `savelayout` argument, which will be placed as the first value in a list of arguments passed to `subprocess.Popen`. Although an error will be raised, the command or script will be executed successfully. Version 5.3.3 fixes this issue. See CVE-2023-41334.",
        "cve": "CVE-2023-41334",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "autobahn",
        "advisory": "Autobahn|Python before 20.12.3 allows redirect header injection. See CVE-2020-35678.",
        "cve": "CVE-2020-35678",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "avocado-framework",
        "advisory": "Avocado-framework version 104.0 replaces the deprecated tmpfile.mktemp function, which has been known for security vulnerabilities since Python 2.3, with the more secure tmpdir method.\r\nhttps://github.com/avocado-framework/avocado/commit/f4ffe822232bfa2a0567fb82a7b178dec0f6f371",
        "cve": "PVE-2024-66798",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "aws-encryption-sdk",
        "advisory": "Aws-encryption-sdk versions 1.9.0 and 2.2.0 improve the decryption process to handle signature and message validation vulnerabilities.\r\nhttps://github.com/aws/aws-encryption-sdk-python/security/advisories/GHSA-x5h4-9gqw-942j",
        "cve": "PVE-2021-41848",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "aws-encryption-sdk",
        "advisory": "Aws-encryption-sdk 2.0.0 includes a fix for CVE-2020-8897: A weak robustness vulnerability exists in the AWS Encryption SDKs for Java, Python, C and Javalcript prior to versions 2.0.0. Due to the non-committing property of AES-GCM (and other AEAD ciphers such as AES-GCM-SIV or (X)ChaCha20Poly1305) used by the SDKs to encrypt messages, an attacker can craft a unique cyphertext which will decrypt to multiple different results, and becomes especially relevant in a multi-recipient setting.\r\nhttps://github.com/google/security-research/security/advisories/GHSA-wqgp-vphw-hphf",
        "cve": "CVE-2020-8897",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "aws-encryption-sdk-cli",
        "advisory": "Aws-encryption-sdk-cli 4.1.0 no longer supports Python 3.5. The mentioned Python version doesn't receive security updates anymore.",
        "cve": "CVE-2020-27619",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "aws-parallelcluster",
        "advisory": "Aws-parallelcluster 3.2.1 updates Python from 3.7.10 to 3.7.13 to include a fix for CVE-2021-3737.",
        "cve": "CVE-2021-3737",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "awscrt",
        "advisory": "Awscrt 0.13.5 updates modules to fix a DoS vulnerability related to OpenSSL.\r\nhttps://github.com/awslabs/aws-crt-python/commit/35650740c87eed174a2e0d7f98b8f5b8fd23848f",
        "cve": "CVE-2022-0778",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "awsiotsdk",
        "advisory": "Awsiotsdk 1.5.18 includes a fix for CVE-2021-40828: Connections initialized by the AWS IoT Device SDK v2 for Java (versions prior to 1.3.3), Python (versions prior to 1.5.18), C++ (versions prior to 1.12.7) and Node.js (versions prior to 1.5.1) did not verify server certificate hostname during TLS handshake when overriding Certificate Authorities (CA) in their trust stores on Windows.",
        "cve": "CVE-2021-40828",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "awsiotsdk",
        "advisory": "Awsiotsdk 1.6.1 includes a fix for CVE-2021-40830: The AWS IoT Device SDK v2 for Java, Python, C++ and Node.js appends a user supplied Certificate Authority (CA) to the root CAs instead of overriding it on Unix systems. TLS handshakes will thus succeed if the peer can be verified either from the user-supplied CA or the system\u2019s default trust-store. Attackers with access to a host\u2019s trust stores or able to compromise a certificate authority already in the host's trust-store (note: the attacker must also be able to spoof DNS in this case), may be able to use this issue to bypass CA pinning. An attacker could then spoof the MQTT broker, and either drop traffic and/or respond with the attacker's data, but they would not be able to forward this data on to the MQTT broker because the attacker would still need the user's private keys to authenticate against the MQTT broker. The 'aws_tls_ctx_options_override_default_trust_store_*' function within the aws-c-io submodule has been updated to override the default trust-store to correct this issue.\r\nhttps://github.com/aws/aws-iot-device-sdk-python-v2",
        "cve": "CVE-2021-40830",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "awsiotsdk",
        "advisory": "Awsiotsdk 1.6.1 includes a fix for CVE-2021-40829: Connections initialized by the AWS IoT Device SDK v2 for Java (versions prior to 1.4.2), Python (versions prior to 1.6.1), C++ (versions prior to 1.12.7) and Node.js (versions prior to 1.5.3) did not verify server certificate hostname during TLS handshake when overriding Certificate Authorities (CA) in their trust stores on MacOS.",
        "cve": "CVE-2021-40829",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "awsiotsdk",
        "advisory": "Awsiotsdk 1.7.0 includes a fix for CVE-2021-40831: The AWS IoT Device SDK v2 for Java, Python, C++ and Node.js appends a user supplied Certificate Authority (CA) to the root CAs instead of overriding it on macOS systems. Additionally, SNI validation is also not enabled when the CA has been \u201coverridden\u201d. TLS handshakes will thus succeed if the peer can be verified either from the user-supplied CA or the system\u2019s default trust-store. Attackers with access to a host\u2019s trust stores or are able to compromise a certificate authority already in the host's trust store (note: the attacker must also be able to spoof DNS in this case) may be able to use this issue to bypass CA pinning. An attacker could then spoof the MQTT broker, and either drop traffic and/or respond with the attacker's data, but they would not be able to forward this data on to the MQTT broker because the attacker would still need the user's private keys to authenticate against the MQTT broker. The 'aws_tls_ctx_options_override_default_trust_store_*' function within the aws-c-io submodule has been updated to address this behavior.",
        "cve": "CVE-2021-40831",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "awsipranges",
        "advisory": "Awsipranges 0.3.3 updates its dependency 'ipython' to v7.31.1 to include a security fix.",
        "cve": "CVE-2022-21699",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "b2sdk",
        "advisory": "B2sdk 1.14.1 includes a fix for CVE-2022-23651: Linux and Mac releases of the SDK version 1.14.0 and below contain a key disclosure vulnerability that, in certain conditions, can be exploited by local attackers through a time-of-check-time-of-use (TOCTOU) race condition. SDK users of the SqliteAccountInfo format are vulnerable while users of the InMemoryAccountInfo format are safe. The SqliteAccountInfo saves API keys (and bucket name-to-id mapping) in a local database file ($XDG_CONFIG_HOME/b2/account_info, ~/.b2_account_info or a user-defined path). When first created, the file is world readable and is (typically a few milliseconds) later altered to be private to the user. If the directory containing the file is readable by a local attacker then during the brief period between file creation and permission modification, a local attacker can race to open the file and maintain a handle to it. This allows the local attacker to read the contents after the file after the sensitive information has been saved to it. Consumers of this SDK who rely on it to save data using SqliteAccountInfo class should upgrade to the latest version of the SDK. Those who believe a local user might have opened a handle using this race condition, should remove the affected database files and regenerate all application keys.\r\nhttps://github.com/Backblaze/b2-sdk-python/security/advisories/GHSA-p867-fxfr-ph2w",
        "cve": "CVE-2022-23651",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "babel",
        "advisory": "Babel 2.9.1 includes a fix for CVE-2021-42771: Babel.Locale in Babel before 2.9.1 allows attackers to load arbitrary locale .dat files (containing serialized Python objects) via directory traversal, leading to code execution.\r\nhttps://github.com/python-babel/babel/pull/782",
        "cve": "CVE-2021-42771",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "backend-ai-manager",
        "advisory": "Backend.ai-manager 19.09.0rc4 fixes privilege escalation because domain-admins could run sessions on behalf of super-admins in the same domain. It also introduces Image import (171) - currently this is limited to import Python-based kernels only. This is implemented on top of batch tasks, with some specialization to prevent security issues due to direct access to agent host's Docker daemon.  Importing as service-port only image support will be added in future releases.",
        "cve": "PVE-2021-37531",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "bayesian-testing",
        "advisory": "Bayesian-testing 0.2.2 updates its dependency 'ipython' to v7.32.0 to include a security fix.",
        "cve": "CVE-2022-21699",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "beaker",
        "advisory": "The Beaker library through 1.11.0 for Python is affected by deserialization of untrusted data, which could lead to arbitrary code execution.",
        "cve": "CVE-2013-7489",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "belvo-python",
        "advisory": "Belvo-python 0.39.1 updates its dependency 'requests' to version '2.31.0' to include a fix for an Information Exposure vulnerability.\r\nhttps://github.com/belvo-finance/belvo-python/pull/177",
        "cve": "PVE-2023-60581",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "bigchaindb-driver",
        "advisory": "Bigchaindb-driver 0.5.2 includes a fix for CVE-2018-10903: A flaw was found in python-cryptography versions between >=1.9.0 and <2.3. The finalize_with_tag API did not enforce a minimum tag length. If a user did not validate the input length prior to passing it to finalize_with_tag an attacker could craft an invalid payload with a shortened tag (e.g. 1 byte) such that they would have a 1 in 256 chance of passing the MAC check. GCM tag forgeries can cause key leakage.",
        "cve": "CVE-2018-10903",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "bigdl",
        "advisory": "Bigdl 2.3.0 includes a fix for a SQL injection vulnerability in python/benchmark/run.py.\r\nhttps://github.com/intel-analytics/BigDL/pull/8014",
        "cve": "PVE-2023-55136",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "binderhub",
        "advisory": "### Impact\n\nA remote code execution vulnerability has been identified in BinderHub, where providing BinderHub with maliciously crafted input could execute code in the BinderHub context, with the potential to egress credentials of the BinderHub deployment, including JupyterHub API tokens, kubernetes service accounts, and docker registry credentials. This may provide the ability to manipulate images and other user created pods in the deployment, with the potential to escalate to the host depending on the underlying kubernetes configuration.\n\n### Patches\n\nPatch below, or [on GitHub](https://github.com/jupyterhub/binderhub/commit/195caac172690456dcdc8cc7a6ca50e05abf8182.patch)\n\n```diff\nFrom 9f4043d9dddc1174920e687773f27b7933f48ab6 Mon Sep 17 00:00:00 2001\nFrom: Riccardo Castellotti <rcastell@cern.ch>\nDate: Thu, 19 Aug 2021 15:49:43 +0200\nSubject: [PATCH] Explicitly separate git-ls-remote options from positional\n arguments\n\n---\n binderhub/repoproviders.py | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/binderhub/repoproviders.py b/binderhub/repoproviders.py\nindex f33347b..5d4b87c 100755\n--- a/binderhub/repoproviders.py\n+++ b/binderhub/repoproviders.py\n@@ -484,7 +484,7 @@ class GitRepoProvider(RepoProvider):\n             self.sha1_validate(self.unresolved_ref)\n         except ValueError:\n             # The ref is a head/tag and we resolve it using `git ls-remote`\n-            command = [\"git\", \"ls-remote\", self.repo, self.unresolved_ref]\n+            command = [\"git\", \"ls-remote\", \"--\", self.repo, self.unresolved_ref]\n             result = subprocess.run(command, universal_newlines=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n             if result.returncode:\n                 raise RuntimeError(\"Unable to run git ls-remote to get the `resolved_ref`: {}\".format(result.stderr))\n-- \n2.25.1\n\n```\n\n### Workarounds\n\nDisable the git repo provider by specifying the `BinderHub.repo_providers` config, e.g.:\n\n```python\nfrom binderhub.repoproviders import (GitHubRepoProvider,\n                            GitLabRepoProvider, GistRepoProvider,\n                            ZenodoProvider, FigshareProvider, HydroshareProvider,\n                            DataverseProvider)\n\nc.BinderHub.repo_providers =  {\n            'gh': GitHubRepoProvider,\n            'gist': GistRepoProvider,\n            'gl': GitLabRepoProvider,\n            'zenodo': ZenodoProvider,\n            'figshare': FigshareProvider,\n            'hydroshare': HydroshareProvider,\n            'dataverse': DataverseProvider,\n        }\n```\n\n### References\n\nCredit: Jose Carlos Luna Duran (CERN) and Riccardo Castellotti (CERN).\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Email us at [security@ipython.org](mailto:security@ipython.org)\n\n\nAffected functions:\nbinderhub.repoproviders.GitRepoProvider.get_resolved_ref",
        "cve": "CVE-2021-39159",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "blackduck",
        "advisory": "Synopsys hub-rest-api-python (aka blackduck on PyPI) version 0.0.25 - 0.0.52 does not validate SSL certificates in certain cases. See CVE-2020-27589.",
        "cve": "CVE-2020-27589",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "blazar",
        "advisory": "An issue was discovered in OpenStack blazar-dashboard before 1.3.1, 2.0.0, and 3.0.0. A user allowed to access the Blazar dashboard in Horizon may trigger code execution on the Horizon host as the user the Horizon service runs under (because the Python eval function is used). This may result in Horizon host unauthorized access and further compromise of the Horizon service. All setups using the Horizon dashboard with the blazar-dashboard plugin are affected. See: CVE-2020-26943.",
        "cve": "CVE-2020-26943",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "botframework-connector",
        "advisory": "Bot Framework SDK Information Disclosure Vulnerability.\r\nhttps://github.com/microsoft/botbuilder-python/security/advisories/GHSA-cqff-fx2x-p86v",
        "cve": "CVE-2021-1725",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "bzip3",
        "advisory": "Bzip3 (python client) 0.1.2 includes bzip3 core version 1.3.0, that fixes a buffer overflow vulnerability in libsais.\r\nhttps://github.com/kspalaiologos/bzip3/commit/bfa5bf82b53715dfedf048e5859a46cf248668ff",
        "cve": "PVE-2023-58746",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "bzip3",
        "advisory": "Bzip3 (python client) 0.1.2 includes bzip3 core version 1.3.0, that fixes an overflow in bz3_decode_block.\r\nhttps://github.com/kspalaiologos/bzip3/commit/33b1951f153c3c5dc8ed736b9110437e1a619b7d",
        "cve": "PVE-2023-58750",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "cairosvg",
        "advisory": "Cairosvg 2.5.1 includes a fix for CVE-2021-21236: In CairoSVG before version 2.5.1, there is a regular expression denial of service (REDoS) vulnerability. When processing SVG files, the python package CairoSVG uses two regular expressions which are vulnerable to Regular Expression Denial of Service (REDoS). If an attacker provides a malicious SVG, it can make cairosvg get stuck processing the file for a very long time.",
        "cve": "CVE-2021-21236",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "calcwave",
        "advisory": "Calcwave 1.2.6 updates limits for modules and functions available to 'eval()' in the interpreter. This greatly improves the security and reduces the risk of accidentally calling the 'Python' function that damages your computer.\r\nhttps://github.com/zenarcher007/calcwave/commit/1d95d1861a0bf9954e95f82469f279bb3ba12d9a",
        "cve": "PVE-2021-40507",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "case-utils",
        "advisory": "Case-utils is affected by an information leakage vulnerability. The vulnerability stems from a Python function, 'cdo_local_uuid.local_uuid()', and its original implementation 'case_utils.local_uuid()'.\r\nhttps://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/security/advisories/GHSA-rgrf-6mf5-m882",
        "cve": "CVE-2024-22194",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "cdo-local-uuid",
        "advisory": "Cdo-local-uuid is affected by an information leakage vulnerability. The vulnerability stems from a Python function, 'cdo_local_uuid.local_uuid()', and its original implementation 'case_utils.local_uuid()'.\r\nhttps://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/security/advisories/GHSA-rgrf-6mf5-m882",
        "cve": "CVE-2024-22194",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "certifi",
        "advisory": "Certifi 2022.12.07 includes a fix for CVE-2022-23491: Certifi 2022.12.07 removes root certificates from \"TrustCor\" from the root store. These are in the process of being removed from Mozilla's trust store. TrustCor's root certificates are being removed pursuant to an investigation prompted by media reporting that TrustCor's ownership also operated a business that produced spyware. Conclusions of Mozilla's investigation can be found in the linked google group discussion.\r\nhttps://github.com/certifi/python-certifi/security/advisories/GHSA-43fp-rhv2-5gv8\r\nhttps://groups.google.com/a/mozilla.org/g/dev-security-policy/c/oxX69KFvsm4/m/yLohoVqtCgAJ",
        "cve": "CVE-2022-23491",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "certifi",
        "advisory": "certifi before 2017.04.17 is vulnerable to improper certificate validation because they do not reject deprecated 1024-bit certificates, but instead only issue a warning. This vulnerability impacts the security of the package's certificate verification process.\r\nhttps://github.com/certifi/python-certifi/commit/4f35e3529c78ced74040cf5d80bf8ec4aac9a190",
        "cve": "PVE-2024-99806",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "certifi",
        "advisory": "Certifi 2023.07.22 includes a fix for CVE-2023-37920: Certifi prior to version 2023.07.22 recognizes \"e-Tugra\" root certificates. e-Tugra's root certificates were subject to an investigation prompted by reporting of security issues in their systems. Certifi 2023.07.22 removes root certificates from \"e-Tugra\" from the root store.\r\nhttps://github.com/certifi/python-certifi/security/advisories/GHSA-xqr8-7jwr-rhp7",
        "cve": "CVE-2023-37920",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "cfscrape",
        "advisory": "Cfscrape 1.8.0 includes a fix for CVE-2017-7235: An issue was discovered in cloudflare-scrape 1.6.6 through 1.7.1. A malicious website owner could craft a page that executes arbitrary Python code against any cfscrape user who scrapes that website. This is fixed in 1.8.0.",
        "cve": "CVE-2017-7235",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "chafa.py",
        "advisory": "Chafa.py serves as a Python wrapper for the Chafa library. The GitHub repository hpjansson/chafa, prior to version 1.12.0, contains a heap-based Buffer Overflow vulnerability. This issue has been addressed in the Chapa.py update, specifically version 1.1.0.",
        "cve": "CVE-2022-20610",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "cheetah",
        "advisory": "Cheetah 0.9.15 and 0.9.16 searches the /tmp directory for modules before using the paths in the PYTHONPATH variable, which allows local users to execute arbitrary code via a malicious module in /tmp/.",
        "cve": "CVE-2005-1632",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "chuanhuchatgpt",
        "advisory": "Chuanhuchatgpt is vulnerable to an unrestricted file upload vulnerability due to insufficient validation of uploaded file types in its '/upload' endpoint. Specifically, the 'handle_file_upload' function does not sanitize or validate the file extension or content type of uploaded files, allowing attackers to upload files with arbitrary extensions, including HTML files containing XSS payloads and Python files. This vulnerability could lead to stored XSS attacks and potentially result in remote code execution (RCE) on the server hosting the application. The PyPI package is a fork of the vulnerable package GaiZhenbiao/ChuanhuChatGPT.",
        "cve": "CVE-2024-5278",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "chuanhuchatgpt",
        "advisory": "A timing attack vulnerability exists in the gaizhenbiao/chuanhuchatgpt repository, specifically within the password comparison logic. The vulnerability is present in version 20240310 of the software, where passwords are compared using the '=' operator in Python. This method of comparison allows an attacker to guess passwords based on the timing of each character's comparison. The issue arises from the code segment that checks a password for a particular username, which can lead to the exposure of sensitive information to an unauthorized actor. An attacker exploiting this vulnerability could potentially guess user passwords, compromising the security of the system. The PyPI package is a fork of the vulnerable package GaiZhenbiao/ChuanhuChatGPT.",
        "cve": "CVE-2024-5124",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "cinder",
        "advisory": "The OpenStack Nova (python-nova) package 1:2013.2.3-0 before 1:2013.2.3-0ubuntu1.2 and 1:2014.1-0 before 1:2014.1-0ubuntu1.2 and Openstack Cinder (python-cinder) package 1:2013.2.3-0 before 1:2013.2.3-0ubuntu1.1 and 1:2014.1-0 before 1:2014.1-0ubuntu1.1 for Ubuntu 13.10 and 14.04 LTS does not properly set the sudo configuration, which makes it easier for attackers to gain privileges by leveraging another vulnerability.",
        "cve": "CVE-2013-1068",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "citation-graph",
        "advisory": "Citation-graph 1.2.7 updates its dependency 'ipython' to v8.11.0 to include a security fix.",
        "cve": "CVE-2023-24816",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "citrine",
        "advisory": "Citrine 0.115.0 includes a fix for a Race Condition vulnerability.\r\nhttps://github.com/CitrineInformatics/citrine-python/pull/571",
        "cve": "PVE-2023-59618",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "clearsilver",
        "advisory": "Format string vulnerability in the p_cgi_error function in python/neo_cgi.c in the Python CGI Kit (neo_cgi) module for Clearsilver 0.10.5 and earlier allows remote attackers to cause a denial of service (crash) and possibly execute arbitrary code via format string specifiers that are not properly handled when creating CGI error messages using the cgi_error API function.",
        "cve": "CVE-2011-4357",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "cleo",
        "advisory": "An exponential ReDoS (Regular Expression Denial of Service) can be triggered in the cleo PyPI package, when an attacker is able to supply arbitrary input to the Table.set_rows method\r\nhttps://github.com/python-poetry/cleo/pull/285",
        "cve": "CVE-2022-42966",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "cloverly-python-module",
        "advisory": "Cloverly-python-module 0.2.0 adds a clear session function for security purposes.",
        "cve": "PVE-2021-41085",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "cls-python",
        "advisory": "Cls-python 0.1.4 updates its dependency 'wheel' to v0.38.1 to include a security fix.",
        "cve": "CVE-2022-40898",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "cobbler",
        "advisory": "The web interface (CobblerWeb) in Cobbler before 1.2.9 allows remote authenticated users to execute arbitrary Python code in cobblerd by editing a Cheetah kickstart template to import arbitrary Python modules.",
        "cve": "CVE-2008-6954",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "cobbler",
        "advisory": "Cobbler 2.0.7 includes a fix for CVE-2010-2235: Template_api.py in Cobbler before 2.0.7, as used in Red Hat Network Satellite Server and other products, does not disable the ability of the Cheetah template engine to execute Python statements contained in templates, which allows remote authenticated administrators to execute arbitrary code via a crafted kickstart template file, a different vulnerability than CVE-2008-6954.",
        "cve": "CVE-2010-2235",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "cobbler",
        "advisory": "Cobbler 2.6.0 includes a fix for CVE-2011-4954: Cobbler has local privilege escalation via the use of insecure location for PYTHON_EGG_CACHE.\r\nhttps://github.com/cobbler/cobbler/commit/3c97edff9f8453536ae5adfe930a8b084b5e4346",
        "cve": "CVE-2011-4954",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "cobbler",
        "advisory": "An issue was discovered in Cobbler before 3.3.1. In the templar.py file, the function check_for_invalid_imports can allow Cheetah code to import Python modules via the \"#from MODULE import\" substring. (Only lines beginning with #import are blocked.)",
        "cve": "CVE-2021-45082",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "codecov",
        "advisory": "Codecov 2.0.17 fixes a reported command injection vulnerability.\r\nhttps://github.com/codecov/codecov-python/commit/f2c93c7893847e50639416c1bc2e38cb375825d8",
        "cve": "PVE-2021-38075",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "cognitojwt",
        "advisory": "Cognitojwt version 1.5.0 transitions from the outdated python-jose library, which relied on the ecdsa package containing unresolved vulnerabilities, to the more frequently updated joserfc library.",
        "cve": "CVE-2024-23342",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "coincurve",
        "advisory": "coincurve before 8.0.0 does not support the new GitHub and PyPI security requirements. \r\nBinary wheels on macOS for Python 3.5 now uses Homebrew Python for compilation due to new security requirements.",
        "cve": "PVE-2021-36299",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "colourama",
        "advisory": "Colourama is a typosquatting package. It shows a malicious behavior, for example, it may leak your sensitive data and/or gain unauthorized persistence in your system.\r\nhttps://www.zdnet.com/article/twelve-malicious-python-libraries-found-and-removed-from-pypi/",
        "cve": "PVE-2022-45412",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "compas",
        "advisory": "Compas 1.17.5 includes a fix for CVE-2007-4559: Directory traversal vulnerability in the (1) extract and (2) extractall functions in the tarfile module in Python allows user-assisted remote attackers to overwrite arbitrary files via a .. (dot dot) sequence in filenames in a TAR archive, a related issue to CVE-2001-1267.\r\nhttps://github.com/compas-dev/compas/commit/0d0f9bec24511fe5dbc77ef73ee617dc83b4420e",
        "cve": "CVE-2007-4559",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "composer",
        "advisory": "Composer 0.13.0 updates its dependency 'ipython' to v8.11.0 in Dockerfile to include a security fix.\r\nhttps://github.com/mosaicml/composer/pull/2007",
        "cve": "CVE-2023-24816",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "conference-scheduler-cli",
        "advisory": "In conference-scheduler-cli, a pickle.load call on imported data allows remote attackers to execute arbitrary code via a crafted .pickle file, as demonstrated by Python code that contains an os.system call.",
        "cve": "CVE-2018-14572",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "confidant",
        "advisory": "Confidant 1.6.0 updates python-saml to address CVE-2016-1000252.",
        "cve": "CVE-2016-1000252",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "confidant",
        "advisory": "In confidant 5.0.0 updates its dependency 'python3-saml' to v1.8.0 to include a security fix.",
        "cve": "PVE-2021-39454",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "confire",
        "advisory": "An exploitable vulnerability exists in the YAML parsing functionality in config.py in Confire 0.2.0. Due to the user-specific configuration being loaded from \"~/.confire.yaml\" using the yaml.load function, a YAML parser can execute arbitrary Python commands resulting in command execution. An attacker can insert Python into loaded YAML to trigger this vulnerability.",
        "cve": "CVE-2017-16763",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "connect-openapi-client",
        "advisory": "Connect-openapi-client 25.4 updates its dependency 'httpx' to version '0.23.0' to include a security fix.\r\nhttps://github.com/cloudblue/connect-python-openapi-client/commit/42595a51a66f1c4832d8f38fbcdca201a0bfded2\r\nhttps://github.com/advisories/==GHSA==-h8pj-cxx2-jfg2",
        "cve": "CVE-2021-41945",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "connect-sdk-python2",
        "advisory": "Connect-sdk-python2 3.33.0 updates the minimum 'requests' version from 2.20.0 to 2.25.0, as earlier versions depend on a vulnerable 'urllib3' version.",
        "cve": "CVE-2021-33503",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "connect-sdk-python2",
        "advisory": "Connect-sdk-python2 3.33.0 updates the minimum 'requests' version from 2.20.0 to 2.25.0, as earlier versions depend on a vulnerable 'urllib3' version.",
        "cve": "CVE-2019-11236",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "connect-sdk-python2",
        "advisory": "Connect-sdk-python2 3.33.0 updates the minimum 'requests' version from 2.20.0 to 2.25.0, as earlier versions depend on a vulnerable 'urllib3' version.",
        "cve": "CVE-2018-20060",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "connect-sdk-python2",
        "advisory": "Connect-sdk-python2 3.33.0 updates the minimum 'requests' version from 2.20.0 to 2.25.0, as earlier versions depend on a vulnerable 'urllib3' version.",
        "cve": "CVE-2019-11324",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "connect-sdk-python2",
        "advisory": "Connect-sdk-python2 3.33.0 updates the minimum 'requests' version from 2.20.0 to 2.25.0, as earlier versions depend on a vulnerable 'urllib3' version.",
        "cve": "CVE-2020-26137",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "connect-sdk-python3",
        "advisory": "Connect-sdk-python3 3.33.0 updates the minimum 'requests' version from 2.20.0 to 2.25.0, as earlier versions depend on a vulnerable 'urllib3' version.",
        "cve": "CVE-2018-20060",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "connect-sdk-python3",
        "advisory": "Connect-sdk-python3 3.33.0 updates the minimum 'requests' version from 2.20.0 to 2.25.0, as earlier versions depend on a vulnerable 'urllib3' version.",
        "cve": "CVE-2021-33503",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "connect-sdk-python3",
        "advisory": "Connect-sdk-python3 3.33.0 updates the minimum 'requests' version from 2.20.0 to 2.25.0, as earlier versions depend on a vulnerable 'urllib3' version.",
        "cve": "CVE-2019-11324",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "connect-sdk-python3",
        "advisory": "Connect-sdk-python3 3.33.0 updates the minimum 'requests' version from 2.20.0 to 2.25.0, as earlier versions depend on a vulnerable 'urllib3' version.",
        "cve": "CVE-2019-11236",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "connect-sdk-python3",
        "advisory": "Connect-sdk-python3 3.33.0 updates the minimum 'requests' version from 2.20.0 to 2.25.0, as earlier versions depend on a vulnerable 'urllib3' version.",
        "cve": "CVE-2020-26137",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "consoleme",
        "advisory": "Consoleme 1.2.2 includes a fix for CVE-2022-27177: A Python format string issue leading to information disclosure and potentially remote code execution in ConsoleMe for all versions prior to 1.2.2.\r\nhttps://github.com/Netflix/security-bulletins/blob/master/advisories/nflx-2022-001.md",
        "cve": "CVE-2022-27177",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "contentful",
        "advisory": "Contentful through 2020-05-21 for Python allows reflected XSS, as demonstrated by the api parameter to the-example-app.py.",
        "cve": "CVE-2020-13258",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "cookiecutter",
        "advisory": "Cookiecutter 2.1.1 includes a fix for CVE-2022-24065: Cookiecutter before 2.1.1 is vulnerable to Command Injection via hg argument injection. When calling the cookiecutter function from Python code with the checkout parameter, it is passed to the hg checkout command in a way that additional flags can be set. The additional flags can be used to perform a command injection.",
        "cve": "CVE-2022-24065",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "cryptography",
        "advisory": "Cryptography 1.0.2 fixes a vulnerability. The OpenSSL backend prior to 1.0.2 made extensive use  of assertions to check response codes where our tests could not trigger a  failure.  However, when Python is run with '-O' these asserts are optimized  away.  If a user ran Python with this flag and got an invalid response code, this could lead to undefined behavior or worse.",
        "cve": "PVE-2021-25679",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "cryptography",
        "advisory": "The cryptography package before 41.0.2 for Python mishandles SSH certificates that have critical options.",
        "cve": "CVE-2023-38325",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "cryptography",
        "advisory": "A flaw was found in the python-cryptography package. This issue may allow a remote attacker to decrypt captured messages in TLS servers that use RSA key exchanges, which may lead to exposure of confidential or sensitive data. See CVE-2023-50782.",
        "cve": "CVE-2023-50782",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "cryptography",
        "advisory": "Cryptography 39.0.1 includes a fix for CVE-2023-23931: In affected versions 'Cipher.update_into' would accept Python objects which implement the buffer protocol, but provide only immutable buffers. This would allow immutable objects (such as 'bytes') to be mutated, thus violating fundamental rules of Python and resulting in corrupted output. This issue has been present since 'update_into' was originally introduced in cryptography 1.8.\r\nhttps://github.com/pyca/cryptography/security/advisories/GHSA-w7pp-m8wf-vj6r",
        "cve": "CVE-2023-23931",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "cryptography",
        "advisory": "A flaw was found in python-cryptography versions between >=1.9.0 and <2.3. The finalize_with_tag API did not enforce a minimum tag length. If a user did not validate the input length prior to passing it to finalize_with_tag an attacker could craft an invalid payload with a shortened tag (e.g. 1 byte) such that they would have a 1 in 256 chance of passing the MAC check. GCM tag forgeries can cause key leakage. See: CVE-2018-10903.",
        "cve": "CVE-2018-10903",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "cryptography",
        "advisory": "cryptography is a package designed to expose cryptographic primitives and recipes to Python developers. Starting in version 38.0.0 and before version 42.0.4, if `pkcs12.serialize_key_and_certificates` is called with both a certificate whose public key did not match the provided private key and an `encryption_algorithm` with `hmac_hash` set (via `PrivateFormat.PKCS12.encryption_builder().hmac_hash(...)`, then a NULL pointer dereference would occur, crashing the Python process. This has been resolved in version 42.0.4, the first version in which a `ValueError` is properly raised.",
        "cve": "CVE-2024-26130",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "crystal-web",
        "advisory": "Crystal-web fixes a race condition that occurs when closing a project. This issue could cause a use-after-free of wxPython objects, leading to memory corruption and potentially crashing Crystal later. The fix ensures proper handling of project closure to prevent these issues and enhance the application's stability.",
        "cve": "PVE-2024-71737",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ctx",
        "advisory": "Ctx has been hijacked and replaced with malicious code that sends all your environment variables to a URL.\r\nhttps://www.reddit.com/r/Python/comments/uwhzkj/i_think_the_ctx_package_on_pypi_has_been_hacked\r\nhttps://github.com/advisories/GHSA-4g82-3jcr-q52w",
        "cve": "PVE-2022-48996",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "cycode",
        "advisory": "Cycode 0.2.0 updates its dependency 'gitpython' to v3.1.30 to include a security fix.",
        "cve": "CVE-2022-24439",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "d8s-python",
        "advisory": "D8s-python 0.1.0 is vulnerable to CVE-2022-38887: It included a potential code-execution backdoor inserted by a third party. The backdoor is the democritus-strings package.",
        "cve": "CVE-2022-38887",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "d8s-python",
        "advisory": "D8s-python 0.1.0 includes a potential code-execution backdoor inserted by a third party: the democritus-algorithms package.",
        "cve": "CVE-2022-43305",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "d8s-python",
        "advisory": "D8s-python 0.1.0 includes a potential code-execution backdoor inserted by a third party: the democritus-grammars package.",
        "cve": "CVE-2022-44049",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "dagster-cloud",
        "advisory": "Dagster-cloud 1.1.4 updates 'dagster/dagster-cloud-agent' Docker image\u2019s base to 'python:3.8.15-slim' to include security fixes.",
        "cve": "CVE-2022-1587",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "dagster-cloud",
        "advisory": "Dagster-cloud 1.1.4 updates 'dagster/dagster-cloud-agent' Docker image\u2019s base to 'python:3.8.15-slim' to include security fixes.",
        "cve": "CVE-2022-1664",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "dagster-cloud",
        "advisory": "Dagster-cloud 1.1.4 updates 'dagster/dagster-cloud-agent' Docker image\u2019s base to 'python:3.8.15-slim' to include security fixes.",
        "cve": "CVE-2022-1271",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "dagster-cloud",
        "advisory": "Dagster-cloud 1.1.4 updates 'dagster/dagster-cloud-agent' Docker image\u2019s base to 'python:3.8.15-slim' to include security fixes.",
        "cve": "CVE-2022-40674",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "dagster-cloud",
        "advisory": "Dagster-cloud 1.1.4 updates 'dagster/dagster-cloud-agent' Docker image\u2019s base to 'python:3.8.15-slim' to include security fixes.",
        "cve": "CVE-2022-2068",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "dagster-cloud",
        "advisory": "Dagster-cloud 1.1.4 updates 'dagster/dagster-cloud-agent' Docker image\u2019s base to 'python:3.8.15-slim' to include security fixes.",
        "cve": "CVE-2018-25032",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "dagster-cloud",
        "advisory": "Dagster-cloud 1.1.4 updates 'dagster/dagster-cloud-agent' Docker image\u2019s base to 'python:3.8.15-slim' to include security fixes.",
        "cve": "CVE-2021-4209",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "dagster-cloud",
        "advisory": "Dagster-cloud 1.1.4 updates 'dagster/dagster-cloud-agent' Docker image\u2019s base to 'python:3.8.15-slim' to include security fixes.",
        "cve": "CVE-2022-37434",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "dagster-cloud",
        "advisory": "Dagster-cloud 1.1.4 updates 'dagster/dagster-cloud-agent' Docker image\u2019s base to 'python:3.8.15-slim' to include security fixes.",
        "cve": "CVE-2022-1292",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "dagster-cloud",
        "advisory": "Dagster-cloud 1.1.4 updates 'dagster/dagster-cloud-agent' Docker image\u2019s base to 'python:3.8.15-slim' to include security fixes.",
        "cve": "CVE-2022-0778",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "dagster-cloud",
        "advisory": "Dagster-cloud 1.1.4 updates 'dagster/dagster-cloud-agent' Docker image\u2019s base to 'python:3.8.15-slim' to include security fixes.",
        "cve": "CVE-2021-46828",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "dagster-cloud",
        "advisory": "Dagster-cloud 1.1.4 updates 'dagster/dagster-cloud-agent' Docker image\u2019s base to 'python:3.8.15-slim' to include security fixes.",
        "cve": "CVE-2022-23218",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "dagster-cloud",
        "advisory": "Dagster-cloud 1.1.4 updates 'dagster/dagster-cloud-agent' Docker image\u2019s base to 'python:3.8.15-slim' to include security fixes.",
        "cve": "CVE-2021-3999",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "dagster-cloud",
        "advisory": "Dagster-cloud 1.1.4 updates 'dagster/dagster-cloud-agent' Docker image\u2019s base to 'python:3.8.15-slim' to include security fixes.",
        "cve": "CVE-2022-2509",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "dagster-cloud",
        "advisory": "Dagster-cloud 1.1.4 updates 'dagster/dagster-cloud-agent' Docker image\u2019s base to 'python:3.8.15-slim' to include security fixes.",
        "cve": "CVE-2021-4160",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "dagster-cloud",
        "advisory": "Dagster-cloud 1.1.4 updates 'dagster/dagster-cloud-agent' Docker image\u2019s base to 'python:3.8.15-slim' to include security fixes.",
        "cve": "CVE-2022-1586",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "dagster-cloud",
        "advisory": "Dagster-cloud 1.1.4 updates 'dagster/dagster-cloud-agent' Docker image\u2019s base to 'python:3.8.15-slim' to include security fixes.",
        "cve": "CVE-2021-3997",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "dagster-cloud",
        "advisory": "Dagster-cloud 1.1.4 updates 'dagster/dagster-cloud-agent' Docker image\u2019s base to 'python:3.8.15-slim' to include security fixes.",
        "cve": "CVE-2021-33574",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "dagster-cloud",
        "advisory": "Dagster-cloud 1.1.4 updates 'dagster/dagster-cloud-agent' Docker image\u2019s base to 'python:3.8.15-slim' to include security fixes.",
        "cve": "CVE-2022-34903",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "dagster-cloud",
        "advisory": "Dagster-cloud 1.1.4 updates 'dagster/dagster-cloud-agent' Docker image\u2019s base to 'python:3.8.15-slim' to include security fixes.",
        "cve": "CVE-2022-23219",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "dajngo",
        "advisory": "Dajngo is a typosquatting package. It shows a malicious behavior, for example, it may leak your sensitive data and/or gain unauthorized persistence in your system.\r\nhttps://www.zdnet.com/article/twelve-malicious-python-libraries-found-and-removed-from-pypi/",
        "cve": "PVE-2022-45422",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "dark-matter",
        "advisory": "Dark-matter 4.0.42 updates its dependency 'mysql-connector-python' to v8.0.19 to include a security fix.",
        "cve": "CVE-2019-2435",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "dask",
        "advisory": "Dask 2021.10.0 includes a fix for CVE-2021-42343: An issue was discovered in the Dask distributed package before 2021.10.0 for Python. Single machine Dask clusters starting with dask.distributed.LocalCluster or dask.distributed.Client (which defaults to using LocalCluster) would mistakenly configure their respective Dask workers to listen on external interfaces (typically with a randomly selected high port) rather than only on localhost. A Dask cluster created using this method (when running on a machine that has an applicable port exposed) could be used by a sophisticated attacker to achieve remote code execution.",
        "cve": "CVE-2021-42343",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "database-sanitizer",
        "advisory": "Database-Sanitizer 1.1.0 includes a security patch for the function 'from_file' in 'database_sanitizer/config.py'. It used the unsafe yaml.load(), that allows instantiation of arbitrary objects. Consider yaml.safe_load().\r\nhttps://github.com/andersinno/python-database-sanitizer/commit/ace4e0823d7b81c6f3bf683eb97193b36cc6c040#diff-6090be0559642595d2ff5ff2e9d265c6d152a75ef98845380436d0f06e0b3c19",
        "cve": "CVE-2017-18342",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "datasette",
        "advisory": "Datasette 0.55 starts to use Python 3.7.10 in official Docker image, applying the latest security fix.",
        "cve": "CVE-2021-3177",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "decancer-py",
        "advisory": "Decancer-py 0.2.1 (python bindings) updates to Decancer 1.5.2, that includes a fix for a potential Denial of Service vulnerability.\r\nhttps://github.com/null8626/decancer/commit/4e5c4dea99eb99a048e45912dc1e144d9c015d1b",
        "cve": "PVE-2022-52559",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "deepl",
        "advisory": "Deepl 1.13.0 updates its certifi package from version 2022.9.24 to 2022.12.7 in response to the security issue CVE-2022-23491.\r\nhttps://github.com/DeepLcom/deepl-python/commit/0e5f71eb26510b2fe0baf17b3d450531918d701c",
        "cve": "CVE-2022-23491",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "definitions",
        "advisory": "There is a vulnerability in load() method in definitions/parser.py in the Danijar Hafner definitions package for Python. It can execute arbitrary python commands resulting in command execution.",
        "cve": "CVE-2018-20325",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "defusedexpat",
        "advisory": "The XML libraries for Python 3.4, 3.3, 3.2, 3.1, 2.7, and 2.6, as used in OpenStack Keystone Essex, Folsom, and Grizzly; Compute (Nova) Essex and Folsom; Cinder Folsom; Django; and possibly other products allow remote attackers to cause a denial of service (resource consumption and crash) via an XML Entity Expansion (XEE) attack.",
        "cve": "CVE-2013-1664",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "defusedexpat",
        "advisory": "The XML libraries for Python 3.4, 3.3, 3.2, 3.1, 2.7, and 2.6, as used in OpenStack Keystone Essex and Folsom, Django, and possibly other products allow remote attackers to read arbitrary files via an XML external entity declaration in conjunction with an entity reference, aka an XML External Entity (XXE) attack.",
        "cve": "CVE-2013-1665",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "defusedxml",
        "advisory": "The XML libraries for Python 3.4, 3.3, 3.2, 3.1, 2.7, and 2.6, as used in OpenStack Keystone Essex, Folsom, and Grizzly; Compute (Nova) Essex and Folsom; Cinder Folsom; Django; and possibly other products allow remote attackers to cause a denial of service (resource consumption and crash) via an XML Entity Expansion (XEE) attack.",
        "cve": "CVE-2013-1664",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "defusedxml",
        "advisory": "The XML libraries for Python 3.4, 3.3, 3.2, 3.1, 2.7, and 2.6, as used in OpenStack Keystone Essex and Folsom, Django, and possibly other products allow remote attackers to read arbitrary files via an XML external entity declaration in conjunction with an entity reference, aka an XML External Entity (XXE) attack.",
        "cve": "CVE-2013-1665",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "dequests",
        "advisory": "Dequests is a malicious package, typosquatting the popular Python 'requests' library. It embeds source code that retrieves a Golang-based ransomware binary from a remote server.\r\nhttps://thehackernews.com/2022/12/malware-strains-targeting-python-and.html",
        "cve": "PVE-2023-52886",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "descarteslabs",
        "advisory": "Descarteslabs 0.4.7 includes a fix for a potential race condition vulnerability.\r\nhttps://github.com/descarteslabs/descarteslabs-python/pull/181",
        "cve": "PVE-2023-61599",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "descarteslabs",
        "advisory": "Descarteslabs version 3.0.0 has upgraded its urllib3 dependency to a newer version range, now requiring >=1.26.12 and <2. This update corrects the earlier version range of >=1.26.18,<2, and addresses security concerns linked to CVE-2023-45803.\r\nhttps://github.com/descarteslabs/descarteslabs-python/commit/7ad8fd2aadc4c10799b19bd4637f56d867dbf374",
        "cve": "CVE-2023-45803",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "descarteslabs",
        "advisory": "Descarteslabs version 3.0.2 has upgraded its pyarrow dependency to require a minimum of version 14.0.1, moving from the earlier stipulation of version 13.0.0 or newer. This update is in response to addressing security concerns highlighted by CVE-2019-12410.\r\nhttps://github.com/descarteslabs/descarteslabs-python/commit/bc51d674b7245c708e49080f3819d66ecc88fab5",
        "cve": "CVE-2019-12410",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "descarteslabs",
        "advisory": "Descarteslabs version 3.0.2 has updated its minimum required version of the requests library to 2.31.0, previously set at 2.28.1 or higher. This upgrade addresses the security issue identified as CVE-2023-32681.\r\nhttps://github.com/descarteslabs/descarteslabs-python/commit/bc51d674b7245c708e49080f3819d66ecc88fab5",
        "cve": "CVE-2023-32681",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "diango",
        "advisory": "Diango is a typosquatting package. It shows a malicious behavior, for example, it may leak your sensitive data and/or gain unauthorized persistence in your system.\r\nhttps://www.zdnet.com/article/twelve-malicious-python-libraries-found-and-removed-from-pypi/",
        "cve": "PVE-2022-45420",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "diffpriv",
        "advisory": "Diffpriv 1.0.0rc1 includes a security fix: with the 'diff' and 'enc' modules, parameters were stored in Python memory, and never removed. This commit deletes these parameters and helps prevent attackers from gaining access to these parameters, which can help them gain access to the original text and/or data.",
        "cve": "PVE-2021-40539",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "discordsafety",
        "advisory": "DiscordSafety is a malicious package, typosquatting.  It steals Discord access tokens, passwords, and even stage dependency confusion attacks.\r\nhttps://thehackernews.com/2021/11/11-malicious-pypi-python-libraries.html",
        "cve": "PVE-2022-45459",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "djago",
        "advisory": "Djago is a typosquatting package. It shows a malicious behavior, for example, it may leak your sensitive data and/or gain unauthorized persistence in your system.\r\nhttps://www.zdnet.com/article/twelve-malicious-python-libraries-found-and-removed-from-pypi/",
        "cve": "PVE-2022-45421",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "djanga",
        "advisory": "Djanga is a typosquatting package. It shows a malicious behavior, for example, it may leak your sensitive data and/or gain unauthorized persistence in your system.\r\nhttps://www.zdnet.com/article/twelve-malicious-python-libraries-found-and-removed-from-pypi/",
        "cve": "PVE-2022-45413",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "django",
        "advisory": "The verify_exists functionality in the URLField implementation in Django before 1.2.7 and 1.3.x before 1.3.1 relies on Python libraries that attempt access to an arbitrary URL with no timeout, which allows remote attackers to cause a denial of service (resource consumption) via a URL associated with (1) a slow response, (2) a completed TCP connection with no application data sent, or (3) a large amount of application data, a related issue to CVE-2011-1521.",
        "cve": "CVE-2011-4137",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "django",
        "advisory": "Django 1.4.11, 1.5.6, 1.6.3 and 1.7b2 include a fix for CVE-2014-0472: The django.core.urlresolvers.reverse function in Django before 1.4.11, 1.5.x before 1.5.6, 1.6.x before 1.6.3, and 1.7.x before 1.7 beta 2 allows remote attackers to import and execute arbitrary Python modules by leveraging a view that constructs URLs using user input and a \"dotted Python path.\r\nhttps://www.djangoproject.com/weblog/2014/apr/21/security",
        "cve": "CVE-2014-0472",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "django",
        "advisory": "Django 2.2.16, 3.0.10 and 3.1.1 include a fix for CVE-2020-24583: An issue was discovered in Django 2.2 before 2.2.16, 3.0 before 3.0.10, and 3.1 before 3.1.1 (when Python 3.7+ is used). FILE_UPLOAD_DIRECTORY_PERMISSIONS mode was not applied to intermediate-level directories created in the process of uploading files. It was also not applied to intermediate-level collected static directories when using the collectstatic management command.\r\n#NOTE: This vulnerability affects only users of Python versions above 3.7.\r\nhttps://www.djangoproject.com/weblog/2020/sep/01/security-releases",
        "cve": "CVE-2020-24583",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "django",
        "advisory": "An issue was discovered in Django 2.2 before 2.2.16, 3.0 before 3.0.10, and 3.1 before 3.1.1 (when Python 3.7+ is used). The intermediate-level directories of the filesystem cache had the system's standard umask rather than 0o077.",
        "cve": "CVE-2020-24584",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "django",
        "advisory": "The utils.html.strip_tags function in Django 1.6.x before 1.6.11, 1.7.x before 1.7.7, and 1.8.x before 1.8c1, when using certain versions of Python, allows remote attackers to cause a denial of service (infinite loop) by increasing the length of the input string.",
        "cve": "CVE-2015-2316",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "django",
        "advisory": "Django 2.2.24, 3.1.12, and 3.2.4 include a fix for CVE-2021-33571: In Django 2.2 before 2.2.24, 3.x before 3.1.12, and 3.2 before 3.2.4, URLValidator, validate_ipv4_address, and validate_ipv46_address do not prohibit leading zero characters in octal literals. This may allow a bypass of access control that is based on IP addresses. (validate_ipv4_address and validate_ipv46_address are unaffected with Python 3.9.5+).\r\nhttps://www.djangoproject.com/weblog/2021/jun/02/security-releases",
        "cve": "CVE-2021-33571",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "django",
        "advisory": "Django versions 3.2.2, 3.1.10 and 2.2.22 include a fix for CVE-2021-32052: In Django 2.2 before 2.2.22, 3.1 before 3.1.10, and 3.2 before 3.2.2 (with Python 3.9.5+), URLValidator does not prohibit newlines and tabs (unless the URLField form field is used). If an application uses values with newlines in an HTTP response, header injection can occur. Django itself is unaffected because HttpResponse prohibits newlines in HTTP headers.\r\nhttps://www.djangoproject.com/weblog/2021/may/06/security-releases",
        "cve": "CVE-2021-32052",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "django-idom",
        "advisory": "Django-idom 0.0.2 includes a fix for a potential directory traversal vulnerability.\r\nhttps://github.com/reactive-python/reactpy-django/pull/45",
        "cve": "PVE-2023-54819",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "django-make-app",
        "advisory": "An exploitable vulnerability exists in the YAML parsing functionality in the read_yaml_file method in io_utils.py in django_make_app 0.1.3. A YAML parser can execute arbitrary Python commands resulting in command execution. An attacker can insert Python into loaded YAML to trigger this vulnerability.",
        "cve": "CVE-2017-16764",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "django-mptt",
        "advisory": "Django-mptt 0.8.0 drops support for python versions <2.7. They no longer receive security patches.",
        "cve": "CVE-2011-1521",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "django-mptt",
        "advisory": "Django-mptt 0.8.0 drops support for python versions <2.7. They no longer receive security patches.",
        "cve": "CVE-2010-3492",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "django-piston",
        "advisory": "emitters.py in Django Piston before 0.2.3 and 0.2.x before 0.2.2.1 does not properly deserialize YAML data, which allows remote attackers to execute arbitrary Python code via vectors related to the yaml.load method.",
        "cve": "CVE-2011-4103",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "django-python3-ldap",
        "advisory": "Django-python3-ldap 0.9.5 fixes a security vulnerability where username and password could be transmitted in plain text before starting TLS.\r\nhttps://github.com/etianen/django-python3-ldap/commit/a250194e2911e270a90b0eec2251343040a75ece",
        "cve": "PVE-2021-25779",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "django-python3-ldap",
        "advisory": "Django-python3-ldap 0.9.8 fixes a security vulnerability allowing users to authenticate with a valid username but with an empty password if anonymous authentication is allowed on the LDAP server.\r\nhttps://github.com/etianen/django-python3-ldap/commit/17a94be4d6cc147407ac427e3067d432ac01a732",
        "cve": "PVE-2021-25780",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "django-secured-fields",
        "advisory": "Django-secured-fields 0.3.1 updates its dependency 'ipython' to v7.31.1 to include a security fix.",
        "cve": "CVE-2022-21699",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "django-tastypie",
        "advisory": "The from_yaml method in serializers.py in Django Tastypie before 0.9.10 does not properly deserialize YAML data, which allows remote attackers to execute arbitrary Python code via vectors related to the yaml.load method.",
        "cve": "CVE-2011-4104",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "djblets",
        "advisory": "An eval() vulnerability exists in Python Software Foundation Djblets 0.7.21 and Beanbag Review Board before 1.7.15 when parsing JSON requests. See: CVE-2013-4409.",
        "cve": "CVE-2013-4409",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "dnslib",
        "advisory": "Dnslib 0.9.17 includes a fix for CVE-2022-22846: The dnslib package through 0.9.16 for Python does not verify that the ID value in a DNS reply matches an ID value in a query.\r\nhttps://github.com/paulc/dnslib/issues/30",
        "cve": "CVE-2022-22846",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "dnspython",
        "advisory": "Dnspython 2.6.0 fixes a DoS vulnerability highlighted in the \"TuDoor\" paper (CVE-2023-29483), where spoofed DNS responses could disrupt service. The update prevents denial of service by ignoring malicious packets, allowing the resolver to wait for valid responses until a query's timeout. This mitigation ensures continued service despite attempted attacks, enhancing the resolver's reliability and security.",
        "cve": "PVE-2024-65401",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "dnspython",
        "advisory": "The dnspython stub resolver is vulnerable to a potential DoS if a bad-in-some-way response from the right address and port forged by an attacker arrives before a legitimate one on the UDP port dnspython is using for that query.",
        "cve": "CVE-2023-29483",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "docutils",
        "advisory": "Docutils 0.6 includes a fix for CVE-2009-5042: Python-docutils allows insecure usage of temporary files.\r\nhttps://github.com/advisories/GHSA-cg75-6938-wx58",
        "cve": "CVE-2009-5042",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "dogtag-pki",
        "advisory": "Dogtag-pki 10.9.0-b1 includes a fix for CVE-2020-15720: The pki.client.PKIConnection class did not enable python-requests certificate validation. Since the verify parameter was hard-coded in all request functions, it was not possible to override the setting. As a result, tools making use of this class, such as the pki-server command, may have been vulnerable to Person-in-the-Middle attacks in certain non-localhost use cases.\r\nhttps://github.com/dogtagpki/pki/commit/50c23ec146ee9abf28c9de87a5f7787d495f0b72",
        "cve": "CVE-2020-15720",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "donfig",
        "advisory": "An issue was discovered in Donfig 0.3.0. There is a vulnerability in the collect_yaml method in config_obj.py. It can execute arbitrary Python commands, resulting in command execution.",
        "cve": "CVE-2019-7537",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "dragonfly-uwg",
        "advisory": "Dragonfly-uwg 0.5.294 updates its dependency 'setuptools' to v65.5.1 (for python_version>='3.6') to include a security fix.",
        "cve": "CVE-2022-40897",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "dynamodb-encryption-sdk",
        "advisory": "Dynamodb-encryption-sdk 1.3.0 includes a security fix: When key usage permissions were changed at the key provider, time-based key reauthorization logic in MostRecentProvider did not reauthorize the use of the key. This created the potential for keys to be used in the DynamoDB Encryption Client after permissions to do so were revoked at the key provider. Users who cannot upgrade to use the 'CachingMostRecentProvider' can call 'clear()' on the cache to manually flush all of its contents. Next use of the key will force a re-validation to occur with the key provider.\r\nhttps://github.com/aws/aws-dynamodb-encryption-python/security/advisories/GHSA-4ph2-8337-hm62\r\nhttps://github.com/aws/aws-dynamodb-encryption-python/commit/90606ec9af7c2b5cb338d64639a62ee867d38d6b",
        "cve": "PVE-2023-55189",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "easy-xml",
        "advisory": "The parseXML function in Easy-XML 0.5.0 was discovered to have a XML External Entity (XXE) vulnerability which allows an attacker to expose sensitive data or perform a denial of service (DOS) via a crafted external entity entered into the XML content as input. See CVE-2020-26705.\r\nhttps://github.com/darkfoxprime/python-easy_xml/issues/1",
        "cve": "CVE-2020-26705",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "easyinstall",
        "advisory": "Easyinstall is a typosquatting package. It shows a malicious behavior, for example, it may leak your sensitive data and/or gain unauthorized persistence in your system.\r\nhttps://www.zdnet.com/article/twelve-malicious-python-libraries-found-and-removed-from-pypi/",
        "cve": "PVE-2022-45414",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ecdsa",
        "advisory": "A flaw was found in all python-ecdsa versions before 0.13.3, where it did not correctly verify whether signatures used DER encoding. Without this verification, a malformed signature could be accepted, making the signature malleable. Without proper verification, an attacker could use a malleable signature to create false transactions. See: CVE-2019-14859.",
        "cve": "CVE-2019-14859",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ecdsa",
        "advisory": "An error-handling flaw was found in python-ecdsa before version 0.13.3. During signature decoding, malformed DER signatures could raise unexpected exceptions (or no exceptions at all), which could lead to a denial of service. See CVE-2019-14853.",
        "cve": "CVE-2019-14853",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ecdsa",
        "advisory": "In ecdsa 0.14, deterministic signatures verify that the signature won't leak private key through very unlikely selection of `k` value (the nonce). Nonce bit size hiding was added (hardening against Minerva attack). Please note that it DOES NOT make library secure against side channel attacks (timing attacks).\r\nhttps://github.com/tlsfuzzer/python-ecdsa/commit/b516f06d0e94eca6deeb3bdb82027ad2f2f55ac6",
        "cve": "PVE-2021-37637",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ecdsa",
        "advisory": "Ecdsa does not protects against side-channel attacks. This is because Python does not provide side-channel secure primitives (with the exception of hmac.compare_digest()), making side-channel secure programming impossible. For a sophisticated attacker observing just one operation with a private key will be sufficient to completely reconstruct the private key.\r\nhttps://pypi.org/project/ecdsa/#Security",
        "cve": "PVE-2024-64396",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ecdsa",
        "advisory": "The python-ecdsa library, used for ECDSA cryptography in Python, is vulnerable to the Minerva attack (CVE-2024-23342). This flaw allows the extraction of private keys from ECDSA signatures due to a side-channel in ecdsa.SigningKey.sign_digest(). The vulnerability is pronounced in the signing process, especially in operations involving over 719,882 observations. Key generation and ECDH operations are also affected, but signature verification remains secure.\r\nhttps://github.com/tlsfuzzer/python-ecdsa/security/advisories/GHSA-wj6h-64fc-37mp",
        "cve": "CVE-2024-23342",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "elastic-apm",
        "advisory": "When the Elastic APM agent for Python versions before 5.1.0 is run as a CGI script, there is a variable name clash flaw if a remote attacker can control the proxy header. This could result in an attacker redirecting collected APM data to a proxy of their choosing. See: CVE-2019-7617.",
        "cve": "CVE-2019-7617",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "elastic-apm",
        "advisory": "A local privilege escalation vulnerability was identified in the APM Java agent, potentially also affecting the elastic-apm Python module, which shares identical release version numbers. This vulnerability allows a system user to attach a malicious file to an application monitored by the APM agent, thereby enabling them to execute commands at a higher permission level than their own. It specifically impacts configurations using the attacher CLI (version 3), the attach API (version 2), or those with the 'profiling_inferred_spans_enabled' option active.",
        "cve": "CVE-2021-37941",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "electrum",
        "advisory": "The Python console in Electrum through 2.9.4 and 3.x through 3.0.5 supports arbitrary Python code without considering (1) social-engineering attacks in which a user pastes code that they do not understand and (2) code pasted by a physically proximate attacker at an unattended workstation, which makes it easier for attackers to steal Bitcoin via hook code that runs at a later time when the wallet password has been entered, a different vulnerability than CVE-2018-1000022.",
        "cve": "CVE-2018-6353",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "electrum-python",
        "advisory": "The Python console in Electrum through 2.9.4 and 3.x through 3.0.5 supports arbitrary Python code without considering (1) social-engineering attacks in which a user pastes code that they do not understand and (2) code pasted by a physically proximate attacker at an unattended workstation, which makes it easier for attackers to steal Bitcoin via hook code that runs at a later time when the wallet password has been entered, a different vulnerability than CVE-2018-1000022.",
        "cve": "CVE-2018-6353",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "elyra",
        "advisory": "Elyra 3.7.0rc0 updates its dependency 'ipython' to v7.16.3 to include a security fix.",
        "cve": "CVE-2022-21699",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "embody-codec",
        "advisory": "Embody-codec version 1.0.28 raises its Python version requirement from at least 3.7 but less than 4.0, to now requiring a minimum of 3.9 due to security concerns outlined in CVE-2020-8492.\r\nhttps://github.com/aidee-health/embody-codec/pull/354/commits/a82092116340a5ee3d7d6fd70d11fb5bd4c2746d",
        "cve": "CVE-2020-8492",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "encapsia-cli",
        "advisory": "Encapsia-cli 0.5.2 includes a fix for CVE-2007-4559: Directory traversal vulnerability in the (1) extract and (2) extractall functions in the tarfile module in Python allows user-assisted remote attackers to overwrite arbitrary files via a .. (dot dot) sequence in filenames in a TAR archive, a related issue to CVE-2001-1267.",
        "cve": "CVE-2007-4559",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "eth-abi",
        "advisory": "Ethereum ABI (Application Binary Interface) library versions before 5.0.1 are susceptible to a vulnerability due to a recursive pointer issue. This flaw can trigger an OverflowError when decoding specially crafted payloads. The vulnerability specifically arises when attempting to decode deep nested arrays encoded in hex, as demonstrated by inputs causing Python integers to exceed the size that can be converted to C ssize_t. This issue underscores the importance of carefully handling array decoding to prevent potential overflows, emphasizing the need for appropriate validation and error handling mechanisms in applications processing such data.",
        "cve": "PVE-2024-68474",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "eventlet",
        "advisory": "Eventlet before 0.35.2, as used in dnspython before 2.6.0, allows remote attackers to interfere with DNS name resolution by quickly sending an invalid packet from the expected IP address and source port, aka a \"TuDoor\" attack. In other words, dnspython does not have the preferred behavior in which the DNS name resolution algorithm would proceed, within the full time window, in order to wait for a valid packet. \r\nNOTE: dnspython 2.6.0 is unusable for a different reason that was addressed in 2.6.1.",
        "cve": "CVE-2023-29483",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "exasol-python-test-framework",
        "advisory": "Exasol-python-test-framework updates its certifi dependency to address a security vulnerability identified as CVE-2022-23491.",
        "cve": "CVE-2022-23491",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "exasol-python-test-framework",
        "advisory": "Exasol-python-test-framework updates its GitPython dependency to address a security vulnerability identified as CVE-2022-24439.",
        "cve": "CVE-2022-24439",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "exasol-python-test-framework",
        "advisory": "Exasol-python-test-framework updates its setuptools dependency to address a security vulnerability identified as CVE-2022-40897.",
        "cve": "CVE-2022-40897",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "exasol-python-test-framework",
        "advisory": "Exasol-python-test-framework addresses CVE-2024-37891's transitive dependency via boto3 to urllib3 by updating urllib3 to version 2.2.2. This vulnerability is caused by the Proxy-Authorization request header not being stripped during cross-origin redirects, which could lead to security risks.",
        "cve": "CVE-2024-37891",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "exasol-python-test-framework",
        "advisory": "Exasol-python-test-framework addresses CVE-2024-35195 in its requests dependency by updating to versions 2.32.0 and above. This vulnerability arises from the requests.Session object not verifying SSL certificates after making an initial request with verify=False. This could allow man-in-the-middle (MITM) attacks and other security risks.",
        "cve": "CVE-2024-35195",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "exiv2",
        "advisory": "Exiv2 (Python bindings to exiv2 C++ library) 0.15.0 and 0.14.1 ship with libexiv2 version 0.28.0, which is affected by CVE-2023-44398: An out-of-bounds write was found in Exiv2 version v0.28.0. The vulnerable function, 'BmffImage::brotliUncompress', is new in v0.28.0, so earlier versions of Exiv2 are _not_ affected. The out-of-bounds write is triggered when Exiv2 is used to read the metadata of a crafted image file. An attacker could potentially exploit the vulnerability to gain code execution, if they can trick the victim into running Exiv2 on a crafted image file.\r\nhttps://github.com/jim-easterbrook/python-exiv2/commit/61c1365e4fcd09aaf391ad1d8435d9fab0715db7\r\nhttps://github.com/Exiv2/exiv2/security/advisories/GHSA-hrw9-ggg3-3r4r",
        "cve": "CVE-2023-44398",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "extensiveautomation-server",
        "advisory": "Extensiveautomation-server 12.1.0 reactivates SSLv3 cipher to support Linux client in python 2.6, fixes a security issue on folder creation in repository (no more full rights), and fixes a security issue on web services (bad  handle of the level access).",
        "cve": "PVE-2021-37348",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "eyed3",
        "advisory": "tag.py in eyeD3 (aka python-eyed3) 7.0.3, 0.6.18, and earlier for Python allows local users to modify arbitrary files via a symlink attack on a temporary file.",
        "cve": "CVE-2014-1934",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "fastapi",
        "advisory": "FastAPI 0.109.1 addresses a critical security issue by upgrading its dependency python-multipart to version >=0.0.7. The upgrade mitigates a Regular Expression Denial of Service (ReDoS) vulnerability, which occurs when parsing form data. \r\nhttps://github.com/tiangolo/fastapi/security/advisories/GHSA-qf9m-vfgh-m389",
        "cve": "PVE-2024-64930",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "fastapi",
        "advisory": "FastAPI is a web framework for building APIs with Python 3.8+ based on standard Python type hints. When using form data, `python-multipart` uses a Regular Expression to parse the HTTP `Content-Type` header, including options. An attacker could send a custom-made `Content-Type` option that is very difficult for the RegEx to process, consuming CPU resources and stalling indefinitely (minutes or more) while holding the main event loop. This means that the process can't handle any more requests. It's a ReDoS(Regular expression Denial of Service), it only applies to those reading form data, using `python-multipart`. This vulnerability has been patched in version 0.109.1. See CVE-2024-24762.",
        "cve": "CVE-2024-24762",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "fastapi-azure-auth",
        "advisory": "Fastapi-azure-auth version 4.4.0 migrates from python-jose to PyJWT due to the security vulnerability identified as CVE-2024-33663.",
        "cve": "CVE-2024-33663",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "fastapi-cognito",
        "advisory": "Affected versions of `fastapi-cognito` are potentially vulnerable due to the `cognito_jwt` dependency, which is no longer maintained. This dependency relies on `python_jose`, which is also unmaintained and uses `ecdsa`, a library with critical vulnerabilities. To address these issues, `fastapi-cognito` version 2.5.0 has removed the `cognito_jwt` dependency. The functionality for retrieving public keys and validating tokens is now integrated directly into `fastapi-cognito`, with `joserfc` used to replace `python_jose` functionalities.",
        "cve": "PVE-2024-71551",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "fastapi-opa",
        "advisory": "Fastapi-opa 1.4.2 updates its dependency 'GitPython' to include a security fix.",
        "cve": "CVE-2022-24439",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "fastapi-opa",
        "advisory": "Fastapi-opa has updated fastapi to address a vulnerability identified in CVE-2024-24762. As a result of this update, support for Python 3.7 has been discontinued. The new requirements specify Python versions >= 3.8, < 4.0 and FastAPI versions >= 0.109.2.",
        "cve": "CVE-2024-24762",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "fastapi-toolkit",
        "advisory": "Fastapi-toolkit 0.0.27 has a backdoor that adds a FastAPI route allowing a remote attacker to execute arbitrary python code and SQL queries in the context of the web application.\r\nhttps://securitylabs.datadoghq.com/articles/malicious-pypi-package-fastapi-toolkit",
        "cve": "PVE-2023-52885",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "fastbots",
        "advisory": "Fastbots 0.1.5 includes a fix for CVE-2023-48699: Prior to version 0.1.5, an attacker could modify the locators.ini locator file with python code that without proper validation it's executed and it could lead to RCE. The vulnerability is in the function 'def __locator__(self, locator_name: str)' in 'page.py'.\r\nhttps://github.com/ubertidavide/fastbots/security/advisories/GHSA-vccg-f4gp-45x9",
        "cve": "CVE-2023-48699",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "feast",
        "advisory": "Feast 0.1.2 (Python SDK) includes Feast Core and UI, which update dependencies to include security fixes.\r\nhttps://github.com/feast-dev/feast/commit/93e08927baf58e068efba186d91e8b1951ce88b0",
        "cve": "PVE-2022-48009",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "feedgen",
        "advisory": "Feedgen (python feedgen) before 0.9.0 is susceptible to XML Denial of Service attacks. The *feedgen* library allows supplying XML as content for some of the available fields. This XML will be parsed and integrated into the existing XML tree. During this process, feedgen is vulnerable to XML Denial of Service Attacks (e.g. XML Bomb). This becomes a concern in particular if feedgen is used to include content from untrused sources and if XML (including XHTML) is directly included instead of providing plain tex content only. This problem has been fixed in feedgen 0.9.0 which disallows XML entity expansion and external resources. See: CVE-2020-5227.",
        "cve": "CVE-2020-5227",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "feedparser",
        "advisory": "Cross-site scripting (XSS) vulnerability in feedparser.py in Universal Feed Parser (aka feedparser or python-feedparser) before 5.0 allows remote attackers to inject arbitrary web script or HTML via vectors involving nested CDATA stanzas.",
        "cve": "CVE-2009-5065",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "feedparser",
        "advisory": "feedparser.py in Universal Feed Parser (aka feedparser or python-feedparser) before 5.0.1 allows remote attackers to cause a denial of service (application crash) via a malformed DOCTYPE declaration.",
        "cve": "CVE-2011-1156",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "feedparser",
        "advisory": "Cross-site scripting (XSS) vulnerability in feedparser.py in Universal Feed Parser (aka feedparser or python-feedparser) 5.x before 5.0.1 allows remote attackers to inject arbitrary web script or HTML via malformed XML comments.",
        "cve": "CVE-2011-1157",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "feedparser",
        "advisory": "Cross-site scripting (XSS) vulnerability in feedparser.py in Universal Feed Parser (aka feedparser or python-feedparser) 5.x before 5.0.1 allows remote attackers to inject arbitrary web script or HTML via an unexpected URI scheme, as demonstrated by a javascript: URI.",
        "cve": "CVE-2011-1158",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "feedparser",
        "advisory": "Universal Feed Parser (aka feedparser or python-feedparser) before 5.1.2 allows remote attackers to cause a denial of service (memory consumption) via a crafted XML ENTITY declaration in a non-ASCII encoded document.",
        "cve": "CVE-2012-2921",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "fequests",
        "advisory": "Fequests is a malicious package, typosquatting the popular Python 'requests' library. It embeds source code that retrieves a Golang-based ransomware binary from a remote server.\r\nhttps://thehackernews.com/2022/12/malware-strains-targeting-python-and.html",
        "cve": "PVE-2023-52890",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "flask-caching",
        "advisory": "Flask-caching is vulnerable to CVE-2021-33026: Flask-Caching extension for Flask relies on Pickle for deserialization, which may lead to remote code execution or local privilege escalation. If an attacker gains access to cache storage (e.g., filesystem, Memcached, Redis, etc.), they can construct a crafted payload, poison the cache, and execute Python code. \r\nNOTE: Project maintainers indicate that exploitation is extremely unlikely unless the machine is already compromised; in other cases, the attacker would be unable to write their payload to the cache and generate the required collision.",
        "cve": "CVE-2021-33026",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "flask-restx",
        "advisory": "Flask-restx version 0.5.1 includes a fix for CVE-2021-32838: Flask-RESTX before version 0.5.1 is vulnerable to ReDoS (Regular Expression Denial of Service) in email_regex.\r\nhttps://github.com/advisories/GHSA-3q6g-vf58-7m4g\r\nhttps://github.com/python-restx/flask-restx/blob/fd99fe11a88531f5f3441a278f7020589f9d2cc0/flask_restx/inputs.py#L51\r\nhttps://github.com/python-restx/flask-restx/commit/bab31e085f355dd73858fd3715f7ed71849656da\r\nhttps://github.com/python-restx/flask-restx/issues/372\r\nhttps://pypi.org/project/flask-restx/",
        "cve": "CVE-2021-32838",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "flask-security",
        "advisory": "An open redirect vulnerability in the python package Flask-Security-Too <=5.3.2 allows attackers to redirect unsuspecting users to malicious sites via a crafted URL by abusing the ?next parameter on the /login and /register routes.",
        "cve": "CVE-2023-49438",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "flask-security-too",
        "advisory": "Flask-security-too 4.1.0 includes a fix for CVE-2021-32618: Flask-Security-Too allows redirects after many successful views (e.g. /login) by honoring the ?next query param. There is code in FS to validate that the url specified in the next parameter is either relative OR has the same netloc (network location) as the requesting URL. This check utilizes Pythons urlsplit library. However many browsers are very lenient on the kind of URL they accept and 'fill in the blanks' when presented with a possibly incomplete URL. As a concrete example - setting http://login?next=\\\\\\github.com will pass FS's relative URL check however many browsers will gladly convert this to http://github.com. Thus an attacker could send such a link to an unwitting user, using a legitimate site and have it redirect to whatever site they want. This is considered a low severity due to the fact that if Werkzeug is used (which is very common with Flask applications) as the WSGI layer, it by default ALWAYS ensures that the Location header is absolute - thus making this attack vector mute. It is possible for application writers to modify this default behavior by setting the 'autocorrect_location_header=False'.\r\nhttps://github.com/Flask-Middleware/flask-security/commit/e39bb04615050448c1b8ba4caa7dacc0edd3e405",
        "cve": "CVE-2021-32618",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "flask-security-too",
        "advisory": "An open redirect vulnerability in the python package Flask-Security-Too <=5.3.2 allows attackers to redirect unsuspecting users to malicious sites via a crafted URL by abusing the ?next parameter on the /login and /register routes.\r\nhttps://github.com/brandon-t-elliott/CVE-2023-49438",
        "cve": "CVE-2023-49438",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "flask-security-too",
        "advisory": "The Python \"Flask-Security-Too\" package is used for adding security features to your Flask application. It is an is a independently maintained version of Flask-Security based on the 3.0.0 version of Flask-Security. In Flask-Security-Too from version 3.3.0 and before version 3.4.5, the /login and /change endpoints can return the authenticated user's authentication token in response to a GET request. Since GET requests aren't protected with a CSRF token, this could lead to a malicious 3rd party site acquiring the authentication token. Version 3.4.5 and version 4.0.0 are patched. As a workaround, if you aren't using authentication tokens - you can set the SECURITY_TOKEN_MAX_AGE to \"0\" (seconds) which should make the token unusable. See CVE-2021-21241.",
        "cve": "CVE-2021-21241",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "flask-socketio",
        "advisory": "Flask-socketio 4.2.0 addresses potential websocket cross-origin attacks. See: <https://github.com/miguelgrinberg/python-engineio/issues/128>.",
        "cve": "PVE-2021-37309",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "flytekit",
        "advisory": "Flytekit 0.30.0 updates its dependency 'ipython' to v7.31.1 to include a security fix.",
        "cve": "CVE-2022-21699",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "fonttools",
        "advisory": "fontTools is a library for manipulating fonts, written in Python. The subsetting module has a XML External Entity Injection (XXE) vulnerability which allows an attacker to resolve arbitrary entities when a candidate font (OT-SVG fonts), which contains a SVG table, is parsed. This allows attackers to include arbitrary files from the filesystem fontTools is running on or make web requests from the host system. This vulnerability has been patched in version 4.43.0.",
        "cve": "CVE-2023-45139",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "forcebalance",
        "advisory": "Forcebalance 1.9.5 includes a fix for CVE-2007-4559: Directory traversal vulnerability in the (1) extract and (2) extractall functions in the tarfile module in Python allows user-assisted remote attackers to overwrite arbitrary files via a .. (dot dot) sequence in filenames in a TAR archive, a related issue to CVE-2001-1267.",
        "cve": "CVE-2007-4559",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "formencode",
        "advisory": "schema.py in FormEncode for Python (python-formencode) 1.0 does not apply the chained_validators feature, which allows attackers to bypass intended access restrictions via unknown vectors.",
        "cve": "CVE-2008-6547",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "frappe",
        "advisory": "Frappe is a full-stack web application framework that uses Python and MariaDB on the server side and a tightly integrated client side library. Prior to versions 14.59.0 and 15.5.0, portal pages are susceptible to Cross-Site Scripting (XSS) which can be used to inject malicious JS code if user clicks on a malicious link. This vulnerability has been patched in versions 14.59.0 and 15.5.0. No known workarounds are available. See CVE-2024-24812.",
        "cve": "CVE-2024-24812",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "frappe",
        "advisory": "Frappe is a low code web framework written in Python and Javascript. A SQL Injection vulnerability has been identified in the Frappe Framework which could allow a malicious actor to access sensitive information. This issue has been addressed in versions 13.46.1 and 14.20.0. Users are advised to upgrade. There's no workaround to fix this without upgrading.",
        "cve": "CVE-2023-41328",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "freewvs",
        "advisory": "In freewvs before 0.1.1, a directory structure of more than 1000 nested directories can interrupt a freewvs scan due to Python's recursion limit and os.walk(). This can be problematic in a case where an administrator scans the dirs of potentially untrusted users.\r\nhttps://github.com/schokokeksorg/freewvs/security/advisories/GHSA-7pmh-vrww-25xx\r\nhttps://github.com/schokokeksorg/freewvs/commit/83a6b55c0435c69f447488b791555e6078803143",
        "cve": "CVE-2020-15101",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "fundaml",
        "advisory": "Fundaml 0.1.32 updates its dependency 'ipython' to version '8.10.0' to include a fix for a Remote Code Execution vulnerability.\r\nhttps://github.com/tzoght/fundaml/commit/02e60c4d8474aa673f02a65556fef2382fe4cf16",
        "cve": "CVE-2023-24816",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "future",
        "advisory": "Future 0.18.2 and earlier allows remote attackers to cause a denial of service via crafted Set-Cookie header from malicious web server.\r\nhttps://github.com/PythonCharmers/python-future/blob/master/src/future/backports/http/cookiejar.py#L215\r\nhttps://github.com/python/cpython/pull/17157",
        "cve": "CVE-2022-40899",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "genbadge",
        "advisory": "Genbadge 1.0.0 starts to use 'defusedxml' to fix a known vulnerability. See: <https://github.com/smarie/python-genbadge/issues/11>.",
        "cve": "CVE-2013-1665",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "genbadge",
        "advisory": "Genbadge 1.0.0 starts to use 'defusedxml' to fix a known vulnerability. See: <https://github.com/smarie/python-genbadge/issues/11>.",
        "cve": "CVE-2013-1664",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "genesisbot",
        "advisory": "Genesisbot is a malicious package, typosquatting. \"The aforementioned package could be abused to become an entry point for more sophisticated threats, enabling the attacker to execute remote code on the target machine, amass system information, plunder credit card information and passwords auto-saved in Chrome and Edge browsers, and even steal Discord authentication tokens to impersonate the victim\".\r\nhttps://thehackernews.com/2021/07/several-malicious-typosquatted-python.html",
        "cve": "PVE-2022-45449",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "gequests",
        "advisory": "Gequests is a malicious package, typosquatting the popular Python 'requests' library. It embeds source code that retrieves a Golang-based ransomware binary from a remote server.\r\nhttps://thehackernews.com/2022/12/malware-strains-targeting-python-and.html",
        "cve": "PVE-2023-52889",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "git-batch",
        "advisory": "Git-batch 2.0.16 updates its dependency 'gitpython' to v3.1.35 to include a security fix.",
        "cve": "CVE-2023-41040",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "github-changelog-md",
        "advisory": "Github-changelog-md version 0.8.1 has updated its GitPython dependency from 3.1.40 to 3.1.41 to address the security issue identified as CVE-2024-22190.\r\nhttps://github.com/seapagan/github-changelog-md/commit/cccc57445478b949679782ffc6b8ac6f7710af0a",
        "cve": "CVE-2024-22190",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "gitpython",
        "advisory": "Gitpython 3.1.27 includes a fix for a REDoS vulnerability.\r\nhttps://github.com/gitpython-developers/GitPython/commit/75f4f63ab3856a552f06082aabf98845b5fa21e3",
        "cve": "PVE-2022-52518",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "gitpython",
        "advisory": "Gitpython 3.1.30 includes a fix for CVE-2022-24439: Remote Code Execution (RCE) vulnerability due to improper user input validation, which makes it possible to inject a maliciously crafted remote URL into the clone command. Exploiting this vulnerability is possible because the library makes external calls to git without sufficient sanitization of input arguments.\r\nhttps://github.com/gitpython-developers/GitPython/commit/2625ed9fc074091c531c27ffcba7902771130261",
        "cve": "CVE-2022-24439",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "gitpython",
        "advisory": "GitPython before 3.1.32 does not block insecure non-multi options in clone and clone_from. NOTE: this issue exists because of an incomplete fix for CVE-2022-24439.",
        "cve": "CVE-2023-40267",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "gitpython",
        "advisory": "GitPython 3.1.41 fixes a vulnerability (CVE-2024-22190) involving an untrusted search path issue on Windows, which could allow execution of malicious git.exe or bash.exe from untrusted repositories. This update addresses the incomplete fix from CVE-2023-40590. \r\n#It only affects Windows users\r\nhttps://github.com/gitpython-developers/GitPython/security/advisories/GHSA-2mqj-m65w-jghx",
        "cve": "CVE-2024-22190",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "gitpython",
        "advisory": "Gitpython 3.1.33 includes a fix for CVE-2023-40590: Untrusted search path on Windows systems leading to arbitrary code execution.\r\nhttps://github.com/gitpython-developers/GitPython/security/advisories/GHSA-wfm5-v35h-vwf4",
        "cve": "CVE-2023-40590",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "gitpython",
        "advisory": "Gitpython 3.1.35 includes a fix for CVE-2023-41040: Blind local file inclusion vulnerability.\r\nhttps://github.com/gitpython-developers/GitPython/security/advisories/GHSA-cwvm-v4w8-q58c",
        "cve": "CVE-2023-41040",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "glance-store",
        "advisory": "A vulnerability was found in python-glance-store. The issue occurs when the package logs the access_key for the glance-store when the DEBUG log level is enabled. See CVE-2024-1141.",
        "cve": "CVE-2024-1141",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "glances-api",
        "advisory": "Glances-api 0.3.6 updates its httpx dependency from \">=0.22,<1\" to \">=0.23,<1\". This modification is in response to CVE-2021-41945, a known security vulnerability.\r\nhttps://github.com/home-assistant-ecosystem/python-glances-api/commit/2abd37bca2547875efe7471ea6c2d2889412a552",
        "cve": "CVE-2021-41945",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "glocaltokens",
        "advisory": "Glocaltokens version 0.7.1 updates its ipython dependency from version 8.0.1 to 8.11.0 to address the security vulnerability identified as CVE-2023-24816.",
        "cve": "CVE-2023-24816",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "glovo-api-python",
        "advisory": "Glovo-api-python 2.0.0 updates its dependency 'urllib3' to v1.25.9 to include security fixes.",
        "cve": "CVE-2020-7212",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "glovo-api-python",
        "advisory": "Glovo-api-python 2.0.0 updates its dependency 'urllib3' to v1.25.9 to include security fixes.",
        "cve": "CVE-2020-26137",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "gns3-gui",
        "advisory": "Gns3-gui 2.2.35 includes a fix for CVE-2007-4559: Directory traversal vulnerability in the (1) extract and (2) extractall functions in the tarfile module in Python allows user-assisted remote attackers to overwrite arbitrary files via a .. (dot dot) sequence in filenames in a TAR archive, a related issue to CVE-2001-1267.",
        "cve": "CVE-2007-4559",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "gnss-lib-py",
        "advisory": "Gnss-lib-py 0.1.9 updates its dependency 'ipython' to v8.12.0 to include a security fix.",
        "cve": "CVE-2023-24816",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "google-ads",
        "advisory": "The Google-ads version 0.5.2 updates its PyYAML dependency, shifting from the previous range of >= 3.11, < 4.0 to the new range of >= 4.2b1, < 5.0, as a measure to address the security vulnerability detailed in CVE-2017-18342.\r\nhttps://github.com/googleads/google-ads-python/commit/f47be2a5f9ec920d72a57a78a003dd0493bd0065",
        "cve": "CVE-2017-18342",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "google-appengine",
        "advisory": "The FakeFile implementation in the sandbox environment in the Google App Engine Python SDK before 1.5.4 does not properly control the opening of files, which allows local users to bypass intended access restrictions and create arbitrary files via ALLOWED_MODES and ALLOWED_DIRS changes within the code parameter to _ah/admin/interactive/execute, a different vulnerability than CVE-2011-1364.",
        "cve": "CVE-2011-4211",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "google-appengine",
        "advisory": "The sandbox environment in the Google App Engine Python SDK before 1.5.4 does not properly prevent use of the os module, which allows local users to bypass intended access restrictions and execute arbitrary commands via a file_blob_storage.os reference within the code parameter to _ah/admin/interactive/execute, a different vulnerability than CVE-2011-1364.",
        "cve": "CVE-2011-4213",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "google-appengine",
        "advisory": "Cross-site request forgery (CSRF) vulnerability in _ah/admin/interactive/execute (aka the Interactive Console) in the SDK Console (aka Admin Console) in the Google App Engine Python SDK before 1.5.4 allows remote attackers to hijack the authentication of administrators for requests that execute arbitrary Python code via the code parameter.",
        "cve": "CVE-2011-1364",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "google-appengine",
        "advisory": "The sandbox environment in the Google App Engine Python SDK before 1.5.4 does not properly prevent os.popen calls, which allows local users to bypass intended access restrictions and execute arbitrary commands via a dev_appserver.RestrictedPathFunction._original_os reference within the code parameter to _ah/admin/interactive/execute, a different vulnerability than CVE-2011-1364.",
        "cve": "CVE-2011-4212",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "graphenelib",
        "advisory": "Graphenelib 0.6.1 includes a security fix: Certificate validation is disabled for wss urls.\r\nhttps://github.com/xeroc/python-graphenelib/issues/60",
        "cve": "PVE-2023-62447",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "graphite-web",
        "advisory": "Graphite-web 0.9.11 includes a fix for CVE-2013-5942: Graphite 0.9.5 through 0.9.10 uses the pickle Python module unsafely, which allows remote attackers to execute arbitrary code via a crafted serialized object, related to (1) remote_storage.py, (2) storage.py, (3) render/datalib.py, and (4) whitelist/views.py, a different vulnerability than CVE-2013-5093.",
        "cve": "CVE-2013-5942",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "graphite-web",
        "advisory": "Graphite-web 0.9.11 includes a fix for CVE-2013-5093: The renderLocalView function in render/views.py in graphite-web in Graphite 0.9.5 through 0.9.10 uses the pickle Python module unsafely, which allows remote attackers to execute arbitrary code via a crafted serialized object.",
        "cve": "CVE-2013-5093",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "gretel-client",
        "advisory": "Gretel-client 0.16.5 updates its dependency 'requests' to include a security fix.\r\nhttps://github.com/gretelai/gretel-python-client/commit/958a31ee15ac06680671a9b77c10a170a1dfea08",
        "cve": "PVE-2023-58940",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "grpcio",
        "advisory": "Grpcio 1.53.2, 1.54.3, 1.55.3 and 1.56.2 include a fix for CVE-2023-4785: Lack of error handling in the TCP server in Google's gRPC starting version 1.23 on posix-compatible platforms (ex. Linux) allows an attacker to cause a denial of service by initiating a significant number of connections with the server. Note that gRPC C++ Python, and Ruby are affected, but gRPC Java, and Go are NOT affected.\r\nhttps://github.com/grpc/grpc/pull/33656",
        "cve": "CVE-2023-4785",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "gsutil",
        "advisory": "Gsutil 5.0 drops support for Python 2 to patch RSA security issues.",
        "cve": "PVE-2021-41771",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "gsutil",
        "advisory": "Gsutil 5.2 drops support for Python 2 to patch RSA security issues.",
        "cve": "CVE-2018-20406",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "guarddog",
        "advisory": "### Summary\n\nUnsafe extracting using `shutil.unpack_archive()` from a remotely retrieved tarball may lead to writing the extracted file to an unintended destination.\n\n### Details\n\nExtracting files using `shutil.unpack_archive()` from a potentially malicious tarball without validating that the destination file path is within the intended destination directory can cause files outside the destination directory to be overwritten.  \n\nThe vulnerable code snippet is between [L153..158](https://github.com/DataDog/guarddog/blob/a1d064ceb09d39bb28deb6972bc0a278756ea91f/guarddog/scanners/package_scanner.py#L153..158). \n\n```python\nresponse = requests.get(url, stream=True)\n\nwith open(zippath, \"wb\") as f:\n      f.write(response.raw.read())\n\nshutil.unpack_archive(zippath, unzippedpath)\n```\nIt seems that a remotely retrieved tarball which could be with the extension `.tar.gz` happens to be unpacked using `shutil.unpack_archive()` with no destination verification/limitation of the extracted files.\n\n### PoC\n\nThe PoC provided showcases the risk of extracting the non-harmless text file `sim4n6.txt` to a parent location rather than the current folder. \n\n```bash\n> tar --list -f archive.tar\ntar: Removing leading `../../../' from member names\n../../../sim4n6.txt\n\n> python3 \nPython 3.10.6 (main, Nov  2 2022, 18:53:38) [GCC 11.3.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import shutil\n>>> shutil.unpack_archive(\"archive.tar\")\n>>> exit()\n\n> file ../../../sim4n6.txt\n../../../sim4n6.txt: ASCII text\n```\n\n### A Potential Attack Scenario\n\n- An attacker may craft a malicious tarball with a filename path, such as `../../../../../../../../etc/passwd`, and then serve the archive remotely, thus, providing a possibility to overwrite the system files.\n\n### Mitigation\n\nPotential mitigation could be to:\n- Use a safer module, like `zipfile`.\n- Validate the location of the extracted files and discard those with malicious paths such as a relative path `..` or absolute ones. ",
        "cve": "CVE-2022-23530",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "hail",
        "advisory": "Hail, a Python-based data analysis tool, uses OpenID Connect (OIDC) email addresses to verify user domains. However, users can change their email addresses, potentially gaining unauthorized access to resources. For instance, a user could create a Microsoft or Google account, change their email to test@example.org, and then create a Hail Batch account in clusters under the example.org domain. While they can't access private data or impersonate others, they can run jobs and create Azure Tenants if they have the necessary access. \r\nhttps://github.com/hail-is/hail/security/advisories/GHSA-487p-qx68-5vjw",
        "cve": "CVE-2023-51663",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "highcharts-core",
        "advisory": "Highcharts-core 1.2.0 updates its dependency 'requests' to v2.31.0 to include a security fix.\r\nhttps://github.com/highcharts-for-python/highcharts-core/commit/199f42b7ab5759411c923d0a24fd26b57aa25f25",
        "cve": "CVE-2023-32681",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "highcharts-gantt",
        "advisory": "Highcharts-gantt 1.2.0 updates its dependency 'requests' to v2.31.0 to include a security fix.\r\nhttps://github.com/highcharts-for-python/highcharts-gantt/commit/804b5bf1bd39f75690e6c13621a60cfcd39abf75",
        "cve": "CVE-2023-32681",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "highcharts-maps",
        "advisory": "Highcharts-maps 1.2.0 updates its dependency 'requests' to v2.31.0 to include a security fix.\r\nhttps://github.com/highcharts-for-python/highcharts-maps/commit/dac460249e2bbc1e33a518af48cb6fc6c91ca00e",
        "cve": "CVE-2023-32681",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "highcharts-stock",
        "advisory": "Highcharts-stock 1.2.0 updates its dependency 'requests' to v2.31.0 to include a security fix.\r\nhttps://github.com/highcharts-for-python/highcharts-stock/commit/9477155fc20a6ca2e3f184c8fe151f25db431e3e",
        "cve": "CVE-2023-32681",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "hiredis",
        "advisory": "Hiredis (python wrapper for hiredis) 2.1.0 supports hiredis 1.1.0, that includes a security fix.\r\nhttps://github.com/redis/hiredis-py/pull/135",
        "cve": "CVE-2021-32765",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "holepunch",
        "advisory": "Holepunch 1.0.0 drops support for Python 2 and 3 < 3.6. These versions are not receiving security updates anymore.",
        "cve": "CVE-2021-3737",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "holepunch",
        "advisory": "Holepunch 1.0.0 drops support for Python 2 and 3 < 3.6. These versions are not receiving security updates anymore.",
        "cve": "CVE-2021-3177",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "holepunch",
        "advisory": "Holepunch 1.0.0 drops support for Python 2 and 3 < 3.6. These versions are not receiving security updates anymore.",
        "cve": "CVE-2020-8492",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "holepunch",
        "advisory": "Holepunch 1.0.0 drops support for Python 2 and 3 < 3.6. These versions are not receiving security updates anymore.",
        "cve": "CVE-2020-27619",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "holidays",
        "advisory": "Holidays 0.45 addresses security concerns flagged by SonarCloud related to vulnerable regular expression patterns that could lead to denial of service. The issue, identified as potentially causing polynomial runtime due to backtracking, was mitigated by modifying regex strings in the codebase.\r\nhttps://github.com/vacanza/python-holidays/pull/1723",
        "cve": "PVE-2024-66787",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "homeassistant",
        "advisory": "Homeassistant 2023.3.0 includes a fix for CVE-2023-27482: A remotely exploitable vulnerability bypassing authentication for accessing the Supervisor API through Home Assistant has been discovered. This impacts all Home Assistant installation types that use the Supervisor 2023.01.1 or older. Installation types, like Home Assistant Container (for example Docker), or Home Assistant Core manually in a Python environment, are not affected. Home Assistant Core 2023.3.0 included mitigation for this vulnerability. In case one is not able to upgrade the Home Assistant Supervisor or the Home Assistant Core application at this time, it is advised to not expose your Home Assistant instance to the internet.\r\nhttps://github.com/home-assistant/core/security/advisories/GHSA-2j8f-h4mr-qr25",
        "cve": "CVE-2023-27482",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "honeycomb-beeline",
        "advisory": "Honeycomb-beeline 3.0.0 drops support for Python 2.7, version that doesn't receive security patches anymore since 2020.",
        "cve": "CVE-2020-26116",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "honeycomb-beeline",
        "advisory": "Honeycomb-beeline 3.0.0 drops support for Python 2.7, version that doesn't receive security patches anymore since 2020.",
        "cve": "PVE-2021-42379",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "honeycomb-beeline",
        "advisory": "Honeycomb-beeline 3.0.0 drops support for Python 2.7, version that doesn't receive security patches anymore since 2020.",
        "cve": "CVE-2013-7040",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "honeycomb-beeline",
        "advisory": "Honeycomb-beeline 3.0.0 drops support for Python 2.7, version that doesn't receive security patches anymore since 2020.",
        "cve": "CVE-2021-23336",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "horizon",
        "advisory": "Horizon 2012.1.1 includes a fix for CVE-2012-5474: The file /etc/openstack-dashboard/local_settings within Red Hat OpenStack Platform 2.0 and RHOS Essex Release (python-django-horizon package before 2012.1.1) is world readable and exposes the secret key value.\r\nhttps://bugzilla.redhat.com/show_bug.cgi?id=CVE-2012-5474",
        "cve": "CVE-2012-5474",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "hpack",
        "advisory": "A HTTP/2 implementation built using any version of the Python priority library prior to version 1.2.0 could be targeted by a malicious peer by having that peer assign priority information for every possible HTTP/2 stream ID. The priority tree would happily continue to store the priority information for each stream, and would therefore allocate unbounded amounts of memory. Attempting to actually use a tree like this would also cause extremely high CPU usage to maintain the tree.",
        "cve": "CVE-2016-6580",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "hpack",
        "advisory": "A HTTP/2 implementation built using any version of the Python HPACK library between v1.0.0 and v2.2.0 could be targeted for a denial of service attack, specifically a so-called \"HPACK Bomb\" attack. This attack occurs when an attacker inserts a header field that is exactly the size of the HPACK dynamic header table into the dynamic header table. The attacker can then send a header block that is simply repeated requests to expand that field in the dynamic table. This can lead to a gigantic compression ratio of 4,096 or better, meaning that 16kB of data can decompress to 64MB of data on the target machine.",
        "cve": "CVE-2016-6581",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "html5",
        "advisory": "Html5 0.99999999 fixes a XSS vulnerability exploitable when using legacy browsers. This release alters the API so that quote_attr_values is now a ternary setting, choosing between legacy-safe behavior, spec behavior, and always quoting.\r\nhttps://github.com/html5lib/html5lib-python/commit/9b8d8eb5afbc066b7fac9390f5ec75e5e8a7cab7",
        "cve": "PVE-2021-25845",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "html5lib",
        "advisory": "The serializer in html5lib before 0.99999999 might allow remote attackers to conduct cross-site scripting (XSS) attacks by leveraging mishandling of the < (less than) character in attribute values.\r\nhttps://github.com/html5lib/html5lib-python/commit/9b8d8eb5afbc066b7fac9390f5ec75e5e8a7cab7",
        "cve": "CVE-2016-9909",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "html5lib",
        "advisory": "The serializer in html5lib before 0.99999999 might allow remote attackers to conduct cross-site scripting (XSS) attacks by leveraging mishandling of special characters in attribute values, a different vulnerability than CVE-2016-9909.\r\nhttps://github.com/html5lib/html5lib-python/commit/9b8d8eb5afbc066b7fac9390f5ec75e5e8a7cab7",
        "cve": "CVE-2016-9910",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "httplib2",
        "advisory": "httplib2 is a comprehensive HTTP client library for Python. In httplib2 before version 0.19.0, a malicious server which responds with long series of \"\\xa0\" characters in the \"www-authenticate\" header may cause Denial of Service (CPU burn while parsing header) of the httplib2 client accessing said server. This is fixed in version 0.19.0 which contains a new implementation of auth headers parsing using the pyparsing library. See CVE-2021-21240.",
        "cve": "CVE-2021-21240",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "humblesetuptools",
        "advisory": "humblesetuptools 1.3 adresses a security vulnerability in SSL match_hostname check as reported in  Python #17997.",
        "cve": "PVE-2021-25852",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "hyper-bump-it",
        "advisory": "Hyper-bump-it 0.5.1 requires 'GitPython' to be version '3.1.34' as minimum, to include a security fix.",
        "cve": "CVE-2023-40590",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "hyper-bump-it",
        "advisory": "Hyper-bump-it 0.5.2 updates its dependency 'GitPython' to v3.1.35 to include a security fix.",
        "cve": "CVE-2023-41040",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "hyppo",
        "advisory": "Hyppo 0.3.0 updates its dependency 'ipython' to v7.31.1 to include a security fix.",
        "cve": "CVE-2022-21699",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "hypyp",
        "advisory": "Hypyp version 0.5.0b2 upgrades its IPython dependency from version 8.7.0 to 8.10.0 in response to CVE-2022-21699.\r\nhttps://github.com/ppsp-team/HyPyP/commit/638471adad98a5064dff98cbd5292ab653822fd0",
        "cve": "CVE-2022-21699",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "important-package",
        "advisory": "Important-package is a malicious package, typosquatting.  It steals Discord access tokens, passwords, and even stage dependency confusion attacks.\r\nhttps://thehackernews.com/2021/11/11-malicious-pypi-python-libraries.html",
        "cve": "PVE-2022-45455",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "importantpackage",
        "advisory": "Importantpackage is a malicious package, typosquatting.  It steals Discord access tokens, passwords, and even stage dependency confusion attacks.\r\nhttps://thehackernews.com/2021/11/11-malicious-pypi-python-libraries.html",
        "cve": "PVE-2022-45454",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "influxable",
        "advisory": "Influxable 1.3.2 updates to 'python:3.9.2-buster' in Dockerfile to include security fixes.",
        "cve": "CVE-2019-9740",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "influxable",
        "advisory": "Influxable 1.3.2 updates to 'python:3.9.2-buster' in Dockerfile to include security fixes.",
        "cve": "CVE-2020-14422",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "influxable",
        "advisory": "Influxable 1.3.2 updates to 'python:3.9.2-buster' in Dockerfile to include security fixes.",
        "cve": "CVE-2019-16935",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "influxable",
        "advisory": "Influxable 1.3.2 updates to 'python:3.9.2-buster' in Dockerfile to include security fixes.",
        "cve": "CVE-2019-18348",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "influxable",
        "advisory": "Influxable 1.3.2 updates to 'python:3.9.2-buster' in Dockerfile to include security fixes.",
        "cve": "CVE-2019-10160",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "influxable",
        "advisory": "Influxable 1.3.2 updates to 'python:3.9.2-buster' in Dockerfile to include security fixes.",
        "cve": "PVE-2021-42391",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "influxable",
        "advisory": "Influxable 1.3.2 updates to 'python:3.9.2-buster' in Dockerfile to include security fixes.",
        "cve": "PVE-2021-42386",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "influxable",
        "advisory": "Influxable 1.3.2 updates to 'python:3.9.2-buster' in Dockerfile to include security fixes.",
        "cve": "PVE-2021-42387",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "influxable",
        "advisory": "Influxable 1.3.2 updates to 'python:3.9.2-buster' in Dockerfile to include security fixes.",
        "cve": "PVE-2021-42385",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "influxable",
        "advisory": "Influxable 1.3.2 updates to 'python:3.9.2-buster' in Dockerfile to include security fixes.",
        "cve": "CVE-2020-26116",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "influxable",
        "advisory": "Influxable 1.3.2 updates to 'python:3.9.2-buster' in Dockerfile to include security fixes.",
        "cve": "CVE-2021-3177",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "influxable",
        "advisory": "Influxable 1.3.2 updates to 'python:3.9.2-buster' in Dockerfile to include security fixes.",
        "cve": "CVE-2019-9948",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "influxable",
        "advisory": "Influxable 1.3.2 updates to 'python:3.9.2-buster' in Dockerfile to include security fixes.",
        "cve": "CVE-2020-8492",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "influxable",
        "advisory": "Influxable 1.3.2 updates to 'python:3.9.2-buster' in Dockerfile to include security fixes.",
        "cve": "CVE-2019-20907",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "influxable",
        "advisory": "Influxable 1.3.2 updates to 'python:3.9.2-buster' in Dockerfile to include security fixes.",
        "cve": "CVE-2019-16056",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "influxable",
        "advisory": "Influxable 1.3.2 updates to 'python:3.9.2-buster' in Dockerfile to include security fixes.",
        "cve": "CVE-2019-9947",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "influxable",
        "advisory": "Influxable 1.3.2 updates to 'python:3.9.2-buster' in Dockerfile to include security fixes.",
        "cve": "CVE-2020-27619",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "infobip-api-python-sdk",
        "advisory": "Infobip-api-python-sdk 5.0.1 updates its dependency 'requests' to v2.31.0 to include a security fix.",
        "cve": "CVE-2023-32681",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "injective-py",
        "advisory": "Injective-py 0.5.6.4 adds root CA certs for mainnet & testnet for secure gRPC connections by default.\r\nhttps://github.com/InjectiveLabs/sdk-python/commit/383301ab4b82016234729495f4bccdec3b6d5487",
        "cve": "PVE-2022-44884",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "inquirer",
        "advisory": "Inquirer 3.1.2 updates its dependency 'GitPython' to v3.1.30 to include a security fix.\r\nhttps://github.com/magmax/python-inquirer/pull/331/commits/455f8b98cb402542810fb55bb717682101aeca27",
        "cve": "CVE-2022-24439",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "intel-opencl-rt",
        "advisory": "Intel-opencl-rt 2022.1 includes a fix for CVE-2022-26032: Uncontrolled search path element in the Intel(R) Distribution for Python programming language before version 2022.1 for Intel(R) oneAPI Toolkits may allow an authenticated user to potentially enable escalation of privilege via local access.\r\nhttps://www.intel.com/content/www/us/en/security-center/advisory/intel-sa-00674.html",
        "cve": "CVE-2022-26032",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "intel-tensorflow",
        "advisory": "Intel-tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15207: In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, to mimic Python's indexing with negative values, TFLite uses 'ResolveAxis' to convert negative values to positive indices. However, the only check that the converted index is now valid is only present in debug builds. If the 'DCHECK' does not trigger, then code execution moves ahead with a negative index. This, in turn, results in accessing data out of bounds which results in segfaults and/or data corruption.\nhttps://github.com/tensorflow/tensorflow/security/advisories/GHSA-q4qf-3fc6-8x34",
        "cve": "CVE-2020-15207",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "intel-tensorflow",
        "advisory": "Intel-tensorflow versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2 and 2.4.0 includes a fix for CVE-2020-26268: In affected versions, the tf.raw_ops.ImmutableConst operation returns a constant tensor created from a memory mapped file which is assumed immutable. However, if the type of the tensor is not an integral type, the operation crashes the Python interpreter as it tries to write to the memory area. If the file is too small, TensorFlow properly returns an error as the memory area has fewer bytes than what is needed for the tensor it creates. However, as soon as there are enough bytes, the above snippet causes a segmentation fault. This is because the allocator used to return the buffer data is not marked as returning an opaque handle since the needed virtual method is not overridden.",
        "cve": "CVE-2020-26268",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "intel-tensorflow",
        "advisory": "Intel-tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41213: In affected versions, the code behind 'tf.function' API can be made to deadlock when two 'tf.function' decorated Python functions are mutually recursive. This occurs due to using a non-reentrant 'Lock' Python object. Loading any model which contains mutually recursive functions is vulnerable. An attacker can cause denial of service by causing users to load such models and calling a recursive 'tf.function', although this is not a frequent scenario.\nhttps://github.com/tensorflow/tensorflow/security/advisories/GHSA-h67m-xg8f-fxcf\nhttps://github.com/tensorflow/tensorflow/commit/afac8158d43691661ad083f6dd9e56f327c1dcb7",
        "cve": "CVE-2021-41213",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "intel-tensorflow",
        "advisory": "Intel-tensorflow is an Open Source Machine Learning Framework. A malicious user can cause a denial of service by altering a `SavedModel` such that assertions in `function.cc` would be falsified and crash the Python interpreter. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.",
        "cve": "CVE-2022-23586",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "intel-tensorflow",
        "advisory": "Intel-tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21728: The implementation of shape inference for 'ReverseSequence' does not fully validate the value of 'batch_dim' and can result in a heap OOB read. There is a check to make sure the value of 'batch_dim' does not go over the rank of the input, but there is no check for negative values. Negative dimensions are allowed in some cases to mimic Python's negative indexing (i.e., indexing from the end of the array), however if the value is too negative then the implementation of 'Dim' would access elements before the start of an array.\nhttps://github.com/tensorflow/tensorflow/security/advisories/GHSA-6gmv-pjp9-p8w8",
        "cve": "CVE-2022-21728",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "intel-tensorflow",
        "advisory": "Intel-tensorflow versions 1.15.2 and 2.0.1 includes a fix for CVE-2020-5215: In TensorFlow before 1.15.2 and 2.0.1, converting a string (from Python) to a tf.float16 value results in a segmentation fault in eager mode as the format checks for this use case are only in the graph mode. This issue can lead to denial of service in inference/training where a malicious attacker can send a data point which contains a string instead of a tf.float16 value. Similar effects can be obtained by manipulating saved models and checkpoints whereby replacing a scalar tf.float16 value with a scalar string will trigger this issue due to automatic conversions. This can be easily reproduced by tf.constant(\"hello\", tf.float16), if eager execution is enabled.",
        "cve": "CVE-2020-5215",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "intel-tensorflow",
        "advisory": "Intel-tensorflow versions 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 include a fix for CVE-2021-29567: Due to lack of validation in 'tf.raw_ops.SparseDenseCwiseMul', an attacker can trigger denial of service via 'CHECK'-fails or accesses to outside the bounds of heap allocated data. Since the implementation (https://github.com/tensorflow/tensorflow/blob/38178a2f7a681a7835bb0912702a134bfe3b4d84/tensorflow/core/kernels/sparse_dense_binary_op_shared.cc#L68-L80), it only validates the rank of the input arguments but no constraints between dimensions (https://www.tensorflow.org/api_docs/python/tf/raw_ops/SparseDenseCwiseMul) and an attacker can abuse them to trigger internal 'CHECK' assertions (and cause program termination, denial of service) or to write to memory outside of bounds of heap allocated tensor buffers.",
        "cve": "CVE-2021-29567",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "intel-tensorflow",
        "advisory": "Intel-tensorflow versions 2.2.1 and 2.3.1 include a fix for CVE-2020-15193: In Tensorflow before versions 2.2.1 and 2.3.1, the implementation of \"dlpack.to_dlpack\" can be made to use uninitialized memory resulting in further memory corruption. This is because the pybind11 glue code assumes that the argument is a tensor. However, there is nothing stopping users from passing in a Python object instead of a tensor. The uninitialized memory address is due to a \"reinterpret_cast\". Since the \"PyObject\" is a Python object, not a Tensorflow tensor, the cast to \"EagerTensor\" fails. The issue was patched in commit 22e07fb204386768e5bcbea563641ea11f96ceb8\nhttps://github.com/tensorflow/tensorflow/security/advisories/GHSA-rjjg-hgv6-h69v",
        "cve": "CVE-2020-15193",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "intel-tensorflow",
        "advisory": "Intel-tensorflow 2.5.0, 2.4.2, 2.3.3, 2.2.3, and 2.1.4 include a fix for CVE-2021-29614: The implementation of 'tf.io.decode_raw' produces incorrect results and crashes the Python interpreter when combining 'fixed_length' and wider datatypes. The implementation of the padded version (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc) is buggy due to a confusion about pointer arithmetic rules. First, the code computes (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L61) the width of each output element by dividing the 'fixed_length' value to the size of the type argument. The 'fixed_length' argument is also used to determine the size needed for the output tensor (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L63-L79). This is followed by reencoding code (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L85-L94). The erroneous code is the last line above: it is moving the 'out_data' pointer by 'fixed_length * sizeof (T)' bytes whereas it only copied at most 'fixed_length' bytes from the input. This results in parts of the input not being decoded into the output. Furthermore, because the pointer advance is far wider than desired, this quickly leads to writing to outside the bounds of the backing data. This OOB write leads to interpreter crash in the reproducer mentioned here, but more severe attacks can be mounted too, given that this gadget allows writing to periodically placed locations in memory.",
        "cve": "CVE-2021-29614",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "intel-tensorflow",
        "advisory": "Intel-tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29539: TensorFlow is an end-to-end open source platform for machine learning. Calling `tf.raw_ops.ImmutableConst`(https://www.tensorflow.org/api_docs/python/tf/raw_ops/ImmutableConst) with a `dtype` of `tf.resource` or `tf.variant` results in a segfault in the implementation as code assumes that the tensor contents are pure scalars. We have patched the issue in 4f663d4b8f0bec1b48da6fa091a7d29609980fa4 and will release TensorFlow 2.5.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved. If using `tf.raw_ops.ImmutableConst` in code, you can prevent the segfault by inserting a filter for the `dtype` argument.",
        "cve": "CVE-2021-29539",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "intel-tensorflow",
        "advisory": "Intel-tensorflow 2.5.0, 2.4.2, 2.3.3, 2.2.3 and 2.1.4 include a fix for CVE-2021-29548: An attacker can cause a runtime division by zero error and denial of service in `tf.raw_ops.QuantizedBatchNormWithGlobalNormalization`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/55a97caa9e99c7f37a0bbbeb414dc55553d3ae7f/tensorflow/core/kernels/quantized_batch_norm_op.cc) does not validate all constraints specified in the op's contract (https://www.tensorflow.org/api_docs/python/tf/raw_ops/QuantizedBatchNormWithGlobalNormalization).",
        "cve": "CVE-2021-29548",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "intel-tensorflow",
        "advisory": "Intel-tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29513: Calling TF operations with tensors of non-numeric types when the operations expect numeric tensors result in null pointer dereferences. The conversion from Python array to C++ array (https://github.com/tensorflow/tensorflow/blob/ff70c47a396ef1e3cb73c90513da4f5cb71bebba/tensorflow/python/lib/core/ndarray_tensor.cc#L113-L169) is vulnerable to a type confusion.",
        "cve": "CVE-2021-29513",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "intel-tensorflow",
        "advisory": "Intel-tensorflow versions 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 include a fix for CVE-2021-29512: If the 'splits' argument of 'RaggedBincount' does not specify a valid 'SparseTensor' (https://www.tensorflow.org/api_docs/python/tf/sparse/SparseTensor), then an attacker can trigger a heap buffer overflow. This will cause a read from outside the bounds of the 'splits' tensor buffer in the implementation of the 'RaggedBincount' op (https://github.com/tensorflow/tensorflow/blob/8b677d79167799f71c42fd3fa074476e0295413a/tensorflow/core/kernels/bincount_op.cc#L430-L433). Before the 'for' loop, 'batch_idx' is set to 0. The user controls the 'splits' array, making it contain only one element, 0. Thus, the code in the 'while' loop would increment 'batch_idx' and then try to read 'splits(1)', which is outside of bounds.",
        "cve": "CVE-2021-29512",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "intel-tensorflow",
        "advisory": "Intel-tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29514: If the 'splits' argument of 'RaggedBincount' does not specify a valid 'SparseTensor' (https://www.tensorflow.org/api_docs/python/tf/sparse/SparseTensor), then an attacker can trigger a heap buffer overflow. This will cause a read from outside the bounds of the 'splits' tensor buffer in the implementation of the 'RaggedBincount' op (https://github.com/tensorflow/tensorflow/blob/8b677d79167799f71c42fd3fa074476e0295413a/tensorflow/core/kernels/bincount_op.cc#L430-L446). Before the 'for' loop, 'batch_idx' is set to 0. The attacker sets 'splits(0)' to be 7, hence the 'while' loop does not execute and 'batch_idx' remains 0. This then results in writing to 'out(-1, bin)', which is before the heap allocated buffer for the output tensor.",
        "cve": "CVE-2021-29514",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "intel-tensorflow",
        "advisory": "Intel-tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29571: The implementation of 'tf.raw_ops.MaxPoolGradWithArgmax' can cause reads outside of bounds of heap allocated data if attacker supplies specially crafted inputs. The implementation (https://github.com/tensorflow/tensorflow/blob/31bd5026304677faa8a0b77602c6154171b9aec1/tensorflow/core/kernels/image/draw_bounding_box_op.cc#L116-L130) assumes that the last element of 'boxes' input is 4, as required by the op (https://www.tensorflow.org/api_docs/python/tf/raw_ops/DrawBoundingBoxesV2). Since this is not checked attackers passing values less than 4 can write outside of bounds of heap allocated objects and cause memory corruption. If the last dimension in 'boxes' is less than 4, accesses similar to 'tboxes(b, bb, 3)' will access data outside of bounds. Further during code execution there are also writes to these indices.",
        "cve": "CVE-2021-29571",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "intel-tensorflow",
        "advisory": "Intel-tensorflow 2.5.0, 2.4.2, 2.3.3, 2.2.3, and 2.1.4 include a fix for CVE-2021-29572: The implementation of `tf.raw_ops.SdcaOptimizer` triggers undefined behavior due to dereferencing a null pointer. The implementation (https://github.com/tensorflow/tensorflow/blob/60a45c8b6192a4699f2e2709a2645a751d435cc3/tensorflow/core/kernels/sdca_internal.cc) does not validate that the user supplied arguments satisfy all constraints expected by the op(https://www.tensorflow.org/api_docs/python/tf/raw_ops/SdcaOptimizer).",
        "cve": "CVE-2021-29572",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "intel-tensorflow",
        "advisory": "Intel-tensorflow version 2.3.4, 2.4.3, 2.5.1, 2.6.0 and 2.7.0 include a fix for CVE-2021-37678:\nIn affected versions, TensorFlow and Keras can be tricked to perform arbitrary code execution when deserializing a Keras model from YAML format. The implementation(https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/python/keras/saving/model_config.py#L66-L104) uses \"yaml.unsafe_load\" which can perform arbitrary code execution on the input. Given that YAML format support requires a significant amount of work, the Tensorflow team has removed it for now. The Tensorflow team has patched the issue in GitHub commit 23d6383eb6c14084a8fc3bdf164043b974818012.\nhttps://github.com/tensorflow/tensorflow/security/advisories/GHSA-r6jx-9g48-2r5r\nhttps://github.com/tensorflow/tensorflow/commit/23d6383eb6c14084a8fc3bdf164043b974818012",
        "cve": "CVE-2021-37678",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "intel-tensorflow",
        "advisory": "Intel-tensorflow is an Open Source Machine Learning Framework. The TFG dialect of TensorFlow (MLIR) makes several assumptions about the incoming `GraphDef` before converting it to the MLIR-based dialect. If an attacker changes the `SavedModel` format on disk to invalidate these assumptions and the `GraphDef` is then converted to MLIR-based IR then they can cause a crash in the Python interpreter. Under certain scenarios, heap OOB read/writes are possible. These issues have been discovered via fuzzing and it is possible that more weaknesses exist. We will patch them as they are discovered.",
        "cve": "CVE-2022-23594",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "intel-tensorflow-avx512",
        "advisory": "Intel-tensorflow-avx512 versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15207: In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, to mimic Python's indexing with negative values, TFLite uses 'ResolveAxis' to convert negative values to positive indices. However, the only check that the converted index is now valid is only present in debug builds. If the 'DCHECK' does not trigger, then code execution moves ahead with a negative index. This, in turn, results in accessing data out of bounds which results in segfaults and/or data corruption.\nhttps://github.com/tensorflow/tensorflow/security/advisories/GHSA-q4qf-3fc6-8x34",
        "cve": "CVE-2020-15207",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "intel-tensorflow-avx512",
        "advisory": "Intel-tensorflow-avx512 versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2 and 2.4.0 includes a fix for CVE-2020-26268: In affected versions, the tf.raw_ops.ImmutableConst operation returns a constant tensor created from a memory mapped file which is assumed immutable. However, if the type of the tensor is not an integral type, the operation crashes the Python interpreter as it tries to write to the memory area. If the file is too small, TensorFlow properly returns an error as the memory area has fewer bytes than what is needed for the tensor it creates. However, as soon as there are enough bytes, the above snippet causes a segmentation fault. This is because the allocator used to return the buffer data is not marked as returning an opaque handle since the needed virtual method is not overridden.",
        "cve": "CVE-2020-26268",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "intel-tensorflow-avx512",
        "advisory": "Intel-tensorflow-avx512 versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41213: In affected versions, the code behind 'tf.function' API can be made to deadlock when two 'tf.function' decorated Python functions are mutually recursive. This occurs due to using a non-reentrant 'Lock' Python object. Loading any model which contains mutually recursive functions is vulnerable. An attacker can cause denial of service by causing users to load such models and calling a recursive 'tf.function', although this is not a frequent scenario.\nhttps://github.com/tensorflow/tensorflow/security/advisories/GHSA-h67m-xg8f-fxcf\nhttps://github.com/tensorflow/tensorflow/commit/afac8158d43691661ad083f6dd9e56f327c1dcb7",
        "cve": "CVE-2021-41213",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "intel-tensorflow-avx512",
        "advisory": "Intel-tensorflow-avx512 versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21728: The implementation of shape inference for 'ReverseSequence' does not fully validate the value of 'batch_dim' and can result in a heap OOB read. There is a check to make sure the value of 'batch_dim' does not go over the rank of the input, but there is no check for negative values. Negative dimensions are allowed in some cases to mimic Python's negative indexing (i.e., indexing from the end of the array), however if the value is too negative then the implementation of 'Dim' would access elements before the start of an array.\nhttps://github.com/tensorflow/tensorflow/security/advisories/GHSA-6gmv-pjp9-p8w8",
        "cve": "CVE-2022-21728",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "intel-tensorflow-avx512",
        "advisory": "Intel-tensorflow-avx512 is an Open Source Machine Learning Framework. A malicious user can cause a denial of service by altering a `SavedModel` such that assertions in `function.cc` would be falsified and crash the Python interpreter. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.",
        "cve": "CVE-2022-23586",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "intel-tensorflow-avx512",
        "advisory": "Intel-tensorflow-avx512 versions 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 include a fix for CVE-2021-29567: Due to lack of validation in 'tf.raw_ops.SparseDenseCwiseMul', an attacker can trigger denial of service via 'CHECK'-fails or accesses to outside the bounds of heap allocated data. Since the implementation (https://github.com/tensorflow/tensorflow/blob/38178a2f7a681a7835bb0912702a134bfe3b4d84/tensorflow/core/kernels/sparse_dense_binary_op_shared.cc#L68-L80), it only validates the rank of the input arguments but no constraints between dimensions (https://www.tensorflow.org/api_docs/python/tf/raw_ops/SparseDenseCwiseMul) and an attacker can abuse them to trigger internal 'CHECK' assertions (and cause program termination, denial of service) or to write to memory outside of bounds of heap allocated tensor buffers.",
        "cve": "CVE-2021-29567",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "intel-tensorflow-avx512",
        "advisory": "Intel-tensorflow-avx512 versions 2.2.1 and 2.3.1 include a fix for CVE-2020-15193: In Tensorflow before versions 2.2.1 and 2.3.1, the implementation of \"dlpack.to_dlpack\" can be made to use uninitialized memory resulting in further memory corruption. This is because the pybind11 glue code assumes that the argument is a tensor. However, there is nothing stopping users from passing in a Python object instead of a tensor. The uninitialized memory address is due to a \"reinterpret_cast\". Since the \"PyObject\" is a Python object, not a Tensorflow tensor, the cast to \"EagerTensor\" fails. The issue was patched in commit 22e07fb204386768e5bcbea563641ea11f96ceb8\nhttps://github.com/tensorflow/tensorflow/security/advisories/GHSA-rjjg-hgv6-h69v",
        "cve": "CVE-2020-15193",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "intel-tensorflow-avx512",
        "advisory": "Intel-tensorflow-avx512 2.5.0, 2.4.2, 2.3.3, 2.2.3, and 2.1.4 include a fix for CVE-2021-29614: The implementation of 'tf.io.decode_raw' produces incorrect results and crashes the Python interpreter when combining 'fixed_length' and wider datatypes. The implementation of the padded version (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc) is buggy due to a confusion about pointer arithmetic rules. First, the code computes (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L61) the width of each output element by dividing the 'fixed_length' value to the size of the type argument. The 'fixed_length' argument is also used to determine the size needed for the output tensor (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L63-L79). This is followed by reencoding code (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L85-L94). The erroneous code is the last line above: it is moving the 'out_data' pointer by 'fixed_length * sizeof (T)' bytes whereas it only copied at most 'fixed_length' bytes from the input. This results in parts of the input not being decoded into the output. Furthermore, because the pointer advance is far wider than desired, this quickly leads to writing to outside the bounds of the backing data. This OOB write leads to interpreter crash in the reproducer mentioned here, but more severe attacks can be mounted too, given that this gadget allows writing to periodically placed locations in memory.",
        "cve": "CVE-2021-29614",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "intel-tensorflow-avx512",
        "advisory": "Intel-tensorflow-avx512 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29513: Calling TF operations with tensors of non-numeric types when the operations expect numeric tensors result in null pointer dereferences. The conversion from Python array to C++ array (https://github.com/tensorflow/tensorflow/blob/ff70c47a396ef1e3cb73c90513da4f5cb71bebba/tensorflow/python/lib/core/ndarray_tensor.cc#L113-L169) is vulnerable to a type confusion.",
        "cve": "CVE-2021-29513",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "intel-tensorflow-avx512",
        "advisory": "Intel-tensorflow-avx512 2.5.0, 2.4.2, 2.3.3, 2.2.3 and 2.1.4 include a fix for CVE-2021-29548: An attacker can cause a runtime division by zero error and denial of service in `tf.raw_ops.QuantizedBatchNormWithGlobalNormalization`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/55a97caa9e99c7f37a0bbbeb414dc55553d3ae7f/tensorflow/core/kernels/quantized_batch_norm_op.cc) does not validate all constraints specified in the op's contract (https://www.tensorflow.org/api_docs/python/tf/raw_ops/QuantizedBatchNormWithGlobalNormalization).",
        "cve": "CVE-2021-29548",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "intel-tensorflow-avx512",
        "advisory": "Intel-tensorflow-avx512 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29539: TensorFlow is an end-to-end open source platform for machine learning. Calling `tf.raw_ops.ImmutableConst`(https://www.tensorflow.org/api_docs/python/tf/raw_ops/ImmutableConst) with a `dtype` of `tf.resource` or `tf.variant` results in a segfault in the implementation as code assumes that the tensor contents are pure scalars. We have patched the issue in 4f663d4b8f0bec1b48da6fa091a7d29609980fa4 and will release TensorFlow 2.5.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved. If using `tf.raw_ops.ImmutableConst` in code, you can prevent the segfault by inserting a filter for the `dtype` argument.",
        "cve": "CVE-2021-29539",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "intel-tensorflow-avx512",
        "advisory": "Intel-tensorflow-avx512 versions 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 include a fix for CVE-2021-29512: If the 'splits' argument of 'RaggedBincount' does not specify a valid 'SparseTensor' (https://www.tensorflow.org/api_docs/python/tf/sparse/SparseTensor), then an attacker can trigger a heap buffer overflow. This will cause a read from outside the bounds of the 'splits' tensor buffer in the implementation of the 'RaggedBincount' op (https://github.com/tensorflow/tensorflow/blob/8b677d79167799f71c42fd3fa074476e0295413a/tensorflow/core/kernels/bincount_op.cc#L430-L433). Before the 'for' loop, 'batch_idx' is set to 0. The user controls the 'splits' array, making it contain only one element, 0. Thus, the code in the 'while' loop would increment 'batch_idx' and then try to read 'splits(1)', which is outside of bounds.",
        "cve": "CVE-2021-29512",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "intel-tensorflow-avx512",
        "advisory": "Intel-tensorflow-avx512 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29514: If the 'splits' argument of 'RaggedBincount' does not specify a valid 'SparseTensor' (https://www.tensorflow.org/api_docs/python/tf/sparse/SparseTensor), then an attacker can trigger a heap buffer overflow. This will cause a read from outside the bounds of the 'splits' tensor buffer in the implementation of the 'RaggedBincount' op (https://github.com/tensorflow/tensorflow/blob/8b677d79167799f71c42fd3fa074476e0295413a/tensorflow/core/kernels/bincount_op.cc#L430-L446). Before the 'for' loop, 'batch_idx' is set to 0. The attacker sets 'splits(0)' to be 7, hence the 'while' loop does not execute and 'batch_idx' remains 0. This then results in writing to 'out(-1, bin)', which is before the heap allocated buffer for the output tensor.",
        "cve": "CVE-2021-29514",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "intel-tensorflow-avx512",
        "advisory": "Intel-tensorflow-avx512 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29571: The implementation of 'tf.raw_ops.MaxPoolGradWithArgmax' can cause reads outside of bounds of heap allocated data if attacker supplies specially crafted inputs. The implementation (https://github.com/tensorflow/tensorflow/blob/31bd5026304677faa8a0b77602c6154171b9aec1/tensorflow/core/kernels/image/draw_bounding_box_op.cc#L116-L130) assumes that the last element of 'boxes' input is 4, as required by the op (https://www.tensorflow.org/api_docs/python/tf/raw_ops/DrawBoundingBoxesV2). Since this is not checked attackers passing values less than 4 can write outside of bounds of heap allocated objects and cause memory corruption. If the last dimension in 'boxes' is less than 4, accesses similar to 'tboxes(b, bb, 3)' will access data outside of bounds. Further during code execution there are also writes to these indices.",
        "cve": "CVE-2021-29571",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "intel-tensorflow-avx512",
        "advisory": "Intel-tensorflow-avx512 2.5.0, 2.4.2, 2.3.3, 2.2.3, and 2.1.4 include a fix for CVE-2021-29572: The implementation of `tf.raw_ops.SdcaOptimizer` triggers undefined behavior due to dereferencing a null pointer. The implementation (https://github.com/tensorflow/tensorflow/blob/60a45c8b6192a4699f2e2709a2645a751d435cc3/tensorflow/core/kernels/sdca_internal.cc) does not validate that the user supplied arguments satisfy all constraints expected by the op(https://www.tensorflow.org/api_docs/python/tf/raw_ops/SdcaOptimizer).",
        "cve": "CVE-2021-29572",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "intel-tensorflow-avx512",
        "advisory": "Intel-tensorflow-avx512 version 2.3.4, 2.4.3, 2.5.1, 2.6.0 and 2.7.0 include a fix for CVE-2021-37678:\nIn affected versions, TensorFlow and Keras can be tricked to perform arbitrary code execution when deserializing a Keras model from YAML format. The implementation(https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/python/keras/saving/model_config.py#L66-L104) uses \"yaml.unsafe_load\" which can perform arbitrary code execution on the input. Given that YAML format support requires a significant amount of work, the Tensorflow team has removed it for now. The Tensorflow team has patched the issue in GitHub commit 23d6383eb6c14084a8fc3bdf164043b974818012.\nhttps://github.com/tensorflow/tensorflow/security/advisories/GHSA-r6jx-9g48-2r5r\nhttps://github.com/tensorflow/tensorflow/commit/23d6383eb6c14084a8fc3bdf164043b974818012",
        "cve": "CVE-2021-37678",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "intel-tensorflow-avx512",
        "advisory": "Intel-tensorflow-avx512 is an Open Source Machine Learning Framework. The TFG dialect of TensorFlow (MLIR) makes several assumptions about the incoming `GraphDef` before converting it to the MLIR-based dialect. If an attacker changes the `SavedModel` format on disk to invalidate these assumptions and the `GraphDef` is then converted to MLIR-based IR then they can cause a crash in the Python interpreter. Under certain scenarios, heap OOB read/writes are possible. These issues have been discovered via fuzzing and it is possible that more weaknesses exist. We will patch them as they are discovered.",
        "cve": "CVE-2022-23594",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ipahttp",
        "advisory": "Ipahttp is a malicious package, typosquatting.\r\nhttps://blog.sonatype.com/trojanized-pypi-package-imitates-a-popular-python-server-library",
        "cve": "PVE-2022-47818",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ipboards",
        "advisory": "Ipboards is a malicious package, typosquatting.  It steals Discord access tokens, passwords, and even stage dependency confusion attacks.\r\nhttps://thehackernews.com/2021/11/11-malicious-pypi-python-libraries.html",
        "cve": "PVE-2022-45457",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ipex-llm",
        "advisory": "Ipex-llm version 2.3.0 includes updates from BigDL version 2.3.0, which provide functional and security improvements. Notably, BigDL 2.3.0 addresses a SQL injection vulnerability in python/benchmark/run.py.",
        "cve": "PVE-2023-55136",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ipsilon",
        "advisory": "The Identity Provider (IdP) server in Ipsilon 0.1.0 before 1.0.1 does not properly escape certain characters in a Python exception-message template, which makes it easier for remote attackers to conduct cross-site scripting (XSS) attacks via an HTTP response. See: CVE-2015-5216.",
        "cve": "CVE-2015-5216",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ipython",
        "advisory": "Cross-site scripting (XSS) vulnerability in IPython before 3.2 allows remote attackers to inject arbitrary web script or HTML via vectors involving JSON error messages and the /api/notebooks path.",
        "cve": "CVE-2015-4707",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ipython",
        "advisory": "Ipython 3.2.1 includes a fix for CVE-2015-5607: Cross-site request forgery in the REST API in IPython 2 and 3.\r\nhttps://github.com/ipython/ipython/commit/1415a9710407e7c14900531813c15ba6165f0816",
        "cve": "CVE-2015-5607",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ipython",
        "advisory": "Cross-site scripting (XSS) vulnerability in the file browser in notebook/notebookapp.py in IPython Notebook before 3.2.2 and Jupyter Notebook 4.0.x before 4.0.5 allows remote attackers to inject arbitrary web script or HTML via a folder name.  NOTE: this was originally reported as a cross-site request forgery (CSRF) vulnerability, but this may be inaccurate.",
        "cve": "CVE-2015-6938",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ipython",
        "advisory": "The editor in IPython Notebook before 3.2.2 and Jupyter Notebook 4.0.x before 4.0.5 allows remote attackers to execute arbitrary JavaScript code via a crafted file, which triggers a redirect to files/, related to MIME types.",
        "cve": "CVE-2015-7337",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ipython",
        "advisory": "IPython 8.10.0 includes a fix for CVE-2023-24816: Versions prior to 8.10.0 are subject to a command injection vulnerability with very specific prerequisites. This vulnerability requires that the function 'IPython.utils.terminal.set_term_title' be called on Windows in a Python environment where ctypes is not available. The dependency on 'ctypes' in 'IPython.utils._process_win32' prevents the vulnerable code from ever being reached in the ipython binary. However, as a library that could be used by another tool 'set_term_title' could be called and hence introduce a vulnerability. If an attacker get untrusted input to an instance of this function they would be able to inject shell commands as current process and limited to the scope of the current process. As a workaround, users should ensure that any calls to the 'IPython.utils.terminal.set_term_title' function are done with trusted or filtered input.\r\nhttps://github.com/ipython/ipython/security/advisories/GHSA-29gw-9793-fvw7",
        "cve": "CVE-2023-24816",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ipython",
        "advisory": "IPython Notebook 0.12 through 1.x before 1.2 does not validate the origin of websocket requests, which allows remote attackers to execute arbitrary code by leveraging knowledge of the kernel id and a crafted page.",
        "cve": "CVE-2014-3429",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ipython",
        "advisory": "Ipython 4.0 includes a fix for CVE-2016-6524: Untrusted LaTeX output could be added to the page in a way that could execute javascript.",
        "cve": "CVE-2016-6524",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ipython",
        "advisory": "Cross-site scripting (XSS) vulnerability in IPython 3.x before 3.2 allows remote attackers to inject arbitrary web script or HTML via vectors involving JSON error messages and the /api/contents path.",
        "cve": "CVE-2015-4706",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ipython",
        "advisory": "Ipython versions 8.0.1, 7.31.1, 7.16.3 and 5.11 include a fix for CVE-2022-21699: Affected versions are subject to an arbitrary code execution vulnerability achieved by not properly managing cross user temporary files. This vulnerability allows one user to run code as another on the same machine.\r\nhttps://github.com/ipython/ipython/security/advisories/GHSA-pq7m-3gw7-gq5x",
        "cve": "CVE-2022-21699",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "iroin-python-pptx",
        "advisory": "Iroin-python-pptx 0.6.12 updates its dependency 'pillow' to v3.3.2 to include security fixes.",
        "cve": "CVE-2016-0775",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "iroin-python-pptx",
        "advisory": "Iroin-python-pptx 0.6.12 updates its dependency 'pillow' to v3.3.2 to include security fixes.",
        "cve": "CVE-2016-9189",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "iroin-python-pptx",
        "advisory": "Iroin-python-pptx 0.6.12 updates its dependency 'pillow' to v3.3.2 to include security fixes.",
        "cve": "CVE-2016-2533",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "iroin-python-pptx",
        "advisory": "Iroin-python-pptx 0.6.12 updates its dependency 'pillow' to v3.3.2 to include security fixes.",
        "cve": "CVE-2014-9601",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "iroin-python-pptx",
        "advisory": "Iroin-python-pptx 0.6.12 updates its dependency 'pillow' to v3.3.2 to include security fixes.",
        "cve": "CVE-2016-3076",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "iroin-python-pptx",
        "advisory": "Iroin-python-pptx 0.6.12 updates its dependency 'pillow' to v3.3.2 to include security fixes.",
        "cve": "CVE-2016-0740",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "iroin-python-pptx",
        "advisory": "Iroin-python-pptx 0.6.12 updates its dependency 'pillow' to v3.3.2 to include security fixes.",
        "cve": "CVE-2016-4009",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "iroin-python-pptx",
        "advisory": "Iroin-python-pptx 0.6.12 updates its dependency 'pillow' to v3.3.2 to include security fixes.",
        "cve": "CVE-2016-9190",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ironic-discoverd",
        "advisory": "Ironic-inspector (aka ironic-discoverd) 2.3.0 includes a fix for CVE-2015-5306: When debug mode is enabled, might allow remote attackers to access the Flask console and execute arbitrary Python code by triggering an error.\r\nhttps://opendev.org/openstack/ironic-inspector/commit/77d0052c5133034490386fbfadfdb1bdb49aa44f",
        "cve": "CVE-2015-5306",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ironic-inspector",
        "advisory": "Ironic-inspector 2.3.0 includes a fix for CVE-2015-5306: When debug mode is enabled, might allow remote attackers to access the Flask console and execute arbitrary Python code by triggering an error.\r\nhttps://opendev.org/openstack/ironic-inspector/commit/77d0052c5133034490386fbfadfdb1bdb49aa44f",
        "cve": "CVE-2015-5306",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "jeIlyfish",
        "advisory": "JeIlyfish is a malicious Python library caught stealing SSH and GPG keys. Note that the first \"L\" is a capital \"i\". Reference: <https://www.zdnet.com/article/two-malicious-python-libraries-removed-from-pypi/>.",
        "cve": "PVE-2021-38694",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "jinja2",
        "advisory": "Jinja2 before 3.1.3 is affected by a Cross-Site Scripting vulnerability. Special placeholders in the template allow writing code similar to Python syntax. It is possible to inject arbitrary HTML attributes into the rendered HTML template. The Jinja 'xmlattr' filter can be abused to inject arbitrary HTML attribute keys and values, bypassing the auto escaping mechanism and potentially leading to XSS. It may also be possible to bypass attribute validation checks if they are blacklist-based.",
        "cve": "CVE-2024-22195",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "jupyter-archive",
        "advisory": "Jupyter-archive 3.3.2 includes a fix for CVE-2007-4559: Directory traversal vulnerability in the (1) extract and (2) extractall functions in the tarfile module in Python allows user-assisted remote attackers to overwrite arbitrary files via a .. (dot dot) sequence in filenames in a TAR archive, a related issue to CVE-2001-1267.",
        "cve": "CVE-2007-4559",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "jupyter-micropython-upydevice",
        "advisory": "jupyter-micropython-upydevice 0.0.7 and prior versions ship with vulnerable dependencies (upydev == 0.3.8).",
        "cve": "CVE-2023-48051",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "jw-util",
        "advisory": "Jw-util 2.3 includes a fix for CVE-2020-13388: When loading a configuration with FromString or FromStream with YAML, one can execute arbitrary Python code, resulting in OS command execution, because safe_load is not used.",
        "cve": "CVE-2020-13388",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "jwcrypto",
        "advisory": "JWCrypto implements JWK, JWS, and JWE specifications using python-cryptography. Prior to version 1.5.6, an attacker can cause a denial of service attack by passing in a malicious JWE Token with a high compression ratio. When the server processes this token, it will consume a lot of memory and processing time. Version 1.5.6 fixes this vulnerability by limiting the maximum token length. See CVE-2024-28102.",
        "cve": "CVE-2024-28102",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "kaze-python",
        "advisory": "kaze-python 0.6.5 fixes vulnerability to RPC invoke functionality that can send node into unclosed loop during 'test' invokes.",
        "cve": "PVE-2021-36494",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "kaze-python",
        "advisory": "kaze-python 0.7.8 fixes vulnerability to RPC invoke functionality that can send node into unclosed loop during 'test' invokes.",
        "cve": "PVE-2021-36493",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "kdcproxy",
        "advisory": "python-kdcproxy before 0.3.2 allows remote attackers to cause a denial of service via a large POST request.",
        "cve": "CVE-2015-5159",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "kedro",
        "advisory": "Kedro 0.17.7 updates its dependency 'pillow' minimum requirement (for python_version > '3.6') to v9.0.0 to include a security fix.",
        "cve": "CVE-2022-22817",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "kedro",
        "advisory": "Kedro 0.18.5 includes a fix for CVE-2007-4559: Directory traversal vulnerability in the (1) extract and (2) extractall functions in the tarfile module in Python allows user-assisted remote attackers to overwrite arbitrary files via a .. (dot dot) sequence in filenames in a TAR archive, a related issue to CVE-2001-1267.",
        "cve": "CVE-2007-4559",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "kerberos",
        "advisory": "The checkPassword function in python-kerberos does not authenticate the KDC it attempts to communicate with, which allows remote attackers to cause a denial of service (bad response), or have other unspecified impact by performing a man-in-the-middle attack.",
        "cve": "CVE-2015-3206",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "keylime",
        "advisory": "### Impact\n\nThis vulnerability creates a false sense of security for keylime users -- i.e. a user could query keylime and conclude that a parcitular node/agent is correctly attested, while attestations are not in fact taking place.\n\n**Short explanation**: the keylime verifier creates periodic reports on the state of each attested agent. The keylime verifier runs a set of python asynchronous processes to challenge attested nodes and create reports on the outcome. \n\nThe vulnerability consists of the above named python asynchronous processes failing silently, i.e. quitting without leaving behind a database entry, raising an error or producing even a mention of an error in a log. The silent failure can be triggered by a small set of transient network failure conditions; recoverable device driver crashes being one such condition we saw in the wild.\n\n### Patches\n\nThe problem is fixed in keylime starting with tag 6.5.1\n\n### Workarounds\n\nThis [patch](https://github.com/keylime/keylime/pull/1128/files) can be retroactively applied to any running keylime deployment.\nOnly running verifiers need to be patched.\nAfter the patch is applied, the keylime verifier needs to be restarted.\n\n### References\n\nThe problem, as well as the proposed fix, are described in detail [here](https://github.com/keylime/keylime/pull/1128).\nFurther details about the system where the bug was found, and the conditions in which the bug was found, are available from @galmasi on demand.\n\n### For more information\n\nIf you have any questions or comments about this [advisory](https://github.com/keylime/keylime/security/advisories/GHSA-hff2-x2j9-gxgv), please comment at the bottom of the advisory itself.\n",
        "cve": "CVE-2022-3500",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "keyring",
        "advisory": "Python keyring lib before 0.10 created keyring files with world-readable permissions. See: CVE-2012-5577.",
        "cve": "CVE-2012-5577",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "keyring",
        "advisory": "Python Keyring 0.9.1 does not securely initialize the cipher when encrypting passwords for CryptedFileKeyring files, which makes it easier for local users to obtain passwords via a brute-force attack.",
        "cve": "CVE-2012-4571",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "keyring",
        "advisory": "Python keyring has insecure permissions on new databases allowing world-readable files to be created. See: CVE-2012-5578.",
        "cve": "CVE-2012-5578",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "keystonemiddleware",
        "advisory": "Keystonemiddleware versions 0.11.0 and 1.2.0 include a fix for CVE-2014-7144: OpenStack keystonemiddleware (formerly python-keystoneclient) 0.x before 0.11.0 and 1.x before 1.2.0 disables certification verification when the \"insecure\" option is set in a paste configuration (paste.ini) file regardless of the value, which allows remote attackers to conduct man-in-the-middle attacks via a crafted certificate.\r\nhttp://www.openwall.com/lists/oss-security/2014/09/25/51\r\nhttps://bugs.launchpad.net/python-keystoneclient/+bug/1353315\r\nhttp://rhn.redhat.com/errata/RHSA-2014-1783.html\r\nhttp://rhn.redhat.com/errata/RHSA-2014-1784.html\r\nhttp://rhn.redhat.com/errata/RHSA-2015-0020.html\r\nhttp://www.ubuntu.com/usn/USN-2705-1\r\nhttp://www.securityfocus.com/bid/69864\r\nhttp://secunia.com/advisories/62709",
        "cve": "CVE-2014-7144",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "keystonemiddleware",
        "advisory": "The identity service in OpenStack Identity (Keystone) before 2015.1.3 (Kilo) and 8.0.x before 8.0.2 (Liberty) and keystonemiddleware (formerly python-keystoneclient) before 1.5.4 (Kilo) and Liberty before 2.3.3 does not properly invalidate authorization tokens when using the PKI or PKIZ token providers, which allows remote authenticated users to bypass intended access restrictions and gain access to cloud resources by manipulating byte fields within a revoked token.",
        "cve": "CVE-2015-7546",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "keystonemiddleware",
        "advisory": "Keystonemiddleware 1.6.0 includes a fix for CVE-2015-1852: The s3_token middleware in OpenStack keystonemiddleware before 1.6.0 and python-keystoneclient before 1.4.0 disables certification verification when the \"insecure\" option is set in a paste configuration (paste.ini) file regardless of the value, which allows remote attackers to conduct man-in-the-middle attacks via a crafted certificate, a different vulnerability than CVE-2014-7144.",
        "cve": "CVE-2015-1852",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "kiez",
        "advisory": "Kiez 0.3.3 updates its dependency 'IPython' to v7.31.1 to include a security fix.",
        "cve": "CVE-2022-21699",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "kili",
        "advisory": "Kili 2.87.0 secured its core API. From 16/09/2021 on, package maintainers prompt all users of the Python SDK on the SaaS application to upgrade kili to its last version. No more details were given.",
        "cve": "PVE-2021-41724",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "kivy",
        "advisory": "Kivy 2023.05.21 upgrades its grunt version to be greater than or equal to 1.3.0 carried out in response to the vulnerability addressed in CVE-2020-7729.\r\nhttps://github.com/kivy/python-for-android/pull/2484/commits/f21f9f16bb62a123d7f8000e9a8743f07f5667b7",
        "cve": "CVE-2020-7729",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "kubernetes",
        "advisory": "Kubernetes 10.0.1 updates its dependency 'urllib3' to include a security fix.\r\nhttps://github.com/kubernetes-client/python/pull/897",
        "cve": "CVE-2019-11324",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "kubernetes",
        "advisory": "Kubernetes (python client) 25.3.0 uses Kubernetes API v1.25.3, which includes a fix for CVE-2021-29923: Go before 1.17 does not properly consider extraneous zero characters at the beginning of an IP address octet, which (in some situations) allows attackers to bypass access control that is based on IP addresses, because of unexpected octal interpretation. This affects net.ParseIP and net.ParseCIDR. Kubernetes interprets leading zeros on IPv4 addresses as decimal to keep backwards compatibility, but users relying on parser alignment will be impacted by this CVE.\r\nhttps://github.com/kubernetes/kubernetes/pull/104368\r\nhttps://github.com/kubernetes/kubernetes/issues/108074",
        "cve": "CVE-2021-29923",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "label-sleuth",
        "advisory": "Label-sleuth 0.11.6 updates its dependency 'GitPython' to v3.1.31 to include a security fix.",
        "cve": "CVE-2022-24439",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "langchain",
        "advisory": "LangChain 0.0.142 includes a fix for CVE-2023-29374: The LLMMathChain chain allows prompt injection attacks that can execute arbitrary code via the Python exec method.\r\nhttps://github.com/hwchase17/langchain/pull/1119\r\nhttps://github.com/langchain-ai/langchain/commit/5ca7ce77cd536991d04f476e420446a3b21d2a7b",
        "cve": "CVE-2023-29374",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "langchain",
        "advisory": "Langchain 0.0.236 includes a fix for an Arbitrary Code Execution vulnerability. The vulnerability allows a remote attacker to execute arbitrary code via the PALChain parameter in the Python exec method.\r\nhttps://github.com/langchain-ai/langchain/commit/e294ba475a355feb95003ed8f1a2b99942509a9e",
        "cve": "CVE-2023-36188",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "langchain",
        "advisory": "Langchain 0.0.236 includes a fix for an Arbitrary Code Execution vulnerability. In affected versions, the vulnerability allows an attacker to execute arbitrary code via the Python exec calls in the PALChain.\r\nhttps://github.com/langchain-ai/langchain/commit/8ba9835b925473655914f63822775679e03ea137\r\nhttps://github.com/langchain-ai/langchain/commit/e294ba475a355feb95003ed8f1a2b99942509a9e",
        "cve": "CVE-2023-36095",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "langchain",
        "advisory": "Affected versions of Langchain allow an attacker to execute arbitrary code via the PALChain in the python exec method. The PALChain class requires unique security considerations so it was moved langchain-experimental package and removed from langchain on version 0.0.247. The issue was attempted to be resolved several times in langchain-experimental but the fixes were found incomplete. See CVE-2023-44467, CVE-2024-27444, and CVE-2024-38459.",
        "cve": "CVE-2023-36258",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "langchain",
        "advisory": "Affected versions of langchain allow a remote attacker to execute arbitrary code via a crafted script to the PythonAstREPLTool._run component.\r\n#NOTE: The data we include in this advisory differs from the publicly available on nvd.nist.gov. The advisory posted by the NVD indicated that versions up to and including 0.0.232 were affected. However, research by Safety CLI Cybersecurity confirms that the vulnerability remains unaddressed in all versions up to 0.0.325.",
        "cve": "CVE-2023-39659",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "langchain",
        "advisory": "Langchain version 0.1.14 addresses CVE-2024-21503, updating the \"black\" python linter from version 24.2.0 to 24.3.0. This update remedies a Regex-related denial of service vulnerability present in the earlier version.",
        "cve": "CVE-2024-21503",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "langchain",
        "advisory": "langchain_experimental (aka LangChain Experimental) in LangChain before 0.1.8 allows an attacker to bypass the CVE-2023-44467 fix and execute arbitrary code via the __import__, __subclasses__, __builtins__, __globals__, __getattribute__, __bases__, __mro__, or __base__ attribute in Python code. These are not prohibited by pal_chain/base.py. See CVE-2024-27444.",
        "cve": "CVE-2024-27444",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "langchain",
        "advisory": "langchain_experimental 0.0.14 allows an attacker to bypass the CVE-2023-36258 fix and execute arbitrary code via the PALChain in the python exec method.",
        "cve": "CVE-2023-44467",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "langchain",
        "advisory": "An issue in langchain v.0.0.199 allows an attacker to execute arbitrary code via the PALChain in the python exec method.",
        "cve": "PVE-2024-99901",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "langchain",
        "advisory": "An issue in langchain v.0.0.64 allows a remote attacker to execute arbitrary code via the PALChain parameter in the Python exec method.",
        "cve": "PVE-2024-99903",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "langchain-community",
        "advisory": "Denial of service in SitemapLoader Document Loader in the langchain-community package, affecting versions below 0.2.5. The parse_sitemap method, responsible for parsing sitemaps and extracting URLs, lacks a mechanism to prevent infinite recursion when a sitemap URL refers to the current sitemap itself. This oversight allows for the possibility of an infinite loop, leading to a crash by exceeding the maximum recursion depth in Python. This vulnerability can be exploited to occupy server socket/port resources and crash the Python process, impacting the availability of services relying on this functionality.",
        "cve": "CVE-2024-2965",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "langchain-core",
        "advisory": "The XMLOutputParser in LangChain uses the etree module from the XML parser in the standard python library which has some XML vulnerabilities. This would allow a malicious party to attempt to manipulate the LLM to produce a malicious payload for the parser that would compromise the availability of the service. At risk are users that:\r\n- Are running older distributions of python that have older version of libexpat. Expat 2.4.1 and newer are not affected.\r\n- Are using XMLOutputParser with an agent.\r\n- Accept inputs from untrusted sources with this agent (e.g., endpoint on the web that allows an untrusted user to interact wiith the parser).",
        "cve": "CVE-2024-1455",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "langchain-experimental",
        "advisory": "Langchain_experimental allows an attacker to bypass the CVE-2023-36258 fix and execute arbitrary code via the PALChain in the python exec method.",
        "cve": "CVE-2023-44467",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "langchain-experimental",
        "advisory": "Langchain-experimental (aka LangChain Experimental) allows attackers to bypass the CVE-2023-44467 fix and execute arbitrary code via the __import__, __subclasses__, __builtins__, __globals__, __getattribute__, __bases__, __mro__, or __base__ attribute in Python code. These are not prohibited by pal_chain/base.py.",
        "cve": "CVE-2024-27444",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "langchain-experimental",
        "advisory": "Langchain-experimental (aka LangChain Experimental) before 0.0.61 provides Python REPL access without an opt-in step. \r\nNOTE: This issue exists because of an incomplete fix for CVE-2024-27444.",
        "cve": "CVE-2024-38459",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "langchain-experimental",
        "advisory": "Affected versions of langchain-experimental are vulnerable to Arbitrary Code Execution. When retrieving values from the database, the code will attempt to call 'eval' on all values. An attacker can exploit this vulnerability and execute arbitrary python code if they can control the input prompt and the server is configured with VectorSQLDatabaseChain.",
        "cve": "CVE-2024-21513",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "langflow",
        "advisory": "Affected versions of Langflow allow remote code execution if untrusted users are able to reach the \"POST /api/v1/custom_component\" endpoint and provide a Python script.",
        "cve": "CVE-2024-37014",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "lattice",
        "advisory": "Lattice 0.1.2 replaces its dependency 'GitPython' with 'pygit2' to avoid security issues.",
        "cve": "PVE-2022-52518",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "lattice",
        "advisory": "Lattice 0.1.2 replaces its dependency 'GitPython' with 'pygit2' to avoid security issues.",
        "cve": "CVE-2022-24439",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "launchdarkly-server-sdk",
        "advisory": "Launchdarkly-server-sdk 6.11.2 uses 'yaml.safe_load()' instead of 'yaml.load()' for YAML/JSON test data parsing to fix an arbitrary code execution vulnerability.\r\nhttps://github.com/launchdarkly/python-server-sdk/issues/136",
        "cve": "CVE-2017-18342",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "lc-sdk-python",
        "advisory": "Lc-sdk-python 0.3.1 updates 'httpx' dependency to v0.23.0 to include a security fix.",
        "cve": "CVE-2021-41945",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "levenshtein",
        "advisory": "Levenshtein 0.12.1 fixes handling of numerous possible wraparounds in calculating the size of memory allocations; incorrect handling of which could cause denial of service or even possible remote code execution in previous versions of the library.\r\nhttps://github.com/ztane/python-Levenshtein/issues/62",
        "cve": "PVE-2022-44654",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "libarchive-c",
        "advisory": "Libarchive-c 4.0 includes a fix for an unsafe defaults vulnerability that could have lead to path traversal.\r\nhttps://github.com/Changaco/python-libarchive-c/commit/98c14d296a7f3ab04dd0a4c8c9c2920f88537fa7",
        "cve": "PVE-2023-59300",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "libari",
        "advisory": "Libari is a malicious package, typosquatting. It contains a hidden backdoor which activates when installed on Linux systems.\r\nhttps://www.zdnet.com/article/malicious-python-libraries-targeting-linux-servers-removed-from-pypi/",
        "cve": "PVE-2022-45410",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "libhxl",
        "advisory": "Libhxl 4.25.2 includes better sanitisation preventing HTML input.\r\nhttps://github.com/HXLStandard/libhxl-python/commit/28e54a3dafc1b61cff94d65ed019794914167b7a",
        "cve": "PVE-2022-50155",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "libpesh",
        "advisory": "Libpesh is a malicious package, typosquatting. It contains a hidden backdoor which activates when installed on Linux systems.\r\nhttps://www.zdnet.com/article/malicious-python-libraries-targeting-linux-servers-removed-from-pypi/",
        "cve": "PVE-2022-45409",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "libpeshka",
        "advisory": "Libpeshka is a typosquatting package. It shows a malicious behavior, for example, it may leak your sensitive data and/or gain unauthorized persistence in your system.\r\nhttps://www.zdnet.com/article/twelve-malicious-python-libraries-found-and-removed-from-pypi/",
        "cve": "PVE-2022-45415",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "libpeshnx",
        "advisory": "Libpeshnx is a malicious package, typosquatting. It contains a hidden backdoor which activates when installed on Linux systems.\r\nhttps://www.zdnet.com/article/malicious-python-libraries-targeting-linux-servers-removed-from-pypi/",
        "cve": "PVE-2022-45408",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "libtorrent",
        "advisory": "Libtorrent 2.0.3 (the underlying core dependency of the Python bindings) fixes an integer overflow in hash_picker and properly restricts max file sizes in torrents.\r\nhttps://github.com/arvidn/libtorrent/commit/58a489332ca05303e8001c24478f27338309c858",
        "cve": "PVE-2021-43049",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "lightning",
        "advisory": "Lightning 2.0.4 updates its dependency 'ipython' to version '8.14.0' to include a security fix.\r\nhttps://github.com/Lightning-AI/lightning/commit/98e1aabd0c711e508d33f599265de011ca5dfba8",
        "cve": "CVE-2023-24816",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "liminal-sdk-python",
        "advisory": "Liminal-sdk-python 2024.03.0 fixes a race condition when refreshing the access token.\r\nhttps://github.com/liminal-ai-security/liminal-sdk-python/pull/66/commits/866a018f704d2947e62ab037c94771f47d14c8b0",
        "cve": "PVE-2024-66762",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "line-bot-sdk",
        "advisory": "Line-bot-sdk 3.2.0 updates its dependency 'aiohttp' to version '3.8.5' to include a fix for an HTTP Request Smuggling vulnerability.\r\nhttps://github.com/line/line-bot-sdk-python/pull/491",
        "cve": "CVE-2023-37276",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "lingfo",
        "advisory": "Lingfo 0.2.4 updates its dependency 'gitpython' to version '3.1.32' to include a fix for a Remote Code Execution vulnerability.\r\nhttps://github.com/lingfo/lingfo/commit/4f571a7c3ded9b1775e5b741c48c49e6510b7a8f",
        "cve": "CVE-2023-40267",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "linkml",
        "advisory": "Linkml 1.5.2 introduces critical security enhancements to mitigate potential code injection vulnerabilities, specifically by refining the pydanticgen/pythongen modules. These improvements address the handling of quotes and multiline descriptions in enum fields, ensuring safer processing of descriptions and preventing malicious code execution. \r\nhttps://github.com/linkml/linkml/pull/1402",
        "cve": "PVE-2024-63769",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "llama-cpp-python",
        "advisory": "Llama-cpp-python 0.2.12 includes a fix for an Arbitrary Code Execution vulnerability.\r\nhttps://github.com/abetlen/llama-cpp-python/pull/854",
        "cve": "PVE-2023-62135",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "llama-cpp-python",
        "advisory": "Llama-cpp-python version 0.2.72 addresses a security issue by fixing a Remote Code Execution vulnerability caused by Server-Side Template Injection in Model Metadata.",
        "cve": "CVE-2024-34359",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "llama-cpp-python",
        "advisory": "Llama-cpp-python version 0.2.72 enhances security by updating all remaining Jinja chat templates to use an immutable sandbox.",
        "cve": "PVE-2024-70929",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "localstack",
        "advisory": "Localstack 0.12.17 replaces Docker CLI commands with Docker Python SDK client to reduce the number of shell calls.\r\nhttps://github.com/localstack/localstack/pull/4442",
        "cve": "PVE-2021-42833",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "localstack",
        "advisory": "Localstack 0.12.17 replaces Docker CLI commands with Docker Python SDK client.",
        "cve": "PVE-2022-52464",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "lollms",
        "advisory": "A remote code execution vulnerability exists in the create_conda_env function of the parisneo/lollms repository, version 5.9.0. The vulnerability arises from the use of shell=True in the subprocess.Popen function, which allows an attacker to inject arbitrary commands by manipulating the env_name and python_version parameters. This issue could lead to a serious security breach as demonstrated by the ability to execute the 'whoami' command among potentially other harmful commands. See CVE-2024-3121.",
        "cve": "CVE-2024-3121",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "lookatme",
        "advisory": "In lookatme (python/pypi package) versions prior to 2.3.0, the package automatically loaded the built-in \"terminal\" and \"file_loader\" extensions. Users that use lookatme to render untrusted markdown may have malicious shell commands automatically run on their system. This is fixed in version 2.3.0. As a workaround, the `lookatme/contrib/terminal.py` and `lookatme/contrib/file_loader.py` files may be manually deleted. Additionally, it is always recommended to be aware of what is being rendered with lookatme. See CVE-2020-15271.",
        "cve": "CVE-2020-15271",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "lxml",
        "advisory": "Lxml 4.6.2 includes a fix for CVE-2020-27783: A XSS vulnerability was discovered in python-lxml's clean module. The module's parser didn't properly imitate browsers, which caused different behaviors between the sanitizer and the user's page. A remote attacker could exploit this flaw to run arbitrary HTML/JS code.",
        "cve": "CVE-2020-27783",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "lxml",
        "advisory": "Lxml version 4.6.3 includes a fix for CVE-2021-28957: An XSS vulnerability was discovered in python-lxml's clean module versions before 4.6.3. When disabling the safe_attrs_only and forms arguments, the Cleaner class does not remove the formation attribute allowing for JS to bypass the sanitizer. A remote attacker could exploit this flaw to run arbitrary JS code on users who interact with incorrectly sanitized HTML.\r\nhttps://bugs.launchpad.net/lxml/+bug/1888153",
        "cve": "CVE-2021-28957",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "lytekit",
        "advisory": "Lytekit 0.30.0 updates its dependency 'ipython' to v7.31.1 to include a security fix.",
        "cve": "CVE-2022-21699",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mage-ai",
        "advisory": "Mage-ai 0.9.62 has updated its ipython dependency from 7.34.0 to 8.10.0 to address the security issue identified as CVE-2023-24816.",
        "cve": "CVE-2023-24816",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mage-ai",
        "advisory": "Mage-ai 0.9.62 has updated its GitPython dependency from 3.1.34 to 3.1.41 to address the security issue identified as CVE-2024-22190.",
        "cve": "CVE-2024-22190",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mailman",
        "advisory": "The attachment scrubber (Scrubber.py) in Mailman 2.1.5 and earlier, when using Python's library email module 2.5, allows remote attackers to cause a denial of service (mailing list delivery failure) via a multipart MIME message with a single part that has two blank lines between the first boundary and the end boundary.",
        "cve": "CVE-2006-0052",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mako",
        "advisory": "Mako before 1.2.2 is vulnerable to Regular expression Denial of Service when using the Lexer class to parse. This also affects babelplugin and linguaplugin.\r\nhttps://pyup.io/posts/pyup-discovers-redos-vulnerabilities-in-top-python-packages",
        "cve": "CVE-2022-40023",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "markdown2",
        "advisory": "Python-markdown2 before 1.0.1.14 has multiple cross-site scripting (XSS) issues. See CVE-2009-3724.",
        "cve": "CVE-2009-3724",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "markdown2",
        "advisory": "An issue was discovered in markdown2 (aka python-markdown2) through 2.3.5. The safe_mode feature, which is supposed to sanitize user input against XSS, is flawed and does not escape the input properly. With a crafted payload, XSS can be triggered, as demonstrated by omitting the final '>' character from an IMG tag.",
        "cve": "CVE-2018-5773",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "markdown2",
        "advisory": "Markdown2 2.4.3 includes a fix for a ReDoS vulnerability.\r\nhttps://github.com/trentm/python-markdown2/pull/429",
        "cve": "PVE-2023-59169",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "markdown2",
        "advisory": "Markdown2 2.4.4 includes a fix for an XSS vulnerability.\r\nhttps://github.com/trentm/python-markdown2/pull/434",
        "cve": "PVE-2023-59182",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "markdown2",
        "advisory": "Markdown2 2.4.4 includes a fix for an XSS vulnerability.\r\nhttps://github.com/trentm/python-markdown2/pull/473",
        "cve": "PVE-2023-59183",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "markdown2",
        "advisory": "python-markdown2 through 2.3.8 allows XSS because element names are mishandled unless a \\w+ match succeeds. For example, an attack might use elementname@ or elementname- with an onclick attribute.",
        "cve": "CVE-2020-11888",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "markdown2",
        "advisory": "Markdown2 including 2.4.9 and all the previous versions are vulnerable to ReDoS attacks.\r\nhttps://github.com/trentm/python-markdown2/pull/494",
        "cve": "PVE-2023-59235",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "markdown2",
        "advisory": "Markdown2 before 2.4.1 is susceptible to a Regular Expression Denial of Service (ReDoS) attack through the _do_headers function. This vulnerability arises because of the way the package processes certain regular expressions, which can be exploited to cause a significant increase in processing time. In essence, when markdown2 encounters specific patterns in input data, the parsing engine may enter a state of \"catastrophic backtracking,\" leading to a consumption of an inordinate amount of CPU resources. This behavior can be leveraged to make the system unresponsive, effectively denying service to legitimate users. This issue highlights the potential for specially crafted inputs to induce a denial of service condition by exploiting the inefficiency of regular expression evaluation.\r\nhttps://github.com/trentm/python-markdown2/commit/d6a56f4d438a74234f795a5a2b9b749342b3c362",
        "cve": "PVE-2024-99779",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "markdown2",
        "advisory": "Markdown2 before 2.4.11 is susceptible to a Regular Expression Denial of Service (ReDoS) due to an insecure regex pattern causing catastrophic backtracking, significantly impairing performance. This vulnerability manifests in how the regex engine evaluates input, potentially allowing an attacker to trigger excessive CPU consumption through specially crafted inputs, leading to a Denial of Service (DoS). In severe cases, input strings with repeating characters can cause the regex engine to take an exponentially large number of steps to validate the string, effectively incapacitating the service.\r\nhttps://github.com/trentm/python-markdown2/pull/494/commits/1fc52011bbdee6e0b301eaceb6c11fd861f25c4a",
        "cve": "PVE-2024-99777",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "markdown2",
        "advisory": "Markdown2 before 2.4.2 is susceptible to a Regular Expression Denial of Service (ReDoS) attack, specifically through its auto-linking URL feature. This vulnerability stems from the way regular expressions are processed. In essence, an attacker can introduce specially crafted inputs that cause the markdown2 processing engine to consume an excessive amount of CPU time, potentially leading to a denial of service. This attack leverages the phenomenon known as catastrophic backtracking, where the number of steps required to validate an input string increases exponentially with the input size, severely degrading performance and potentially rendering the service unavailable.\r\nhttps://github.com/trentm/python-markdown2/commit/66da6ed5f5ce7ada94d5c7c8c02448742b847ddd",
        "cve": "PVE-2024-99778",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "marshmallow",
        "advisory": "In the marshmallow library before 2.15.1 and 3.x before 3.0.0b9 for Python, the schema \"only\" option treats an empty list as implying no \"only\" option, which allows a request that was intended to expose no fields to instead expose all fields (if the schema is being filtered dynamically using the \"only\" option, and there is a user role that produces an empty value for \"only\").",
        "cve": "CVE-2018-17175",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mastercard-oauth1-signer",
        "advisory": "Mastercard-oauth1-signer 1.4.0 includes a fix for an unsafe randomness vulnerability.\r\nhttps://github.com/Mastercard/oauth1-signer-python/commit/9492b61895de895c6fbf23b2cfcf21c6f70dd99f",
        "cve": "PVE-2023-62158",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "matrix-sydent",
        "advisory": "util/emailutils.py in Matrix Sydent before 1.0.2 mishandles registration restrictions that are based on e-mail domain, if the allowed_local_3pids option is enabled. This occurs because of potentially unwanted behavior in Python, in which an email.utils.parseaddr call on user@bad.example.net@good.example.com returns the user@bad.example.net substring. See: CVE-2019-11340.",
        "cve": "CVE-2019-11340",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "matrix-synapse",
        "advisory": "Matrix-synapse 1.33.2 includes a fix for CVE-2021-29471: Synapse is a Matrix reference homeserver written in python (pypi package matrix-synapse). Matrix is an ecosystem for open federated Instant Messaging and VoIP. In Synapse before version 1.33.2 \"Push rules\" can specify conditions under which they will match, including `event_match`, which matches event content against a pattern including wildcards. Certain patterns can cause very poor performance in the matching engine, leading to a denial-of-service when processing moderate length events. The issue was patched in version 1.33.2. A potential workaround might be to prevent users from making custom push rules, by blocking such requests at a reverse-proxy.\r\nhttps://github.com/matrix-org/synapse/security/advisories/GHSA-x345-32rc-8h85",
        "cve": "CVE-2021-29471",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "md4c",
        "advisory": "Md4c (Python bindings) v1.0.0 includes a fix for 'ISANYOF' macro, which is vulnerable in md4c main package versions before 0.4.6: The mentioned macro could provide unexpected results when encountering zero byte in the input text; in some cases leading to broken internal state of the parser. The bug could result in a denial of service and possibly also in other security implications.\r\nhttps://github.com/mity/md4c/issues/130",
        "cve": "CVE-2020-26148",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mechanicalsoup",
        "advisory": "MechanicalSoup is a Python library for automating interaction with websites. Starting in version 0.2.0 and prior to version 1.3.0, a malicious web server can read arbitrary files on the client using a '<input type=\"file\" ...>' inside HTML form. All users of MechanicalSoup's form submission are affected, unless they took very specific (and manual) steps to reset HTML form field values. Version 1.3.0 contains a patch for this issue.",
        "cve": "CVE-2023-34457",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mechanize",
        "advisory": "Mechanize 0.4.6 includes a fix for CVE-2021-32837: Mechanize contains a regular expression that is vulnerable to regular expression denial of service (ReDoS) prior to version 0.4.6. If a web server responds in a malicious way, then mechanize could crash.\r\nhttps://securitylab.github.com/advisories/GHSL-2021-108-python-mechanize-mechanize",
        "cve": "CVE-2021-32837",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "meilisearch",
        "advisory": "Meilisearch (python client) 0.18.3 is compatible with Meilisearch 0.27.0, that adds a hard limit of '1000' retrievable documents during search ('GET/POST /indexes/:uid/search'). This limit is a security fix to avoid scraping the Meilisearch DB.",
        "cve": "PVE-2022-48517",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "meilisearch",
        "advisory": "Meilisearch (python client) 0.18.3 is compatible with Meilisearch 0.27.0, that sets a limit to filters to avoid a stack overflow crash when using a huge list of filters.\r\nhttps://github.com/meilisearch/meilisearch/issues/1967",
        "cve": "PVE-2022-46406",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "meilisearch",
        "advisory": "Meilisearch (python client) 0.20.0 is compatible with Meilisearch < v0.29.0, which has a transitive vulnerability.\r\nhttps://github.com/meilisearch/meilisearch/pull/2768",
        "cve": "CVE-2022-23639",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mentat",
        "advisory": "Mentat 0.1.20 updates its dependency 'gitpython' to v3.1.35 to include a security fix.",
        "cve": "CVE-2023-41040",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "meraki",
        "advisory": "Versions of aiohttp before 1.40.1, an asynchronous HTTP client/server framework for asyncio and Python, are susceptible to a vulnerability where improper validation allows an attacker to modify or create a new HTTP request by controlling the HTTP version of the request. This issue specifically affects environments where the attacker has the ability to control the HTTP version.",
        "cve": "CVE-2023-49081",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mercurial",
        "advisory": "In Mercurial before 4.1.3, \"hg serve --stdio\" allows remote authenticated users to launch the Python debugger, and consequently execute arbitrary code, by using --debugger as a repository name.",
        "cve": "CVE-2017-9462",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "metricflow",
        "advisory": "Metricflow 0.100.0 updates its dependency 'snowflake-connector-python' to 2.7.8 to include a security fix.",
        "cve": "CVE-2022-29217",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mi",
        "advisory": "Mi 1.6a1 improves robustness to timing attacks in the ``AuthTktCookieHelper`` and the ``SignedCookieSessionFactory`` classes by using the stdlib's ``hmac.compare_digest`` if it is available (such as Python 2.7.7+ and 3.3+). See: <https://github.com/Pylons/pyramid/pull/1457>. Additionally, it avoids timing attacks against CSRF tokens. See: <https://github.com/Pylons/pyramid/pull/1574>.",
        "cve": "PVE-2021-38003",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "micropython-mdns",
        "advisory": "Micropython-mdns 1.3.0 updates its dependency 'wheel' to v0.38.0 to include a security fix.",
        "cve": "CVE-2022-40898",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mindsdb",
        "advisory": "Mindsdb 23.2.4.1 includes a fix for CVE-2007-4559: Directory traversal vulnerability in the (1) extract and (2) extractall functions in the tarfile module in Python allows user-assisted remote attackers to overwrite arbitrary files via a .. (dot dot) sequence in filenames in a TAR archive, a related issue to CVE-2001-1267.",
        "cve": "CVE-2007-4559",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mirahezebot-plugins",
        "advisory": "Mirahezebot-plugins 9.0.2 includes a fix for CVE-2020-15251: In the Channelmgnt plug-in for Sopel (a Python IRC bot) before version 1.0.3, malicious users are able to op/voice and take over a channel. This is an ACL bypass vulnerability. This plugin is bundled with MirahezeBot-Plugins with versions from 9.0.0 and less than 9.0.2.\r\nhttps://github.com/MirahezeBots/sopel-channelmgnt/security/advisories/GHSA-j257-jfvv-h3x5",
        "cve": "CVE-2020-15251",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mjml",
        "advisory": "The `mjml` PyPI package, found at the `FelixSchwarz/mjml-python` GitHub repo, is an unofficial Python port of MJML, a markup language created by Mailjet. All users of `FelixSchwarz/mjml-python` who insert untrusted data into mjml templates unless that data is checked in a very strict manner. User input like `&lt;script&gt;` would be rendered as `<script>` in the final HTML output. The attacker must be able to control some data which is later injected in an mjml template which is then send out as email to other users. The attacker could control contents of email messages sent through the platform. The problem has been fixed in version 0.11.0 of this library. Versions before 0.10.0 are not affected by this security issue. As a workaround, ensure that potentially untrusted user input does not contain any sequences which could be rendered as HTML. See CVE-2024-26151.",
        "cve": "CVE-2024-26151",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mlalchemy",
        "advisory": "An exploitable vulnerability exists in the YAML parsing functionality in the parse_yaml_query method in parser.py in MLAlchemy before 0.2.2. When processing YAML-Based queries for data, a YAML parser can execute arbitrary Python commands resulting in command execution because load is used where safe_load should have been used. An attacker can insert Python into loaded YAML to trigger this vulnerability.",
        "cve": "CVE-2017-16615",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mlrun",
        "advisory": "Mlrun 1.1.0 updates the Python package 'numpy' in its base image to include a security fix.",
        "cve": "CVE-2021-33430",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mlrun",
        "advisory": "Mlrun 1.1.0 updates the Python package 'ipython' in its base image to include a security fix.\r\nhttps://github.com/mlrun/mlrun/pull/1997",
        "cve": "CVE-2022-21699",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mlrun",
        "advisory": "Mlrun 1.1.0 updates the Python package 'jupyter-server' in its base image to include a security fix.\r\nhttps://github.com/mlrun/mlrun/pull/1997",
        "cve": "CVE-2022-24757",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mlrun",
        "advisory": "Mlrun 1.1.0 updates the Python package 'jupyterhub' in its base image to include a security fix.\r\nhttps://github.com/mlrun/mlrun/pull/1997",
        "cve": "CVE-2021-41247",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mlrun",
        "advisory": "Mlrun 1.1.0 updates the Python package 'urllib3' in its base image to include a security fix.\r\nhttps://github.com/mlrun/mlrun/pull/1997",
        "cve": "CVE-2021-33503",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mlrun",
        "advisory": "Mlrun 1.1.0 updates the Python package 'jupyterlab' in its base image to include a security fix.\r\nhttps://github.com/mlrun/mlrun/pull/1997",
        "cve": "CVE-2021-32797",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mmocr",
        "advisory": "Mmocr 0.6.1 restricts the minimum version of its requirement 'opencv-python' to '>=4.2.0.32' to include security fixes.",
        "cve": "CVE-2017-12600",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mmocr",
        "advisory": "Mmocr 0.6.1 restricts the minimum version of its requirement 'opencv-python' to '>=4.2.0.32' to include security fixes.",
        "cve": "CVE-2019-14492",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mmocr",
        "advisory": "Mmocr 0.6.1 restricts the minimum version of its requirement 'opencv-python' to '>=4.2.0.32' to include security fixes.",
        "cve": "CVE-2019-15939",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mmocr",
        "advisory": "Mmocr 0.6.1 restricts the minimum version of its requirement 'opencv-python' to '>=4.2.0.32' to include security fixes.",
        "cve": "CVE-2019-19624",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mmocr",
        "advisory": "Mmocr 0.6.1 restricts the minimum version of its requirement 'opencv-python' to '>=4.2.0.32' to include security fixes.",
        "cve": "CVE-2017-12599",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mmocr",
        "advisory": "Mmocr 0.6.1 restricts the minimum version of its requirement 'opencv-python' to '>=4.2.0.32' to include security fixes.",
        "cve": "CVE-2017-12606",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mmocr",
        "advisory": "Mmocr 0.6.1 restricts the minimum version of its requirement 'opencv-python' to '>=4.2.0.32' to include security fixes.",
        "cve": "CVE-2016-1517",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mmocr",
        "advisory": "Mmocr 0.6.1 restricts the minimum version of its requirement 'opencv-python' to '>=4.2.0.32' to include security fixes.",
        "cve": "CVE-2017-12601",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mmocr",
        "advisory": "Mmocr 0.6.1 restricts the minimum version of its requirement 'opencv-python' to '>=4.2.0.32' to include security fixes.",
        "cve": "CVE-2017-12603",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mmocr",
        "advisory": "Mmocr 0.6.1 restricts the minimum version of its requirement 'opencv-python' to '>=4.2.0.32' to include security fixes.",
        "cve": "CVE-2019-16249",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mmocr",
        "advisory": "Mmocr 0.6.1 restricts the minimum version of its requirement 'opencv-python' to '>=4.2.0.32' to include security fixes.",
        "cve": "CVE-2017-12598",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mmocr",
        "advisory": "Mmocr 0.6.1 restricts the minimum version of its requirement 'opencv-python' to '>=4.2.0.32' to include security fixes.",
        "cve": "CVE-2017-12602",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mmocr",
        "advisory": "Mmocr 0.6.1 restricts the minimum version of its requirement 'opencv-python' to '>=4.2.0.32' to include security fixes.",
        "cve": "CVE-2019-5064",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mmocr",
        "advisory": "Mmocr 0.6.1 restricts the minimum version of its requirement 'opencv-python' to '>=4.2.0.32' to include security fixes.",
        "cve": "CVE-2019-5063",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mmocr",
        "advisory": "Mmocr 0.6.1 restricts the minimum version of its requirement 'opencv-python' to '>=4.2.0.32' to include security fixes.",
        "cve": "CVE-2017-12604",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mmocr",
        "advisory": "Mmocr 0.6.1 restricts the minimum version of its requirement 'opencv-python' to '>=4.2.0.32' to include security fixes.",
        "cve": "CVE-2017-12605",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mmocr",
        "advisory": "Mmocr 0.6.1 restricts the minimum version of its requirement 'opencv-python' to '>=4.2.0.32' to include security fixes.",
        "cve": "CVE-2017-12597",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mmocr",
        "advisory": "Mmocr 0.6.1 restricts the minimum version of its requirement 'opencv-python' to '>=4.2.0.32' to include security fixes.",
        "cve": "CVE-2019-9423",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mmocr",
        "advisory": "Mmocr 0.6.1 restricts the minimum version of its requirement 'opencv-python' to '>=4.2.0.32' to include security fixes.",
        "cve": "CVE-2019-14491",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mobsf",
        "advisory": "Mobsf 3.6.0 includes a fix for CVE-2007-4559: Directory traversal vulnerability in the (1) extract and (2) extractall functions in the tarfile module in Python allows user-assisted remote attackers to overwrite arbitrary files via a .. (dot dot) sequence in filenames in a TAR archive, a related issue to CVE-2001-1267.",
        "cve": "CVE-2007-4559",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "modelstore",
        "advisory": "Modelstore 0.0.76 includes a fix for CVE-2007-4559: Directory traversal vulnerability in the (1) extract and (2) extractall functions in the tarfile module in Python allows user-assisted remote attackers to overwrite arbitrary files via a .. (dot dot) sequence in filenames in a TAR archive, a related issue to CVE-2001-1267.",
        "cve": "CVE-2007-4559",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "moin",
        "advisory": "The password_checker function in config/multiconfig.py in MoinMoin 1.6.1 uses the cracklib and python-crack features even though they are not thread-safe, which allows remote attackers to cause a denial of service (segmentation fault and crash) via unknown vectors.",
        "cve": "CVE-2008-6549",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mollie-api-python",
        "advisory": "Mollie-api-python 2.0.4 updates requests to v2.20.0 because of a vulnerability in previous versions.",
        "cve": "CVE-2018-18074",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mosaicml",
        "advisory": "Mosaicml 0.13.0 updates its dependency 'ipython' to v8.11.0 in Dockerfile to include a security fix.\r\nhttps://github.com/mosaicml/composer/pull/2007",
        "cve": "CVE-2023-24816",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "motioneye",
        "advisory": "MotionEye 0.42.1 and prior are affected by CVE-2021-44255: Authenticated remote code execution in MotionEye<= 0.42.1 and MotioneEyeOS <= 20200606 allows a remote attacker to upload a configuration backup file containing a malicious python pickle file which will execute arbitrary code on the server.\r\nhttps://github.com/ccrisan/motioneyeos/issues/2843",
        "cve": "CVE-2021-44255",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "msal",
        "advisory": "The Microsoft Authentication Library (MSAL) for Python before 1.24.1 is susceptible to a vulnerability in certain versions due to inadequate input sanitization within the authcode.py file. This flaw allows for the improper neutralization of special elements in data query logic.\r\nhttps://github.com/AzureAD/microsoft-authentication-library-for-python/commit/3427c2577bb674196a59e58cbf5aa91ad92cba7d",
        "cve": "PVE-2024-99774",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "msgpack",
        "advisory": "msgpack 0.6.0 contains some backward incompatible changes for security reason (DoS).\r\nhttps://github.com/msgpack/msgpack-python/commit/3b80233592674d18c8db7a62fa56504a5a285296",
        "cve": "PVE-2021-36700",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mtr2mqtt",
        "advisory": "Mtr2mqtt 0.5.1 upgrades Python Packaging Authority (PyPA) on its Dockerfile to fix the vulnerability CVE-2022-40897 in the base image.\r\nhttps://github.com/tvallas/mtr2mqtt/commit/d2be9863485535d1c9ce2e493b1a00cc62bfe877#diff-dd2c0eb6ea5cfc6c4bd4eac30934e2d5746747af48fef6da689e85b752f39557R6",
        "cve": "CVE-2022-40897",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "murano-dashboard",
        "advisory": "OpenStack Murano before 1.0.3 (liberty) and 2.x before 2.0.1 (mitaka), Murano-dashboard before 1.0.3 (liberty) and 2.x before 2.0.1 (mitaka), and python-muranoclient before 0.7.3 (liberty) and 0.8.x before 0.8.5 (mitaka) improperly use loaders inherited from yaml.Loader when parsing MuranoPL and UI files, which allows remote attackers to create arbitrary Python objects and execute arbitrary code via crafted extended YAML tags in UI definitions in packages.",
        "cve": "CVE-2016-4972",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mybiubiubiu",
        "advisory": "Mybiubiubiu is a typosquatting package. It shows a malicious behavior, for example, it may leak your sensitive data and/or gain unauthorized persistence in your system.\r\nhttps://www.zdnet.com/article/twelve-malicious-python-libraries-found-and-removed-from-pypi/",
        "cve": "PVE-2022-45416",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mysql-connector",
        "advisory": "Unspecified vulnerability in the MySQL Connector component 2.1.3 and earlier and 2.0.4 and earlier in Oracle MySQL allows remote attackers to affect confidentiality, integrity, and availability via vectors related to Connector/Python.",
        "cve": "CVE-2016-5598",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mysql-connector",
        "advisory": "Vulnerability in the MySQL Connectors component of Oracle MySQL (subcomponent: Connector/Python). Supported versions that are affected are 2.1.5 and earlier. Easily \"exploitable\" vulnerability allows low privileged attacker with logon to the infrastructure where MySQL Connectors executes to compromise MySQL Connectors. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to some of MySQL Connectors accessible data. CVSS 3.0 Base Score 3.3 (Integrity impacts). CVSS Vector: (CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N).",
        "cve": "CVE-2017-3590",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mysql-connector-python",
        "advisory": "Unspecified vulnerability in the MySQL Connector component 2.1.3 and earlier and 2.0.4 and earlier in Oracle MySQL allows remote attackers to affect confidentiality, integrity, and availability via vectors related to Connector/Python.",
        "cve": "CVE-2016-5598",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mysql-connector-python",
        "advisory": "Vulnerability in the MySQL Connectors component of Oracle MySQL (subcomponent: Connector/Python). Supported versions that are affected are 2.1.5 and earlier. Easily \"exploitable\" vulnerability allows low privileged attacker with logon to the infrastructure where MySQL Connectors executes to compromise MySQL Connectors. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to some of MySQL Connectors accessible data. CVSS 3.0 Base Score 3.3 (Integrity impacts). CVSS Vector: (CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N).",
        "cve": "CVE-2017-3590",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mysql-connector-python",
        "advisory": "Due to the formatting logic of the \"console.table()\" function it was not safe to allow user controlled input to be passed to the \"properties\" parameter while simultaneously passing a plain object with at least one property as the first parameter, which could be \"__proto__\". The prototype pollution has very limited control, in that it only allows an empty string to be assigned to numerical keys of the object prototype.Node.js >= 12.22.9, >= 14.18.3, >= 16.13.2, and >= 17.3.1 use a null protoype for the object these properties are being assigned to.",
        "cve": "CVE-2022-21824",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mysql-connector-python",
        "advisory": "Vulnerability in the MySQL Connectors component of Oracle MySQL (subcomponent: Connector/Python). Supported versions that are affected are 8.0.13 and prior and 2.1.8 and prior. Easily exploitable vulnerability allows unauthenticated attacker with network access via TLS to compromise MySQL Connectors. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to critical data or all MySQL Connectors accessible data as well as unauthorized access to critical data or complete access to all MySQL Connectors accessible data.",
        "cve": "CVE-2019-2435",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mysql-connector-python",
        "advisory": "The X509_V_FLAG_X509_STRICT flag enables additional security checks of the certificates present in a certificate chain. It is not set by default. Starting from OpenSSL version 1.1.1h a check to disallow certificates in the chain that have explicitly encoded elliptic curve parameters was added as an additional strict check. An error in the implementation of this check meant that the result of a previous check to confirm that certificates in the chain are valid CA certificates was overwritten. This effectively bypasses the check that non-CA certificates must not be able to issue other certificates. If a \"purpose\" has been configured then there is a subsequent opportunity for checks that the certificate is a valid CA. All of the named \"purpose\" values implemented in libcrypto perform this check. Therefore, where a purpose is set the certificate chain will still be rejected even when the strict flag has been used. A purpose is set by default in libssl client and server certificate verification routines, but it can be overridden or removed by an application. In order to be affected, an application must explicitly set the X509_V_FLAG_X509_STRICT verification flag and either not set a purpose for the certificate verification or, in the case of TLS client or server applications, override the default purpose. OpenSSL versions 1.1.1h and newer are affected by this issue. Users of these versions should upgrade to OpenSSL 1.1.1k. OpenSSL 1.0.2 is not impacted by this issue. Fixed in OpenSSL 1.1.1k (Affected 1.1.1h-1.1.1j).\r\n\r\nAlias(es):\r\nGHSA-8hfj-xrj2-pm22\r\nRUSTSEC-2021-0056",
        "cve": "CVE-2021-3450",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mysql-connector-python",
        "advisory": "Node.js < 12.22.9, < 14.18.3, < 16.13.2, and < 17.3.1 converts SANs (Subject Alternative Names) to a string format. It uses this string to check peer certificates against hostnames when validating connections. The string format was subject to an injection vulnerability when name constraints were used within a certificate chain, allowing the bypass of these name constraints.Versions of Node.js with the fix for this escape SANs containing the problematic characters in order to prevent the injection. This behavior can be reverted through the --security-revert command-line option.",
        "cve": "CVE-2021-44532",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mysql-connector-python",
        "advisory": "Accepting arbitrary Subject Alternative Name (SAN) types, unless a PKI is specifically defined to use a particular SAN type, can result in bypassing name-constrained intermediates. Node.js < 12.22.9, < 14.18.3, < 16.13.2, and < 17.3.1 was accepting URI SAN types, which PKIs are often not defined to use. Additionally, when a protocol allows URI SANs, Node.js did not match the URI correctly.Versions of Node.js with the fix for this disable the URI SAN type when checking a certificate against a hostname. This behavior can be reverted through the --security-revert command-line option.",
        "cve": "CVE-2021-44531",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mysql-connector-python",
        "advisory": "Vulnerability in the MySQL Connectors product of Oracle MySQL (component: Connector/Python). Supported versions that are affected are 8.3.0 and prior. Easily exploitable vulnerability allows unauthenticated attacker with network access via multiple protocols to compromise MySQL Connectors. Successful attacks of this vulnerability can result in unauthorized ability to cause a hang or frequently repeatable crash (complete DOS) of MySQL Connectors. CVSS 3.1 Base Score 7.5 (Availability impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H). See CVE-2024-21090.",
        "cve": "CVE-2024-21090",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "mysql-connector-python",
        "advisory": "Vulnerability in the MySQL Connectors product of Oracle MySQL (component: Connector/J). Supported versions that are affected are 8.0.26 and prior. Difficult to exploit vulnerability allows high privileged attacker with network access via multiple protocols to compromise MySQL Connectors. Successful attacks of this vulnerability can result in unauthorized access to critical data or complete access to all MySQL Connectors accessible data and unauthorized ability to cause a hang or frequently repeatable crash (complete DOS) of MySQL Connectors. CVSS 3.1 Base Score 5.9 (Confidentiality and Availability impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:N/A:H).\r\n\r\nAlias:\r\nGHSA-w6f2-8wx4-47r5",
        "cve": "CVE-2021-2471",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "natcap.invest",
        "advisory": "Natcap.invest 3.12.1 includes a fix for CVE-2007-4559: Directory traversal vulnerability in the (1) extract and (2) extractall functions in the tarfile module in Python allows user-assisted remote attackers to overwrite arbitrary files via a .. (dot dot) sequence in filenames in a TAR archive, a related issue to CVE-2001-1267.",
        "cve": "CVE-2007-4559",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "nautobot",
        "advisory": "Nautobot 1.2.3 upgrades its dependency `Celery` to 5.2.2 for Python versions >=3.7. This change is in response to the security vulnerability identified as CVE-2021-23727.",
        "cve": "CVE-2021-23727",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "nautobot",
        "advisory": "Nautobot 1.2.4 upgrades its `Pillow` dependency to 9.0.0 for Python versions >=3.7 to fix CVEs. This change is in response to the security vulnerability identified as CVE-2022-22816.\r\nhttps://github.com/nautobot/nautobot/pull/1270/commits/6434eff5b26ff28a4e06985e3bbb00ae64b8b324",
        "cve": "CVE-2022-22816",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "nautobot",
        "advisory": "Nautobot 1.2.4 upgrades its `Pillow` dependency to 9.0.0 for Python versions >=3.7 to fix CVEs. This change is in response to the security vulnerability identified as CVE-2022-22815. \r\nhttps://github.com/nautobot/nautobot/pull/1270/commits/6434eff5b26ff28a4e06985e3bbb00ae64b8b324",
        "cve": "CVE-2022-22815",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "nautobot",
        "advisory": "Nautobot 1.2.4 upgrades its `Pillow` dependency to 9.0.0 for Python versions >=3.7 to fix CVEs. This change is in response to the security vulnerability identified as CVE-2022-22817. \r\nhttps://github.com/nautobot/nautobot/pull/1270/commits/6434eff5b26ff28a4e06985e3bbb00ae64b8b324",
        "cve": "CVE-2022-22817",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "nautobot",
        "advisory": "Nautobot 1.2.9 requires Pillow 9.0.1 or later for Python >= 3.7 in develop. This change is in response to the security vulnerability identified as CVE-2022-22817. \r\nhttps://github.com/nautobot/nautobot/pull/1488/commits/2f117f8e8a648a1e58a779477aa282f813014f40",
        "cve": "CVE-2022-22817",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "nautobot",
        "advisory": "Nautobot, a Network Source of Truth and Network Automation Platform, built on Django Python framework and PostgreSQL or MySQL database, has a vulnerability in versions 1.x and 2.0.x prior to 1.6.7 and 2.0.6. The URLs /files/get/?name=... and /files/download/?name=... provide admin access to uploaded files, which are ephemeral and deleted after the Job runs. These URLs do not require user authentication by default, which could lead to unauthorized access to files. The vulnerability has been fixed in Nautobot 1.6.7 and Nautobot 2.0.6.\r\nhttps://github.com/nautobot/nautobot/security/advisories/GHSA-75mc-3pjc-727q",
        "cve": "CVE-2023-50263",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "nautobot",
        "advisory": "Nautobot is a Network Source of Truth and Network Automation Platform built as a web application atop the Django Python framework with a PostgreSQL or MySQL database. It was discovered that due to improper handling and escaping of user-provided query parameters, a maliciously crafted Nautobot URL could potentially be used to execute a Reflected Cross-Site Scripting (Reflected XSS) attack against users. All filterable object-list views in Nautobot are vulnerable. This issue has been fixed in Nautobot versions 1.6.20 and 2.2.3. There are no known workarounds for this vulnerability. See CVE-2024-32979.",
        "cve": "CVE-2024-32979",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ndn-svs",
        "advisory": "Ndn-svs 0.3.13 starts signing/verifying balancer data packets to prevent forgery.\r\nhttps://github.com/justincpresley/ndn-python-svs/commit/933d5d99e8d51d7c92a2fc7d1d176b8c03475ac0",
        "cve": "PVE-2022-44449",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "neo-python",
        "advisory": "Neo-python 0.7.8 fixes vulnerability in RPC invoke functionality that can lead to DoS.\r\nhttps://github.com/CityOfZion/neo-python/commit/8e9c488bc0506f13424dc4208b64f250dff2818d",
        "cve": "PVE-2021-36441",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ni-measurementlink-service",
        "advisory": "Ni-measurementlink-service 1.1.1 includes a fix for CVE-2023-4570: An improper access restriction in NI MeasurementLink Python services could allow an attacker on an adjacent network to reach services exposed on localhst. These services were previously thought to be unreachable outside of the node. This affects measurement plug-ins written in Python using version 1.1.0 of the ni-measurementlink-service Python package and all previous versions.\r\nhttps://github.com/ni/measurementlink-python/security/advisories/GHSA-3f48-9j7q-q2gv",
        "cve": "CVE-2023-4570",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "nicegui",
        "advisory": "Nicegui version 1.4.16 increases the required version of python-multipart to 0.0.7. This update addresses the Regular Expression Denial of Service (ReDoS) vulnerability associated with the Content-Type header, detailed in CVE-2024-24762.\r\nhttps://github.com/zauberzeug/nicegui/pull/2569/commits/89fefcb086bdc8a3e9159585627d7bba773f8a62",
        "cve": "CVE-2024-24762",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "nicegui",
        "advisory": "NiceGUI is an easy-to-use, Python-based UI framework. A local file inclusion is present in the NiceUI leaflet component when requesting resource files under the `/_nicegui/{__version__}/resources/{key}/{path:path}` route. As a result any file on the backend filesystem which the web server has access to can be read by an attacker with access to the NiceUI leaflet website. This vulnerability has been addressed in version 1.4.21. Users are advised to upgrade. There are no known workarounds for this vulnerability. See CVE-2024-32005.",
        "cve": "CVE-2024-32005",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "nltk",
        "advisory": "NLTK affected versions allow remote code execution if untrusted packages have pickled Python code, and the integrated data package download functionality is used. This affects, for example, averaged_perceptron_tagger and punkt.",
        "cve": "CVE-2024-39705",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "nmap-python",
        "advisory": "Nmap-python is a typosquatting package. It installs malware in your system that leaks your data.\r\nhttps://github.com/rsc-dev/pypi_malware",
        "cve": "PVE-2022-45428",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "nni",
        "advisory": "A Remote Code Execution vulnerability has been detected in the Common Utilities, a Python script component of the Neural Network Intelligence (NNI) open source toolkit, impacting all versions up to 2.3rc0.",
        "cve": "CVE-2021-31200",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "noblesse",
        "advisory": "Noblesse is a malicious package, typosquatting. \"The aforementioned package could be abused to become an entry point for more sophisticated threats, enabling the attacker to execute remote code on the target machine, amass system information, plunder credit card information and passwords auto-saved in Chrome and Edge browsers, and even steal Discord authentication tokens to impersonate the victim\".\r\nhttps://thehackernews.com/2021/07/several-malicious-typosquatted-python.html",
        "cve": "PVE-2022-45448",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "noblesse2",
        "advisory": "Noblesse2 is a malicious package, typosquatting. \"The aforementioned package could be abused to become an entry point for more sophisticated threats, enabling the attacker to execute remote code on the target machine, amass system information, plunder credit card information and passwords auto-saved in Chrome and Edge browsers, and even steal Discord authentication tokens to impersonate the victim\".\r\nhttps://thehackernews.com/2021/07/several-malicious-typosquatted-python.html",
        "cve": "PVE-2022-45452",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "noblessev2",
        "advisory": "Noblessev2 is a malicious package, typosquatting. \"The aforementioned package could be abused to become an entry point for more sophisticated threats, enabling the attacker to execute remote code on the target machine, amass system information, plunder credit card information and passwords auto-saved in Chrome and Edge browsers, and even steal Discord authentication tokens to impersonate the victim\".\r\nhttps://thehackernews.com/2021/07/several-malicious-typosquatted-python.html",
        "cve": "PVE-2022-45453",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "nonebot2",
        "advisory": "nonebot2 is a cross-platform Python asynchronous chatbot framework written in Python. This security advisory pertains to a potential information leak (e.g., environment variables) in instances where developers utilize `MessageTemplate` and incorporate user-provided data into templates. The identified vulnerability has been remedied in pull request #2509 and will be included in versions released from 2.2.0. Users are strongly advised to upgrade to these patched versions to safeguard against the vulnerability. A temporary workaround involves filtering underscores before incorporating user input into the message template. See CVE-2024-21624.",
        "cve": "CVE-2024-21624",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "notifications-python-client",
        "advisory": "notifications-python-client before 4.7.1 is vulnerable to a not further described security issue in PyJWT.",
        "cve": "PVE-2021-35116",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "nova",
        "advisory": "The OpenStack Nova (python-nova) package 1:2013.2.3-0 before 1:2013.2.3-0ubuntu1.2 and 1:2014.1-0 before 1:2014.1-0ubuntu1.2 and Openstack Cinder (python-cinder) package 1:2013.2.3-0 before 1:2013.2.3-0ubuntu1.1 and 1:2014.1-0 before 1:2014.1-0ubuntu1.1 for Ubuntu 13.10 and 14.04 LTS does not properly set the sudo configuration, which makes it easier for attackers to gain privileges by leveraging another vulnerability.",
        "cve": "CVE-2013-1068",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "novajoin",
        "advisory": "Novajoin 1.1.1 includes a fix for CVE-2019-10138: A flaw was discovered in the python-novajoin plugin, all versions up to, excluding 1.1.1, for Red Hat OpenStack Platform. The novajoin API lacked sufficient access control, allowing any keystone authenticated user to generate FreeIPA tokens.",
        "cve": "CVE-2019-10138",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "nuclio-jupyter",
        "advisory": "Nuclio-jupyter 0.9.9 updates its dependency 'ipython' requirement to include a security fix.",
        "cve": "CVE-2023-24816",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "numato-gpio",
        "advisory": "Numato-gpio 0.11.1 updates its gitpython dependency to version 3.1.37 from 3.1.32 in response to the security vulnerability identified as CVE-2023-41040.\r\nhttps://github.com/clssn/numato-gpio/commit/b6b05d0868029db48ee45a9da6365d156e932e13",
        "cve": "CVE-2023-41040",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "numpy",
        "advisory": "Numpy 1.16.3 includes a fix for CVE-2019-6446: It uses the pickle Python module unsafely, which allows remote attackers to execute arbitrary code via a crafted serialized object, as demonstrated by a numpy.load call.\r\nNOTE: Third parties dispute this issue because it is  a behavior that might have legitimate applications in (for example) loading serialized Python object arrays from trusted and authenticated  sources.\r\nhttps://github.com/numpy/numpy/commit/89b688732b37616c9d26623f81aaee1703c30ffb",
        "cve": "CVE-2019-6446",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "numpy",
        "advisory": "Numpy 1.21.0rc1 includes a fix for CVE-2021-33430: A Buffer Overflow vulnerability in the PyArray_NewFromDescr_int function of ctors.c when specifying arrays of large dimensions (over 32) from Python code, which could let a malicious user cause a Denial of Service. \r\nNOTE: The vendor does not agree this is a vulnerability. In (very limited) circumstances a user may be able provoke the buffer overflow, the user is most likely already privileged to at least provoke denial of service by exhausting memory. Triggering this further requires the use of uncommon API (complicated structured dtypes), which is very unlikely to be available to an unprivileged user.\r\nhttps://github.com/numpy/numpy/issues/18939",
        "cve": "CVE-2021-33430",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "oauth2",
        "advisory": "Oauth2 1.9 includes a fix for CVE-2013-4347: It was found that python-oauth2 did not properly generate random values for use in nonces. An attacker able to capture network traffic of a website using OAuth2 authentication could use this flaw to conduct replay attacks against that website.\r\nhttps://github.com/joestump/python-oauth2/commit/82dd2cdd4954cd7b8983d5d64c0dfd9072bf4650",
        "cve": "CVE-2013-4347",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "oauth2",
        "advisory": "Oauth2 is vulnerable to CVE-2013-4346: It was found that python-oauth2 did not properly verify the nonce of a signed URL. An attacker able to capture network traffic of a website using OAuth2 authentication could use this flaw to conduct replay attacks against that website.\r\nhttps://github.com/joestump/python-oauth2/issues/129",
        "cve": "CVE-2013-4346",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "obiba-opal",
        "advisory": "Obiba-opal 5.2.1 updates its dependency 'certifi' to version '2023.7.22' include a fix.\r\nhttps://github.com/obiba/opal-python-client/pull/35",
        "cve": "CVE-2023-37920",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "oci",
        "advisory": "Oci version 2.0.2 includes a fix for CVE-2018-10903: A flaw was found in python-cryptography versions between >=1.9.0 and <2.3. The finalize_with_tag API did not enforce a minimum tag length. If a user did not validate the input length prior to passing it to finalize_with_tag an attacker could craft an invalid payload with a shortened tag (e.g. 1 byte) such that they would have a 1 in 256 chance of passing the MAC check. GCM tag forgeries can cause key leakage.",
        "cve": "CVE-2018-10903",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "oci-cli",
        "advisory": "Oci-cli 2.4.40 includes a fix for CVE-2018-1000808: Python Cryptographic Authority pyopenssl version Before 17.5.0 contains a CWE - 401 : Failure to Release Memory Before Removing Last Reference vulnerability in PKCS #12 Store that can result in Denial of service if memory runs low or is exhausted. This attack appear to be exploitable via Depends upon calling application, however it could be as simple as initiating a TLS connection. Anything that would cause the calling application to reload certificates from a PKCS #12 store.. This vulnerability appears to have been fixed in 17.5.0.",
        "cve": "CVE-2018-1000808",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "octue",
        "advisory": "Octue 0.46.2 updates its dependency 'protobuf' to version '3.20.3' to include a security fix.\r\nhttps://github.com/octue/octue-sdk-python/commit/b8dc494258381edf7d70ceac98467a89e3b0ecff",
        "cve": "CVE-2022-1941",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "octue",
        "advisory": "Octue 0.46.2 updates its dependency 'requests' to version '2.31.0' to include a security fix.\r\nhttps://github.com/octue/octue-sdk-python/commit/b8dc494258381edf7d70ceac98467a89e3b0ecff",
        "cve": "CVE-2023-32681",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "oic",
        "advisory": "In Python oic before version 1.2.1, there are several related cryptographic issues affecting client implementations that use the library. \r\n\r\nThe issues are: \r\n1) The IdToken signature algorithm was not checked automatically, but only if the expected algorithm was passed in as a kwarg. \r\n2) JWA `none` algorithm was allowed in all flows. \r\n3) oic.consumer.Consumer.parse_authz returns an unverified IdToken. The verification of the token was left to the discretion of the implementator. \r\n4) iat claim was not checked for sanity (i.e. it could be in the future). \r\n\r\nSee CVE-2020-26244.",
        "cve": "CVE-2020-26244",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "okdata-sdk",
        "advisory": "Okdata-sdk version 3.1.1 updates its dependency, upgrading python-keycloak to eliminate the use of python-jose. This change addresses the security vulnerability identified in CVE-2016-7036.",
        "cve": "CVE-2016-7036",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "omegaml",
        "advisory": "Omegaml 0.15.2 updates its dependency 'ipython' to v7.16.3 to include a security fix.\r\nhttps://github.com/omegaml/omegaml/pull/273",
        "cve": "CVE-2022-21699",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "omorfi",
        "advisory": "Omorfi 0.9.9 fixes an injection vulnerability in python OOV handling.\r\nhttps://github.com/flammie/omorfi/commit/b4d7a5dba1768a7067fd6bd4e8c80cfe465556ce",
        "cve": "PVE-2022-49400",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "onyxproxy",
        "advisory": "Onyxproxy is a malicious package. It harvests and exfiltrates sensitive data.\r\nhttps://blog.phylum.io/malicious-actors-use-unicode-support-in-python-to-evade-detection",
        "cve": "PVE-2023-54816",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "openapi-core",
        "advisory": "Openapi-core 0.13.0 includes a fix for CVE-2019-19844. It also introduces security validation with an API Key and support for HTTP security types.\r\nhttps://github.com/python-openapi/openapi-core/commit/745736b5c202ab9768bf4efb869934897d667647",
        "cve": "CVE-2019-19844",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "openapi-python-client",
        "advisory": "In openapi-python-client before version 0.5.3, clients generated with a maliciously crafted OpenAPI Document can generate arbitrary Python code. Subsequent execution of this malicious client is arbitrary code execution. See: CVE-2020-15142.",
        "cve": "CVE-2020-15142",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "openapi-python-client",
        "advisory": "In openapi-python-client before version 0.5.3, there is a path traversal vulnerability. If a user generated a client using a maliciously crafted OpenAPI document, it is possible for generated files to be placed in arbitrary locations on disk. See: CVE-2020-15141.",
        "cve": "CVE-2020-15141",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "openbb",
        "advisory": "Openbb 2.3.0 updates its dependency 'gitpython' to v3.1.30 to include a security fix.",
        "cve": "CVE-2022-24439",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencl-rt",
        "advisory": "Opencl-rt 2022.1 includes a fix for CVE-2022-26032: Uncontrolled search path element in the Intel(R) Distribution for Python programming language before version 2022.1 for Intel(R) oneAPI Toolkits may allow an authenticated user to potentially enable escalation of privilege via local access.\r\nhttps://www.intel.com/content/www/us/en/security-center/advisory/intel-sa-00674.html",
        "cve": "CVE-2022-26032",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-contrib-python",
        "advisory": "OpenCV (Open Source Computer Vision Library) through 3.3 (corresponding to OpenCV-Python and OpenCV-Contrib-Python 3.3.0.9) has an out-of-bounds write error in the FillColorRow8 function in utils.cpp when reading an image file by using cv::imread.",
        "cve": "CVE-2017-12605",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-contrib-python",
        "advisory": "In modules/imgcodecs/src/grfmt_pxm.cpp, the length of buffer AutoBuffer _src is small than expected, which will cause copy buffer overflow later. If the image is from remote, may lead to remote code execution or denial of service. This affects OpenCV 3.3 (corresponding to OpenCV-Python 3.3.0.9) and earlier.",
        "cve": "CVE-2017-12862",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-contrib-python",
        "advisory": "OpenCV (Open Source Computer Vision Library) 3.3 (corresponding to OpenCV-Python 3.3.0.9) has an out-of-bounds write error in the function FillColorRow1 in utils.cpp when reading an image file by using cv::imread. NOTE: this vulnerability exists because of an incomplete fix for CVE-2017-12597.",
        "cve": "CVE-2017-14136",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-contrib-python",
        "advisory": "In opencv/modules/imgcodecs/src/grfmt_pxm.cpp, function ReadNumber did not checkout the input length, which lead to integer overflow. If the image is from remote, may lead to remote code execution or denial of service. This affects OpenCV 3.3 (corresponding with OpenCV-Python version 3.3.0.9) and earlier.",
        "cve": "CVE-2017-12864",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-contrib-python",
        "advisory": "In opencv/modules/imgcodecs/src/utils.cpp, functions FillUniColor and FillUniGray do not check the input length, which can lead to integer overflow. If the image is from remote, may lead to remote code execution or denial of service. This affects Opencv 3.3 (corresponding with OpenCV-Python 3.3.0.9) and earlier.",
        "cve": "CVE-2017-1000450",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-contrib-python",
        "advisory": "OpenCV 3.0.0 has a double free issue that allows attackers to execute arbitrary code. This issue was fixed in OpenCV version 3.3.1 (corresponding to OpenCV-Python and and OpenCV-Contrib-Python 3.3.1.11).",
        "cve": "CVE-2016-1516",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-contrib-python",
        "advisory": "In opencv/modules/imgcodecs/src/grfmt_pxm.cpp, function PxMDecoder::readData has an integer overflow when calculate src_pitch. If the image is from remote, may lead to remote code execution or denial of service. This affects OpenCV 3.3 (corresponding to OpenCV-Python 3.3.0.9) and earlier.",
        "cve": "CVE-2017-12863",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-contrib-python",
        "advisory": "OpenCV 3.3.1 (corresponding with opencv-python and opencv-contrib-python 3.3.1.11) has a Buffer Overflow in the cv::PxMDecoder::readData function in grfmt_pxm.cpp, because an incorrect size value is used.",
        "cve": "CVE-2017-17760",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-contrib-python",
        "advisory": "In OpenCV 3.3.1 (corresponding with OpenCV-Python 3.3.1.11), a heap-based buffer over-read exists in the function cv::HdrDecoder::checkSignature in modules/imgcodecs/src/grfmt_hdr.cpp.",
        "cve": "CVE-2017-18009",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-contrib-python",
        "advisory": "In OpenCV 3.3.1 (corresponding with OpenCV-Python 3.3.1.11), a heap-based buffer overflow happens in cv::Jpeg2KDecoder::readComponent8u in modules/imgcodecs/src/grfmt_jpeg2000.cpp when parsing a crafted image file.",
        "cve": "CVE-2018-5268",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-contrib-python",
        "advisory": "In OpenCV 3.3.1 (corresponds with OpenCV-Python 3.3.1.11), an assertion failure happens in cv::RBaseStream::setPos in modules/imgcodecs/src/bitstrm.cpp because of an incorrect integer cast.",
        "cve": "CVE-2018-5269",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-contrib-python",
        "advisory": "An issue was discovered in OpenCV before 4.1.1 (OpenCV-Python before 4.1.1.26). There is a NULL pointer dereference in the function cv::XMLParser::parse at modules/core/src/persistence.cpp.",
        "cve": "CVE-2019-14493",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-contrib-python",
        "advisory": "Opencv-contrib-python 4.8.1.78 updates its bundled dependency 'libwebp' to include a fix for a high risk vulnerability. Only mac OS X wheels on PyPI were affected.\r\nhttps://github.com/opencv/opencv-python/releases/tag/78",
        "cve": "CVE-2023-4863",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-contrib-python",
        "advisory": "The OpenCV wechat_qrcode module, versions up to 4.7.0, contains a critical vulnerability affecting the DecodedBitStreamParser::decodeByteSegment function in the qrcode/decoder/decoded_bit_stream_parser.cpp file. This vulnerability, if exploited, could lead to a null pointer dereference. Attackers can potentially launch this attack remotely.",
        "cve": "CVE-2023-2617",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-contrib-python-headless",
        "advisory": "An issue was discovered in OpenCV before 4.1.1 (OpenCV-Python before 4.1.1.26). There is a NULL pointer dereference in the function cv::XMLParser::parse at modules/core/src/persistence.cpp.",
        "cve": "CVE-2019-14493",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-contrib-python-headless",
        "advisory": "Opencv-contrib-python-headless 4.8.1.78 updates its bundled dependency 'libwebp' to include a fix for a high risk vulnerability. Only mac OS X wheels on PyPI were affected.\r\nhttps://github.com/opencv/opencv-python/releases/tag/78",
        "cve": "CVE-2023-4863",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-python",
        "advisory": "Opencv-python 3.3.1.11 includes a fix for CVE-2017-12599: OpenCV through 3.3 has an out-of-bounds read error in the function icvCvt_BGRA2BGR_8u_C4C3R when reading an image file by using cv::imread.",
        "cve": "CVE-2017-12599",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-python",
        "advisory": "Opencv-python 3.3.1.11 includes a fix for CVE-2017-12603: OpenCV through 3.3 has an invalid write in the cv::RLByteStream::getBytes function in modules/imgcodecs/src/bitstrm.cpp when reading an image file by using cv::imread, as demonstrated by the 2-opencv-heapoverflow-fseek test case.",
        "cve": "CVE-2017-12603",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-python",
        "advisory": "Opencv-python 3.3.1.11 includes a fix for CVE-2017-12601: OpenCV through 3.3 has a buffer overflow in the cv::BmpDecoder::readData function in modules/imgcodecs/src/grfmt_bmp.cpp when reading an image file by using cv::imread, as demonstrated by the 4-buf-overflow-readData-memcpy test case.",
        "cve": "CVE-2017-12601",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-python",
        "advisory": "Opencv-python 3.3.1.11 includes a fix for CVE-2017-12600: OpenCV through 3.3 has a denial of service (CPU consumption) issue, as demonstrated by the 11-opencv-dos-cpu-exhaust test case.",
        "cve": "CVE-2017-12600",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-python",
        "advisory": "Opencv-python 3.3.1.11 includes a fix for CVE-2017-12598: OpenCV through 3.3 has an out-of-bounds read error in the cv::RBaseStream::readBlock function in modules/imgcodecs/src/bitstrm.cpp when reading an image file by using cv::imread, as demonstrated by the 8-opencv-invalid-read-fread test case.",
        "cve": "CVE-2017-12598",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-python",
        "advisory": "Opencv-python 3.3.1.11 includes a fix for CVE-2017-12606: OpenCV through 3.3 has an out-of-bounds write error in the function FillColorRow4 in utils.cpp when reading an image file by using cv::imread.",
        "cve": "CVE-2017-12606",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-python",
        "advisory": "Opencv-python 3.3.1.11 includes a fix for CVE-2016-1517: OpenCV 3.0.0 allows remote attackers to cause a denial of service (segfault) via vectors involving corrupt chunks.",
        "cve": "CVE-2016-1517",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-python",
        "advisory": "Opencv-python 3.3.1.11 includes a fix for CVE-2017-12602: OpenCV through 3.3 has a denial of service (memory consumption) issue, as demonstrated by the 10-opencv-dos-memory-exhaust test case.",
        "cve": "CVE-2017-12602",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-python",
        "advisory": "Opencv-python 3.3.1.11 includes a fix for CVE-2017-12597: OpenCV through 3.3 has an out-of-bounds write error in the function FillColorRow1 in utils.cpp when reading an image file by using cv::imread.",
        "cve": "CVE-2017-12597",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-python",
        "advisory": "Opencv-python 3.3.1.11 includes a fix for  CVE-2017-12604: OpenCV through 3.3 has an out-of-bounds write error in the FillUniColor function in utils.cpp when reading an image file by using cv::imread.",
        "cve": "CVE-2017-12604",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-python",
        "advisory": "Opencv-python 3.4.18 and 4.6.0 pin its dependency 'libpng' to v1.6.37 to include a security fix.",
        "cve": "CVE-2019-7317",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-python",
        "advisory": "Opencv-python 3.4.18 and 4.6.0 update its dependency 'openssl' to v1_1_1o to include security fixes.",
        "cve": "CVE-2022-1292",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-python",
        "advisory": "Opencv-python 3.4.18 and 4.6.0 update its dependency 'openssl' to v1_1_1o to include security fixes.",
        "cve": "CVE-2022-0778",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-python",
        "advisory": "Opencv-python 3.4.18 and 4.6.0 pin its dependency 'freetype' to v2.12.1 to include a security fix.",
        "cve": "CVE-2022-27406",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-python",
        "advisory": "Opencv-python 4.1.0.25 includes a fix for CVE-2019-19624: An out-of-bounds read was discovered in OpenCV before 4.1.1. Specifically, variable coarsest_scale is assumed to be greater than or equal to finest_scale within the calc()/ocl_calc() functions in dis_flow.cpp. However, this is not true when dealing with small images, leading to an out-of-bounds read of the heap-allocated arrays Ux and Uy.",
        "cve": "CVE-2019-19624",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-python",
        "advisory": "Opencv-python 4.1.1.26 includes a fix for CVE-2019-15939: An issue was discovered in OpenCV 4.1.0. There is a divide-by-zero error in cv::HOGDescriptor::getDescriptorSize in modules/objdetect/src/hog.cpp.",
        "cve": "CVE-2019-15939",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-python",
        "advisory": "Opencv-python 4.1.1.26 includes a fix for CVE-2019-9423: In opencv calls that use libpng, there is a possible out of bounds write due to a missing bounds check. This could lead to local escalation of privilege with no additional execution privileges required. User interaction is not required for exploitation.",
        "cve": "CVE-2019-9423",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-python",
        "advisory": "Opencv-python 4.1.2.30 includes a fix for  CVE-2019-16249: OpenCV 4.1.1 has an out-of-bounds read in hal_baseline::v_load in core/hal/intrin_sse.hpp when called from computeSSDMeanNorm in modules/video/src/dis_flow.cpp.",
        "cve": "CVE-2019-16249",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-python",
        "advisory": "Opencv-python 4.7.0 updates its C dependency 'FFmpeg' to v5.1.2 to include a security fix.",
        "cve": "CVE-2022-1475",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-python",
        "advisory": "Opencv-python 4.7.0 updates its dependency 'OpenSSL' to v1.1.1s to include security fixes.",
        "cve": "CVE-2022-2068",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-python",
        "advisory": "OpenCV's wechat_qrcode module, specifically versions up to 4.7.0, has a significant vulnerability affecting the DecodedBitStreamParser::decodeHanziSegment function within the qrcode/decoder/decoded_bit_stream_parser.cpp file. This vulnerability can cause a memory leak. The potential attack can be executed remotely. To rectify this issue, it's advisable to apply a patch named 2b62ff6181163eea029ed1cab11363b4996e9cd6.",
        "cve": "CVE-2023-2618",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-python",
        "advisory": "Opencv-python 4.7.0 updates its C dependency 'zlib' to v1.2.13 to include a security fix.",
        "cve": "CVE-2022-37434",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-python",
        "advisory": "Opencv-python 4.7.0 updates its dependency 'OpenSSL' to v1.1.1s to include security fixes.",
        "cve": "CVE-2022-2097",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-python",
        "advisory": "OpenCV (Open Source Computer Vision Library) 3.3 (corresponding to OpenCV-Python 3.3.0.9) has an out-of-bounds write error in the function FillColorRow1 in utils.cpp when reading an image file by using cv::imread. NOTE: this vulnerability exists because of an incomplete fix for CVE-2017-12597.",
        "cve": "CVE-2017-14136",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-python",
        "advisory": "In opencv/modules/imgcodecs/src/grfmt_pxm.cpp, function ReadNumber did not checkout the input length, which lead to integer overflow. If the image is from remote, may lead to remote code execution or denial of service. This affects OpenCV 3.3 (corresponding with OpenCV-Python version 3.3.0.9) and earlier.",
        "cve": "CVE-2017-12864",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-python",
        "advisory": "In opencv/modules/imgcodecs/src/utils.cpp, functions FillUniColor and FillUniGray do not check the input length, which can lead to integer overflow. If the image is from remote, may lead to remote code execution or denial of service. This affects Opencv 3.3 (corresponding with OpenCV-Python 3.3.0.9) and earlier.",
        "cve": "CVE-2017-1000450",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-python",
        "advisory": "OpenCV 3.0.0 has a double free issue that allows attackers to execute arbitrary code. This issue was fixed in OpenCV version 3.3.1 (corresponding to OpenCV-Python and and OpenCV-Contrib-Python 3.3.1.11).",
        "cve": "CVE-2016-1516",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-python",
        "advisory": "In modules/imgcodecs/src/grfmt_pxm.cpp, the length of buffer AutoBuffer _src is small than expected, which will cause copy buffer overflow later. If the image is from remote, may lead to remote code execution or denial of service. This affects OpenCV 3.3 (corresponding to OpenCV-Python 3.3.0.9) and earlier.",
        "cve": "CVE-2017-12862",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-python",
        "advisory": "In opencv/modules/imgcodecs/src/grfmt_pxm.cpp, function PxMDecoder::readData has an integer overflow when calculate src_pitch. If the image is from remote, may lead to remote code execution or denial of service. This affects OpenCV 3.3 (corresponding to OpenCV-Python 3.3.0.9) and earlier.",
        "cve": "CVE-2017-12863",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-python",
        "advisory": "OpenCV (Open Source Computer Vision Library) through 3.3 (corresponding to OpenCV-Python and OpenCV-Contrib-Python 3.3.0.9) has an out-of-bounds write error in the FillColorRow8 function in utils.cpp when reading an image file by using cv::imread.",
        "cve": "CVE-2017-12605",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-python",
        "advisory": "OpenCV 3.3.1 (corresponding with opencv-python and opencv-contrib-python 3.3.1.11) has a Buffer Overflow in the cv::PxMDecoder::readData function in grfmt_pxm.cpp, because an incorrect size value is used.",
        "cve": "CVE-2017-17760",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-python",
        "advisory": "In OpenCV 3.3.1 (corresponding with OpenCV-Python 3.3.1.11), a heap-based buffer overflow happens in cv::Jpeg2KDecoder::readComponent8u in modules/imgcodecs/src/grfmt_jpeg2000.cpp when parsing a crafted image file.",
        "cve": "CVE-2018-5268",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-python",
        "advisory": "In OpenCV 3.3.1 (corresponding with OpenCV-Python 3.3.1.11), a heap-based buffer over-read exists in the function cv::HdrDecoder::checkSignature in modules/imgcodecs/src/grfmt_hdr.cpp.",
        "cve": "CVE-2017-18009",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-python",
        "advisory": "In OpenCV 3.3.1 (corresponds with OpenCV-Python 3.3.1.11), an assertion failure happens in cv::RBaseStream::setPos in modules/imgcodecs/src/bitstrm.cpp because of an incorrect integer cast.",
        "cve": "CVE-2018-5269",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-python",
        "advisory": "An issue was discovered in OpenCV before 4.1.1 (OpenCV-Python before 4.1.1.26). There is a NULL pointer dereference in the function cv::XMLParser::parse at modules/core/src/persistence.cpp.",
        "cve": "CVE-2019-14493",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-python",
        "advisory": "Opencv-python 4.8.1.78 updates its bundled dependency 'libwebp' to include a fix for a high risk vulnerability. Only mac OS X wheels on PyPI were affected.\r\nhttps://github.com/opencv/opencv-python/releases/tag/78",
        "cve": "CVE-2023-4863",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-python",
        "advisory": "Opencv-python 4.1.1.26 and 3.4.7.28 include a fix for CVE-2019-14491: An issue was discovered in OpenCV before 3.4.7 and 4.x before 4.1.1. There is an out of bounds read in the function cv::predictOrdered<cv::HaarEvaluator> in modules/objdetect/src/cascadedetect.hpp, which leads to denial of service.",
        "cve": "CVE-2019-14491",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-python",
        "advisory": "Opencv-python 4.1.1.26 and 3.4.7.28 include a fix for CVE-2019-14492: An issue was discovered in OpenCV before 3.4.7 and 4.x before 4.1.1. There is an out of bounds read/write in the function HaarEvaluator::OptFeature::calc in modules/objdetect/src/cascadedetect.hpp, which leads to denial of service.",
        "cve": "CVE-2019-14492",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-python",
        "advisory": "Opencv-python 4.2.0.32 includes a fix for CVE-2019-5063: An exploitable heap buffer overflow vulnerability exists in the data structure persistence functionality of OpenCV 4.1.0. A specially crafted XML file can cause a buffer overflow, resulting in multiple heap corruptions and potential code execution. An attacker can provide a specially crafted file to trigger this vulnerability.",
        "cve": "CVE-2019-5063",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-python",
        "advisory": "Opencv-python 4.2.0.32 includes a fix for  CVE-2019-5064: An exploitable heap buffer overflow vulnerability exists in the data structure persistence functionality of OpenCV, before version 4.2.0. A specially crafted JSON file can cause a buffer overflow, resulting in multiple heap corruptions and potentially code execution. An attacker can provide a specially crafted file to trigger this vulnerability.",
        "cve": "CVE-2019-5064",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-python-headless",
        "advisory": "An issue was discovered in OpenCV before 4.1.1 (OpenCV-Python before 4.1.1.26). There is a NULL pointer dereference in the function cv::XMLParser::parse at modules/core/src/persistence.cpp.",
        "cve": "CVE-2019-14493",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opencv-python-headless",
        "advisory": "Opencv-python-headless 4.8.1.78 updates its bundled dependency 'libwebp' to include a fix for a high risk vulnerability. Only mac OS X wheels on PyPI were affected.\r\nhttps://github.com/opencv/opencv-python/releases/tag/78",
        "cve": "CVE-2023-4863",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "openfeature-sdk",
        "advisory": "Openfeature-sdk version 0.0.2 updates its wheel dependency on the python-sdk from version 0.37.1 to 0.38.0, due to security enhancements.\r\nhttps://github.com/open-feature/python-sdk/pull/37/commits/0e5f5854ec7f9db6363515c705a2e21472f16352",
        "cve": "PVE-2024-64977",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "opentelemetry-instrumentation",
        "advisory": "Opentelemetry-instrumentation 0.41b0 includes a fix for CVE-2023-43810: Autoinstrumentation out of the box adds the label 'http_method' that has unbound cardinality. It leads to the server's potential memory exhaustion when many malicious requests are sent. HTTP method for requests can be easily set by an attacker to be random and long. In order to be affected program has to be instrumented for HTTP handlers and does not filter any unknown HTTP methods on the level of CDN, LB, previous middleware, etc.\r\nhttps://github.com/open-telemetry/opentelemetry-python-contrib/security/advisories/GHSA-5rv5-6h4r-h22v",
        "cve": "CVE-2023-43810",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ops",
        "advisory": "The ops library is a Python framework for developing and testing Kubernetes and machine charms. The issue is that ops passes the secret content as one of the args via CLI. This issue may affect any of the charms that are using: Juju (>=3.0), Juju secrets, and not correctly capturing and processing `subprocess.CalledProcessError`.",
        "cve": "CVE-2024-41129",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "optimade",
        "advisory": "Optimade 0.16.9 updates its dependency 'Elasticsearch' to v7.16.2 to avoid any log4j related vulnerability.\r\nhttps://github.com/Materials-Consortia/optimade-python-tools/issues/1040",
        "cve": "CVE-2021-45105",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "optimade",
        "advisory": "Optimade 0.16.9 updates its dependency 'Elasticsearch' to v7.16.2 to avoid any log4j related vulnerability.\r\nhttps://github.com/Materials-Consortia/optimade-python-tools/issues/1040",
        "cve": "CVE-2021-44228",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "optimade",
        "advisory": "Optimade 0.16.9 updates its dependency 'Elasticsearch' to v7.16.2 to avoid any log4j related vulnerability.\r\nhttps://github.com/Materials-Consortia/optimade-python-tools/issues/1040",
        "cve": "CVE-2021-45046",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "optimizely-sdk",
        "advisory": "Optimizely-sdk 4.0.0 stops requiring PyYaml==5.2 as a dependency to resolve security vulnerabilities.\r\nhttps://github.com/optimizely/python-sdk/pull/366/files",
        "cve": "CVE-2020-1747",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "optimizely-sdk",
        "advisory": "Optimizely-sdk 4.0.0 stops requiring PyYaml==5.2 as a dependency to resolve security vulnerabilities.\r\nhttps://github.com/optimizely/python-sdk/pull/366/files",
        "cve": "CVE-2020-14343",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "osc",
        "advisory": "Osc 0.123 is the first release that performs SSL certificate checks to prevent man-in-the-middle-attacks. Python-m2crypto is needed to make this work. Certificate checks can be turned off per server via 'sslcertck = 0' in .oscrc.",
        "cve": "PVE-2021-37874",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ostorlab",
        "advisory": "Ostorlab version 1.0.5 updates its base image to python:3.10.14-alpine3.19 from python:3.9-bullseye to address vulnerabilities, enhancing the security and reliability of the docker environment.",
        "cve": "PVE-2024-67449",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ovirt-engine-sdk-python",
        "advisory": "The python SDK before 3.1.0.6 and CLI before 3.1.0.8 for oVirt 3.1 does not check the server SSL certificate against the client keys, which allows remote attackers to spoof a server via a man-in-the-middle (MITM) attack.",
        "cve": "CVE-2012-3533",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ovirt-engine-sdk-python",
        "advisory": "ovirt-engine-sdk-python before 3.4.0.7 and 3.5.0.4 does not verify that the hostname of the remote endpoint matches the Common Name (CN) or subjectAltName as specified by its x.509 certificate in a TLS/SSL session. This could allow man-in-the-middle attackers to spoof remote endpoints via an arbitrary valid certificate.",
        "cve": "CVE-2014-0161",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ovirt-engine-sdk-python",
        "advisory": "The REST API in overt 3.4.0 and earlier stores session IDs in HTML5 local storage, which allows remote attackers to obtain sensitive information via a crafted web page.",
        "cve": "CVE-2014-0153",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ovirt-engine-sdk-python",
        "advisory": "Session fixation vulnerability in the web admin interface in oVirt 3.4.0 and earlier allows remote attackers to hijack web sessions via unspecified vectors.",
        "cve": "CVE-2014-0152",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ovirt-engine-sdk-python",
        "advisory": "oVirt Engine before 4.0.3 does not include DWH_DB_PASSWORD in the list of keys to hide in log files, which allows local users to obtain sensitive password information by reading engine log files.",
        "cve": "CVE-2016-6341",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "owlmixin",
        "advisory": "An exploitable vulnerability exists in the YAML loading functionality of util.py in OwlMixin before 2.0.0a12. A \"Load YAML\" string or file (aka load_yaml or load_yamlf) can execute arbitrary Python commands resulting in command execution because load is used where safe_load should have been used. An attacker can insert Python into loaded YAML to trigger this vulnerability.",
        "cve": "CVE-2017-16618",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "owlmoon",
        "advisory": "Owlmoon is a malicious package, typosquatting.  It steals Discord access tokens, passwords, and even stage dependency confusion attacks.\r\nhttps://thehackernews.com/2021/11/11-malicious-pypi-python-libraries.html",
        "cve": "PVE-2022-45458",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "owslib",
        "advisory": "OWSLib is a Python package for client programming with Open Geospatial Consortium (OGC) web service interface standards, and their related content models. OWSLib's XML parser (which supports both 'lxml' and 'xml.etree') does not disable entity resolution, and could lead to arbitrary file reads from an attacker-controlled XML payload. This affects all XML parsing in the codebase. This issue has been addressed in version 0.28.1. The only known workaround is to patch the library manually. See 'GHSA-8h9c-r582-mggc' for details.",
        "cve": "CVE-2023-27476",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pact-python",
        "advisory": "Pact-python 1.3.6 includes several vulnerability fixes for Dockerfile(s).",
        "cve": "PVE-2021-40235",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pact-python",
        "advisory": "Pact-python 1.3.7 includes important fixes for Dockerfiles (py37.Dockerfile, py38.Dockerfile, py36.Dockerfile) to reduce vulnerabilities.",
        "cve": "PVE-2021-40324",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pact-python",
        "advisory": "Pact-python 1.7.0 updates its dependency 'wheel' to v0.38.0 to include a security fix.",
        "cve": "CVE-2022-40898",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pact-python",
        "advisory": "Pact-python 1.7.0 includes a fix for CVE-2007-4559: Directory traversal vulnerability in the (1) extract and (2) extractall functions in the tarfile module in Python allows user-assisted remote attackers to overwrite arbitrary files via a .. (dot dot) sequence in filenames in a TAR archive, a related issue to CVE-2001-1267.",
        "cve": "CVE-2007-4559",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "paho-mqtt",
        "advisory": "Paho-mqtt version 1.0.2 addresses a potential race condition that could occur when initiating a TLS connection and publishing simultaneously. This fix ensures that PUBLISH data is not sent prematurely and unencrypted, maintaining the intended message order and encryption for security.\r\nhttps://github.com/eclipse/paho.mqtt.python/commit/4643ecaf54f293ac2913b66d35b5e082d7a2a344",
        "cve": "PVE-2024-65106",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pandasai",
        "advisory": "GenerateSDFPipeline in synthetic_dataframe in PandasAI (aka pandas-ai) through 1.5.17 allows attackers to trigger the generation of arbitrary Python code that is executed by SDFCodeExecutor. An attacker can create a dataframe that provides an English language specification of this Python code. \r\nNOTE: the vendor previously attempted to restrict code execution in response to a separate issue, CVE-2023-39660. See CVE-2024-23752.",
        "cve": "CVE-2024-23752",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "panoramix",
        "advisory": "Panoramix (now renamed apache-superset) 0.8.0 is vulnerable to CVE-2020-13948: While investigating a bug report on Apache Superset, it was determined that an authenticated user could craft requests via a number of templated text fields in the product that would allow arbitrary access to Python\u2019s 'os' package in the web application process in versions < 0.37.1. It was thus possible for an authenticated user to list and access files, environment variables, and process information. Additionally it was possible to set environment variables for the current process, create and update files in folders writable by the web process, and execute arbitrary programs accessible by the web process. All other operations available to the 'os' package in Python were also available, even if not explicitly enumerated in this CVE.",
        "cve": "CVE-2020-13948",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "passeo",
        "advisory": "Passeo 1.0.5 includes a fix for CVE-2022-23472: Versions prior to 1.0.5 rely on the python 'random' library for random value selection. The python 'random' library warns that it should not be used for security purposes due to its reliance on a non-cryptographically secure random number generator. As a result a motivated attacker may be able to guess generated passwords.\r\nhttps://github.com/ArjunSharda/Passeo/security/advisories/GHSA-mhhf-vgwh-fw9h",
        "cve": "CVE-2022-23472",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pdfextract",
        "advisory": "Pdfextract before 0.0.2 is using \"eval\" on filenames, leading to execution of arbitrary Python code.",
        "cve": "PVE-2021-25927",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pdoc",
        "advisory": "pdoc provides API Documentation for Python Projects. Documentation generated with `pdoc --math` linked to JavaScript files from polyfill.io. The polyfill.io CDN has been sold and now serves malicious code.",
        "cve": "CVE-2024-38526",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "perceval-zulip",
        "advisory": "Perceval-zulip 0.2.0 drops support for Python < 3.7 as it arrived to End-of-Life in December 2021 and has known vulnerabilities.\r\nhttps://github.com/vchrombie/grimoirelab-perceval-zulip/commit/328938531bb95c2407d75d94db452f5dceb73d16",
        "cve": "CVE-2016-0718",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "perceval-zulip",
        "advisory": "Perceval-zulip 0.2.0 drops support for Python < 3.7 as it arrived to End-of-Life in December 2021.\r\nhttps://github.com/vchrombie/grimoirelab-perceval-zulip/commit/328938531bb95c2407d75d94db452f5dceb73d16",
        "cve": "CVE-2016-5300",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "perceval-zulip",
        "advisory": "Perceval-zulip 0.2.0 drops support for Python < 3.7 as it arrived to End-of-Life in December 2021.\r\nhttps://github.com/vchrombie/grimoirelab-perceval-zulip/commit/328938531bb95c2407d75d94db452f5dceb73d16",
        "cve": "CVE-2018-1060",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "perceval-zulip",
        "advisory": "Perceval-zulip 0.2.0 drops support for Python < 3.7 as it arrived to End-of-Life in December 2021.\r\nhttps://github.com/vchrombie/grimoirelab-perceval-zulip/commit/328938531bb95c2407d75d94db452f5dceb73d16",
        "cve": "PVE-2021-42403",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "perceval-zulip",
        "advisory": "Perceval-zulip 0.2.0 drops support for Python < 3.7 as it arrived to End-of-Life in December 2021.\r\nhttps://github.com/vchrombie/grimoirelab-perceval-zulip/commit/328938531bb95c2407d75d94db452f5dceb73d16",
        "cve": "CVE-2018-1061",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "perceval-zulip",
        "advisory": "Perceval-zulip 0.2.0 drops support for Python < 3.7 as it arrived to End-of-Life in December 2021 and has known vulnerabilities.\r\nhttps://github.com/vchrombie/grimoirelab-perceval-zulip/commit/328938531bb95c2407d75d94db452f5dceb73d16",
        "cve": "CVE-2016-4472",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "perceval-zulip",
        "advisory": "Perceval-zulip 0.2.0 drops support for Python < 3.7 as it arrived to End-of-Life in December 2021.\r\nhttps://github.com/vchrombie/grimoirelab-perceval-zulip/commit/328938531bb95c2407d75d94db452f5dceb73d16",
        "cve": "CVE-2012-6702",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pheonix-waitress",
        "advisory": "Pheonix-waitress 2.1.1 includes a fix for CVE-2022-24761: When using Waitress versions 2.1.0 and prior behind a proxy that does not properly validate the incoming HTTP request matches the RFC7230 standard, Waitress and the frontend proxy may disagree on where one request starts and where it ends. This would allow requests to be smuggled via the front-end proxy to waitress and later behavior. There are two classes of vulnerability that may lead to request smuggling that are addressed by this advisory: The use of Python's 'int()' to parse strings into integers, leading to '+10' to be parsed as '10'', or '0x01' to be parsed as '1', where as the standard specifies that the string should contain only digits or hex digits; and Waitress does not support chunk extensions, however it was discarding them without validating that they did not contain illegal characters. A workaround is available. When deploying a proxy in front of waitress, turning on functionality to make sure that the request matches the RFC7230 standard. Certain proxy servers may not have this functionality.\r\nhttps://github.com/Pylons/waitress/security/advisories/GHSA-4f7p-27jc-3c36",
        "cve": "CVE-2022-24761",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "piccolo-admin",
        "advisory": "Piccolo Admin is an admin interface/content management system for Python, built on top of Piccolo. Piccolo's admin panel allows media files to be uploaded. As a default, SVG is an allowed file type for upload. An attacker can upload an SVG which when loaded can allow arbitrary access to the admin page. This vulnerability was patched in version 1.3.2. See CVE-2024-30248.",
        "cve": "CVE-2024-30248",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pillow",
        "advisory": "Pillow 10.0.0 includes a fix for CVE-2023-44271: Denial of Service that uncontrollably allocates memory to process a given task, potentially causing a service to crash by having it run out of memory. This occurs for truetype in ImageFont when textlength in an ImageDraw instance operates on a long text argument.\r\nhttps://github.com/python-pillow/Pillow/pull/7244",
        "cve": "CVE-2023-44271",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pillow",
        "advisory": "Pillow versions 2.3.2 and 2.5.2 include a fix for CVE-2014-3589: PIL/IcnsImagePlugin.py in Python Imaging Library (PIL) and Pillow before 2.3.2 and 2.5.x before 2.5.2 allows remote attackers to cause a denial of service via a crafted block size.\r\nhttps://github.com/python-pillow/Pillow/commit/205e056f8f9b06ed7b925cf8aa0874bc4aaf8a7d",
        "cve": "CVE-2014-3589",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pillow",
        "advisory": "Pillow 2.5.0 includes a fix that prevents shell injection.\nhttps://github.com/python-pillow/Pillow/pull/731",
        "cve": "CVE-2014-3007",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pillow",
        "advisory": "Buffer overflow in the ImagingPcdDecode function in PcdDecode.c in Pillow before 3.1.1 and Python Imaging Library (PIL) 1.1.7 and earlier allows remote attackers to cause a denial of service (crash) via a crafted PhotoCD file.",
        "cve": "CVE-2016-2533",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pillow",
        "advisory": "There is a DoS vulnerability in Pillow before 6.2.2 caused by FpxImagePlugin.py calling the range function on an unvalidated 32-bit integer if the number of bands is large. On Windows running 32-bit Python, this results in an OverflowError or MemoryError due to the 2 GB limit. However, on Linux running 64-bit Python this results in the process being terminated by the OOM killer.",
        "cve": "CVE-2019-19911",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pillow",
        "advisory": "Pillow version 8.2.0 includes a fix for CVE-2021-28676: For FLI data, FliDecode did not properly check that the block advance was non-zero, potentially leading to an infinite loop on load.\r\nhttps://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/MQHA5HAIBOYI3R6HDWCLAGFTIQP767FL/\r\nhttps://github.com/python-pillow/Pillow/pull/5377\r\nhttps://pillow.readthedocs.io/en/stable/releasenotes/8.2.0.html#cve-2021-28676-fix-fli-dos",
        "cve": "CVE-2021-28676",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pillow",
        "advisory": "Pillow version 8.2.0 includes a fix for CVE-2021-28678: For BLP data, BlpImagePlugin did not properly check that reads (after jumping to file offsets) returned data. This could lead to a DoS where the decoder could be run a large number of times on empty data.\r\nhttps://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/MQHA5HAIBOYI3R6HDWCLAGFTIQP767FL/\r\nhttps://github.com/python-pillow/Pillow/pull/5377\r\nhttps://pillow.readthedocs.io/en/stable/releasenotes/8.2.0.html#cve-2021-28678-fix-blp-dos",
        "cve": "CVE-2021-28678",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pillow",
        "advisory": "Pillow version 8.2.0 includes a fix for CVE-2021-28677: For EPS data, the readline implementation used in EPSImageFile has to deal with any combination of \\r and \\n as line endings. It used an accidentally quadratic method of accumulating lines while looking for a line ending. A malicious EPS file could use this to perform a DoS of Pillow in the open phase, before an image was accepted for opening.\r\nhttps://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/MQHA5HAIBOYI3R6HDWCLAGFTIQP767FL/\r\nhttps://github.com/python-pillow/Pillow/pull/5377\r\nhttps://pillow.readthedocs.io/en/stable/releasenotes/8.2.0.html#cve-2021-28677-fix-eps-dos-on-open",
        "cve": "CVE-2021-28677",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pillow",
        "advisory": "Pillow 8.3.0 includes a fix for CVE-2021-34552: Pillow through 8.2.0 and PIL (also known as Python Imaging Library) through 1.1.7 allow an attacker to pass controlled parameters directly into a convert function to trigger a buffer overflow in Convert.c\r\nhttps://pillow.readthedocs.io/en/stable/releasenotes/8.3.0.html#buffer-overflow\r\nhttps://pillow.readthedocs.io/en/stable/releasenotes/index.html",
        "cve": "CVE-2021-34552",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pillow",
        "advisory": "Pillow 9.0.0 ensures JpegImagePlugin stops at the end of a truncated file to avoid Denial of Service attacks.\r\nhttps://github.com/python-pillow/Pillow/pull/5921\r\nhttps://github.com/advisories/GHSA-4fx9-vc88-q2xc",
        "cve": "PVE-2022-44524",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pillow",
        "advisory": "Pillow 9.0.0 excludes carriage return in PDF regex to help prevent ReDoS.\r\nhttps://github.com/python-pillow/Pillow/pull/5912\r\nhttps://github.com/python-pillow/Pillow/commit/43b800d933c996226e4d7df00c33fcbe46d97363",
        "cve": "PVE-2021-44525",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pillow",
        "advisory": "Pillow 9.0.1 includes a fix for CVE-2022-22817: PIL.ImageMath.eval in Pillow before 9.0.0 allows evaluation of arbitrary expressions, such as ones that use the Python exec method. A first patch was issued for version 9.0.0 but it did not prevent builtins available to lambda expressions.\r\nhttps://pillow.readthedocs.io/en/stable/releasenotes/9.0.1.html#security",
        "cve": "CVE-2022-22817",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pillow",
        "advisory": "Pillow from 5.2.0 and before 8.3.2 is vulnerable to Regular Expression Denial of Service (ReDoS) via the getrgb function.\r\nhttps://github.com/python-pillow/Pillow/commit/9e08eb8f78fdfd2f476e1b20b7cf38683754866b\r\nhttps://pillow.readthedocs.io/en/stable/releasenotes/8.3.2.html",
        "cve": "CVE-2021-23437",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pillow-simd",
        "advisory": "Pillow-simd 2.3.1 includes a fix for CVE-2014-1932: The (1) load_djpeg function in JpegImagePlugin.py, (2) Ghostscript function in EpsImagePlugin.py, (3) load function in IptcImagePlugin.py, and (4) _copy function in Image.py in Python Image Library (PIL) 1.1.7 and earlier and Pillow before 2.3.1 do not properly create temporary files, which allow local users to overwrite arbitrary files and obtain sensitive information via a symlink attack on the temporary file.",
        "cve": "CVE-2014-1932",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pillow-simd",
        "advisory": "Pillow-simd 2.3.1 includes a fix for CVE-2014-1933: The (1) JpegImagePlugin.py and (2) EpsImagePlugin.py scripts in Python Image Library (PIL) 1.1.7 and earlier and Pillow before 2.3.1 uses the names of temporary files on the command line, which makes it easier for local users to conduct symlink attacks by listing the processes.",
        "cve": "CVE-2014-1933",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pillow-simd",
        "advisory": "Buffer overflow in the ImagingPcdDecode function in PcdDecode.c in Pillow before 3.1.1 and Python Imaging Library (PIL) 1.1.7 and earlier allows remote attackers to cause a denial of service (crash) via a crafted PhotoCD file.",
        "cve": "CVE-2016-2533",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pip",
        "advisory": "Pip 1.4 includes a security fix related to certificate DNS wildcard matching.\r\nhttps://github.com/python/cpython/issues/62180",
        "cve": "CVE-2013-2099",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pip",
        "advisory": "The mirroring support (-M, --use-mirrors) in Python Pip before 1.5 uses insecure DNS querying and authenticity checks which allows attackers to perform man-in-the-middle attacks. See CVE-2013-5123.",
        "cve": "CVE-2013-5123",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pip",
        "advisory": "A flaw was found in python-pip in the way it handled Unicode separators in git references. A remote attacker could possibly use this issue to install a different revision on a repository. The highest threat from this vulnerability is to data integrity.",
        "cve": "CVE-2021-3572",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pkgcore",
        "advisory": "pkgcore 0.4.7.12 includes a security fix; force cwd to something controlled for ebuild env.  This blocks an attack detailed in glsa 200810-02; namely that an ebuild invoking python -c (which looks in cwd for modules to load) allows for an attacker to slip something in.",
        "cve": "PVE-2021-25962",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pkgutil",
        "advisory": "Pkgutil is a typosquatting package. It shows a malicious behavior, for example, it may leak your sensitive data and/or gain unauthorized persistence in your system.\r\nhttps://www.zdnet.com/article/twelve-malicious-python-libraries-found-and-removed-from-pypi/",
        "cve": "PVE-2022-45418",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "planet",
        "advisory": "Planet 2.0.1 fixes a security issue where a secret file was being created with read access for other users on the machine.\r\nhttps://github.com/planetlabs/planet-client-python/commit/d71415a83119c5e89d7b80d5f940d162376ee3b7\r\nhttps://github.com/planetlabs/planet-client-python/security/advisories/GHSA-j5fj-rfh6-qj85",
        "cve": "CVE-2023-32303",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "planetmint-driver",
        "advisory": "Planetmint-driver 0.18.3 updates its dependency 'tornado' to version '6.3.2' to include a security fix.\r\nhttps://github.com/planetmint/planetmint-driver-python/commit/b492f3fd61f8514e82b1c0f06d64dfc21dc762d6",
        "cve": "CVE-2023-28370",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "planetmint-driver",
        "advisory": "Planetmint-driver 0.18.3 updates its dependency 'requests' to version '2.31.0' to include a security fix.\r\nhttps://github.com/planetmint/planetmint-driver-python/commit/050332d4c4121b304af1309e95c484cc9ec71947",
        "cve": "CVE-2023-32681",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "planetmint-driver-python",
        "advisory": "Planetmint-driver 0.18.3 updates its dependency 'requests' to version '2.31.0' to include a security fix.\r\nhttps://github.com/planetmint/planetmint-driver-python/commit/050332d4c4121b304af1309e95c484cc9ec71947",
        "cve": "CVE-2023-32681",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "planetmint-driver-python",
        "advisory": "Planetmint-driver 0.18.3 updates its dependency 'tornado' to version '6.3.2' to include a security fix.\r\nhttps://github.com/planetmint/planetmint-driver-python/commit/b492f3fd61f8514e82b1c0f06d64dfc21dc762d6",
        "cve": "CVE-2023-28370",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "planetmint-driver-python",
        "advisory": "Planetmint-driver-python 0.5.2 updates its dependency 'cryptogtaphy' to include a security fix.",
        "cve": "CVE-2018-10903",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "plexapi",
        "advisory": "Plexapi 4.3.0 includes a fix for a Race Condition vulnerability.\r\nhttps://github.com/pkkid/python-plexapi/pull/625",
        "cve": "PVE-2023-60087",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "plone",
        "advisory": "Plone 4.2.3 and 4.3b1 include a fix for CVE-2012-5485: registerConfiglet.py in Plone before 4.2.3 and 4.3 before beta 1 allows remote attackers to execute Python code via unspecified vectors, related to the admin interface.",
        "cve": "CVE-2012-5485",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "plone",
        "advisory": "Plone 4.2.3 and 4.3b1 include a fix for CVE-2012-5487: The sandbox whitelisting function (allowmodule.py) in Plone before 4.2.3 and 4.3 before beta 1 allows remote authenticated users with certain privileges to bypass the Python sandbox restriction and execute arbitrary Python code via vectors related to importing.",
        "cve": "CVE-2012-5487",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "plone",
        "advisory": "Plone 4.2.3 and 4.3b1 include a fix for CVE-2012-5488: Python_scripts.py in Plone before 4.2.3 and 4.3 before beta 1 allows remote attackers to execute Python code via a crafted URL, related to createObject.",
        "cve": "CVE-2012-5488",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "plone",
        "advisory": "gtbn.py in Plone before 4.2.3 and 4.3 before beta 1 allows remote authenticated users with certain permissions to bypass the Python sandbox and execute arbitrary Python code via unspecified vectors.",
        "cve": "CVE-2012-5493",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "plone",
        "advisory": "Cross-site scripting (XSS) vulnerability in python_scripts.py in Plone before 4.2.3 and 4.3 before beta 1 allows remote attackers to inject arbitrary web script or HTML via unspecified vectors, related to \"{u,}translate.\"",
        "cve": "CVE-2012-5494",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "plone",
        "advisory": "Plone 4.2.3 and 4.3b1 include a fix for CVE-2012-5495: python_scripts.py in Plone before 4.2.3 and 4.3 before beta 1 allows remote attackers to execute Python code via a crafted URL, related to \"go_back.\"",
        "cve": "CVE-2012-5495",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "plone",
        "advisory": "Plone 4.2.3 and 4.3b1 include a fix for CVE-2012-5499: python_scripts.py in Plone before 4.2.3 and 4.3 before beta 1 allows remote attackers to cause a denial of service (memory consumption) via a large value, related to formatColumns.",
        "cve": "CVE-2012-5499",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "plone",
        "advisory": "Plone 4.2.3 and 4.3b1 include a fix for CVE-2012-5506: python_scripts.py in Plone before 4.2.3 and 4.3 before beta 1 allows remote attackers to cause a denial of service (infinite loop) via an RSS feed request for a folder the user does not have permission to access.",
        "cve": "CVE-2012-5506",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "plone",
        "advisory": "Plone through 5.2.4 allows remote authenticated managers to perform disk I/O via crafted keyword arguments to the ReStructuredText transform in a Python script.",
        "cve": "CVE-2021-33509",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "plone",
        "advisory": "Unspecified vulnerability in Zope 2.12.x and 2.13.x, as used in Plone 4.0.x through 4.0.9, 4.1, and 4.2 through 4.2a2, allows remote attackers to execute arbitrary commands via vectors related to the p_ class in OFS/misc_.py and the use of Python modules.",
        "cve": "CVE-2011-3587",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "plone",
        "advisory": "Plone 4.x through 4.3.11 and 5.x through 5.0.6 allow remote attackers to bypass a sandbox protection mechanism and obtain sensitive information by leveraging the Python string format method.",
        "cve": "CVE-2017-5524",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "plone",
        "advisory": "Accessing private content via str.format in through-the-web templates and scripts in Plone 2.5-5.1rc1. This improves an earlier hotfix. Since the format method was introduced in Python 2.6, this part of the hotfix is only relevant for Plone 4 and 5.\r\nhttps://plone.org/security/hotfix/20171128/sandbox-escape",
        "cve": "CVE-2017-1000483",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "plone",
        "advisory": "Chameleon (five.pt) in Plone 5.0rc1 through 5.1a1 allows remote authenticated users to bypass Restricted Python by leveraging permissions to create or edit templates.",
        "cve": "CVE-2016-4043",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "plone-app-linkintegrity",
        "advisory": "Plone-app-linkintegrity 1.0.2 includes a fix for CVE-2007-5741: Plone 2.5 through 2.5.4 and 3.0 through 3.0.2 allows remote attackers to execute arbitrary Python code via network data containing pickled objects for the (1) statusmessages or (2) linkintegrity module, which the module unpickles and executes.\r\nhttps://github.com/plone/plone.app.linkintegrity/commit/4be49548c4f1046a8204030f26a603c29f38d9dd",
        "cve": "CVE-2007-5741",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pmpo",
        "advisory": "Pmpo is a malicious package, typosquatting.\r\nhttps://blog.sonatype.com/trojanized-pypi-package-imitates-a-popular-python-server-library",
        "cve": "PVE-2022-47820",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "poetry",
        "advisory": "Poetry 1.1.9 includes a fix for CVE-2022-36070: To handle dependencies that come from a Git repository, Poetry executes various commands, e.g. 'git config'. These commands are being executed using the executable\u2019s name and not its absolute path. This can lead to the execution of untrusted code due to the way Windows resolves executable names to paths. Unlike Linux-based operating systems, Windows searches for the executable in the current directory first and looks in the paths that are defined in the 'PATH' environment variable afterward. This vulnerability can lead to Arbitrary Code Execution, which would lead to the takeover of the system. If a developer is exploited, the attacker could steal credentials or persist their access. If the exploit happens on a server, the attackers could use their access to attack other internal systems. Since this vulnerability requires a fair amount of user interaction, it is not as dangerous as a remotely exploitable one. However, it still puts developers at risk when dealing with untrusted files in a way they think is safe. The victim could also not protect themself by vetting any Git or Poetry config files that might be present in the directory, because the behavior is undocumented.\r\nhttps://github.com/python-poetry/poetry/security/advisories/GHSA-j4j9-7hg9-97g6",
        "cve": "CVE-2022-36070",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "poetry",
        "advisory": "Poetry 1.1.9 includes a fix for CVE-2022-36069: When handling dependencies that come from a Git repository instead of a registry, Poetry uses various commands, such as 'git clone'. These commands are constructed using user input (e.g. the repository URL). When building the commands, Poetry correctly avoids Command Injection vulnerabilities by passing an array of arguments instead of a command string. However, there is the possibility that a user input starts with a dash ('-') and is therefore treated as an optional argument instead of a positional one. This can lead to Code Execution because some of the commands have options that can be leveraged to run arbitrary executables. If a developer is exploited, the attacker could steal credentials or persist their access. If the exploit happens on a server, the attackers could use their access to attack other internal systems. Since this vulnerability requires a fair amount of user interaction, it is not as dangerous as a remotely exploitable one. However, it still puts developers at risk when dealing with untrusted files in a way they think is safe, because the exploit still works when the victim tries to make sure nothing can happen, e.g. by vetting any Git or Poetry config files that might be present in the directory.\r\nhttps://github.com/python-poetry/poetry/security/advisories/GHSA-9xgj-fcgf-x6mw",
        "cve": "CVE-2022-36069",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "poetry",
        "advisory": "Poetry 1.1.10 includes a fix for CVE-2022-26184: Poetry v1.1.9 and below was discovered to contain an untrusted search path which causes the application to behave in unexpected ways when users execute Poetry commands in a directory containing malicious content. This vulnerability occurs when the application is ran on Windows OS.\r\nhttps://github.com/python-poetry/poetry-core/pull/205/commits/fa9cb6f358ae840885c700f954317f34838caba7",
        "cve": "CVE-2022-26184",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "polylatlib",
        "advisory": "Polylatlib version 1.0.2 updates its required Python version to ^3.9, moving from the previously required ^3.8, in response to the security issue CVE-2019-17514.\r\nhttps://github.com/RexGreenway/PolyLatLib/commit/ca181eca306b1d6c1ad3d6a87fa94878ab52a43b",
        "cve": "CVE-2019-17514",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "power-grid-model",
        "advisory": "Power-grid-model 1.2.50 addresses a critical security vulnerability linked to the use of regular expressions for parsing node references. It could have led to an exponential increase in computational complexity, potentially exposing the system to Denial of Service (DoS) attacks. The update discontinues the use of regex for node reference parsing and replaces it with Python functions, ensuring uniformity and readability throughout the codebase. This change significantly reduces the risk of ReDoS attacks and enhances the overall security of the system.\r\nhttps://github.com/PowerGridModel/power-grid-model-io/pull/201",
        "cve": "PVE-2024-63525",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pptest",
        "advisory": "Pptest is a malicious package, typosquatting.  It steals Discord access tokens, passwords, and even stage dependency confusion attacks.\r\nhttps://thehackernews.com/2021/11/11-malicious-pypi-python-libraries.html",
        "cve": "PVE-2022-45456",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "prefect",
        "advisory": "Prefect version 2.15.0 updates its bundled starlette to mitigate a vulnerability found in python-multipart.\r\nhttps://github.com/PrefectHQ/prefect/pull/11956/commits/bb016fc65e9af0898f3d05872245c3cbe63f5c39#diff-687ab6611127b5455724a2a1c3d8faf0128af1a57cd14427007584c4028cfa4d",
        "cve": "PVE-2024-65363",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "priority",
        "advisory": "Priority 1.2.0 includes a fix for CVE-2016-6580: A HTTP/2 implementation built using any version of the python priority library prior to version 1.2.0 could be targeted by a malicious peer by having that peer assign priority information for every possible HTTP/2 stream ID. The priority tree would happily continue to store the priority information for each stream, and would therefore allocate unbounded amounts of memory. Attempting to actually use a tree like this would also cause extremely high CPU usage to maintain the tree.",
        "cve": "CVE-2016-6580",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "prisma",
        "advisory": "Prisma 0.7.1 (Python client) includes by default Prisma 3.13.0 binaries. They include a NPM dependency (undici), which has known vulnerabilities.\r\nhttps://github.com/RobertCraigie/prisma-client-py/blob/main/src/prisma/_config.py#L22\r\nhttps://github.com/prisma/prisma/commit/6146d3df111e6c33353bae2d8005387f197017fd",
        "cve": "CVE-2022-32210",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "products-atcontenttypes",
        "advisory": "Products.ATContentTypes are the core content types for Plone 2.1 - 4.3. Versions of Plone that are dependent on Products.ATContentTypes prior to version 3.0.6 are vulnerable to reflected cross site scripting and open redirect when an attacker can get a compromised version of the image_view_fullscreen page in a cache, for example in Varnish. The technique is known as cache poisoning. Any later visitor can get redirected when clicking on a link on this page. Usually only anonymous users are affected, but this depends on the user's cache settings. Version 3.0.6 of Products.ATContentTypes has been released with a fix. This version works on Plone 5.2, Python 2 only. As a workaround, make sure the image_view_fullscreen page is not stored in the cache. More information about the vulnerability and cvmitigation measures is available in the GitHub Security Advisory.",
        "cve": "CVE-2022-23599",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "products-cmfplone",
        "advisory": "Products.ATContentTypes are the core content types for Plone 2.1 - 4.3. Versions of Plone that are dependent on Products.ATContentTypes prior to version 3.0.6 are vulnerable to reflected cross site scripting and open redirect when an attacker can get a compromised version of the image_view_fullscreen page in a cache, for example in Varnish. The technique is known as cache poisoning. Any later visitor can get redirected when clicking on a link on this page. Usually only anonymous users are affected, but this depends on the user's cache settings. Version 3.0.6 of Products.ATContentTypes has been released with a fix. This version works on Plone 5.2, Python 2 only. As a workaround, make sure the image_view_fullscreen page is not stored in the cache. More information about the vulnerability and cvmitigation measures is available in the GitHub Security Advisory.",
        "cve": "CVE-2022-23599",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "products.cmfcore",
        "advisory": "Products.CMFCore 3.2 includes a fix for a denial of service vulnerability: The use of Python's marshal module to handle unchecked input in a public method on PortalFolder objects can lead to an unauthenticated denial of service and a crash situation.\r\nhttps://github.com/zopefoundation/Products.CMFCore/security/advisories/GHSA-4hpj-8rhv-9x87\r\nhttps://github.com/zopefoundation/Products.CMFCore/commit/40f03f43a60f28ca9485c8ef429efef729be54e5",
        "cve": "CVE-2023-36814",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "prompt-toolkit",
        "advisory": "Prompt-toolkit 3.0.13 fixes a race condition in `ThreadedHistory` which could lead to a deadlock. \r\nhttps://github.com/prompt-toolkit/python-prompt-toolkit/commit/99092a8c6d4b411645ac4b84d504e5226e7eebb8#diff-48c0ff10dc3990285d19b3f54e6bfec763089ba1229dc6f9e88463a1046adad7R163",
        "cve": "PVE-2023-62817",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "protobuf",
        "advisory": "Protobuf 3.18.3, 3.19.5, 3.20.2 and 4.21.6 include a fix for CVE-2022-1941: A parsing vulnerability for the MessageSet type in the ProtocolBuffers versions prior to and including 3.16.1, 3.17.3, 3.18.2, 3.19.4, 3.20.1 and 3.21.5 for protobuf-cpp, and versions prior to and including 3.16.1, 3.17.3, 3.18.2, 3.19.4, 3.20.1 and 4.21.5 for protobuf-python can lead to out of memory failures. A specially crafted message with multiple key-value per elements creates parsing issues, and can lead to a Denial of Service against services receiving unsanitized input.\r\nhttps://github.com/protocolbuffers/protobuf/security/advisories/GHSA-8gq9-2x98-w8hf",
        "cve": "CVE-2022-1941",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "prowler",
        "advisory": "Prowler 3.9.0 updates its dependency 'gitpython' to include a fix for a Remote Code Execution vulnerability.\r\nhttps://github.com/prowler-cloud/prowler/pull/2720",
        "cve": "CVE-2023-40267",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "prowler-cloud",
        "advisory": "Prowler-cloud 3.0.2 updates its dependency 'GitPython' to v3.1.30 to include a security fix.",
        "cve": "CVE-2022-24439",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "prowler-cloud",
        "advisory": "Prowler-cloud 3.9.0 updates its dependency 'gitpython' to include a fix for a Remote Code Execution vulnerability.\r\nhttps://github.com/prowler-cloud/prowler/pull/2720",
        "cve": "CVE-2023-40267",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "psutil",
        "advisory": "psutil (aka python-psutil) through 5.6.5 can have a double free. This occurs because of refcount mishandling within a while or for loop that converts system data into a Python object. See CVE-2019-18874.",
        "cve": "CVE-2019-18874",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ptpython",
        "advisory": "Ptpython 3.0.17 fixes race condition during retrieval of signatures.\r\nhttps://github.com/prompt-toolkit/ptpython/commit/7d116e84909d13832935ab4132eabfe316d26b74",
        "cve": "PVE-2023-62830",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pulsar-client",
        "advisory": "Pulsar-client 2.7.5, 2.8.4, 2.9.3 and 2.10.2 include a fix for CVE-2022-33684: The Apache Pulsar C++ Client does not verify peer TLS certificates when making HTTPS calls for the OAuth2.0 Client Credential Flow, even when tlsAllowInsecureConnection is disabled via configuration. This vulnerability allows an attacker to perform a man in the middle attack and intercept and/or modify the GET request that is sent to the ClientCredentialFlow 'issuer url'. The intercepted credentials can be used to acquire authentication data from the OAuth2.0 server to then authenticate with an Apache Pulsar cluster. An attacker can only take advantage of this vulnerability by taking control of a machine 'between' the client and the server. The attacker must then actively manipulate traffic to perform the attack. Apache Pulsar Python Client wraps the C++ client, so it is also vulnerable in the same way. This issue affects Apache Pulsar C++ Client and Python Client versions 2.7.0 to 2.7.4; 2.8.0 to 2.8.3; 2.9.0 to 2.9.2; 2.10.0 to 2.10.1; 2.6.4 and earlier. Any users running affected versions of the C++ Client or the Python Client should rotate vulnerable OAuth2.0 credentials, including client_id and client_secret.",
        "cve": "CVE-2022-33684",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "py",
        "advisory": "Py 1.10.0 includes a fix for CVE-2020-29651: A denial of service via regular expression in the py.path.svnwc component of py (aka python-py) through 1.9.0 could be used by attackers to cause a compute-time denial of service attack by supplying malicious input to the blame functionality.",
        "cve": "CVE-2020-29651",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "py-bcrypt",
        "advisory": "The py-bcrypt module before 0.3 for Python does not properly handle concurrent memory access, which allows attackers to bypass authentication via multiple authentication requests, which trigger the password hash to be overwritten. See: CVE-2013-1895.",
        "cve": "CVE-2013-1895",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "py-geth",
        "advisory": "Py-geth 3.10.0 includes a fix for CVE-2007-4559: Directory traversal vulnerability in the (1) extract and (2) extractall functions in the tarfile module in Python allows user-assisted remote attackers to overwrite arbitrary files via a .. (dot dot) sequence in filenames in a TAR archive, a related issue to CVE-2001-1267.",
        "cve": "CVE-2007-4559",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "py-mini-racer",
        "advisory": "A heap overflow in Sqreen PyMiniRacer (aka Python Mini Racer) before 0.3.0 allows remote attackers to potentially exploit heap corruption.",
        "cve": "CVE-2020-25489",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "py-trello-api",
        "advisory": "Py-trello-api 0.4.2 introduces an optional PyOpenSSL import for versions of Python older than 2.7.9 and 3.2, aiming to address security concerns related to OpenSSL as highlighted by CVE-2023-6129.",
        "cve": "CVE-2023-6129",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "py2play",
        "advisory": "Py2Play allows remote attackers to execute arbitrary Python code via pickled objects, which Py2Play unpickles and executes.",
        "cve": "CVE-2005-2875",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "py42",
        "advisory": "Py42 drops support for Python versions 2.7 and 3.5, that no longer receive security updates.",
        "cve": "CVE-2021-23336",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "py42",
        "advisory": "Py42 drops support for Python versions 2.7 and 3.5, that no longer receive security updates.",
        "cve": "CVE-2020-27619",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "py42",
        "advisory": "Py42 1.17.0 drops support for Python versions 2.7 and 3.5, that no longer receive security updates.",
        "cve": "CVE-2021-3737",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "py42",
        "advisory": "Py42 1.17.0 drops support for Python versions 2.7 and 3.5, that no longer receive security updates.",
        "cve": "CVE-2019-20907",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "py42",
        "advisory": "Py42 drops support for Python versions 2.7 and 3.5, that no longer receive security updates.",
        "cve": "CVE-2021-3177",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "py7zr",
        "advisory": "Py7zr 0.20.1 includes a fix for CVE-2022-44900: A directory traversal vulnerability in the SevenZipFile.extractall() function of the python library py7zr v0.20.0 and earlier allows attackers to write arbitrary files via extracting a crafted 7z file.",
        "cve": "CVE-2022-44900",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pyanyapi",
        "advisory": "An exploitable vulnerability exists in the YAML parsing functionality in the YAMLParser method in Interfaces.py in PyAnyAPI before 0.6.1. A YAML parser can execute arbitrary Python commands resulting in command execution because load is used where safe_load should have been used. An attacker can insert Python into loaded YAML to trigger this vulnerability.",
        "cve": "CVE-2017-16616",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pyarrow",
        "advisory": "While investigating UBSAN errors in https://github.com/apache/arrow/pull/5365 it was discovered Apache Arrow versions 0.12.0 to 0.14.1 left memory Array data uninitialized when reading RLE null data from parquet. This affected the C++, Python, Ruby and R implementations. The uninitialized memory could potentially be shared if are transmitted over the wire (for instance with Flight) or persisted in the streaming IPC and file formats.",
        "cve": "CVE-2019-12410",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pyarrow",
        "advisory": "It was discovered that the C++ implementation (which underlies the R, Python and Ruby implementations) of Apache Arrow 0.14.0 to 0.14.1 had a uninitialized memory bug when building arrays with null values in some cases. This can lead to uninitialized memory being unintentionally shared if Arrow Arrays are transmitted over the wire (for instance with Flight) or persisted in the streaming IPC and file formats.",
        "cve": "CVE-2019-12408",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pybluemonday",
        "advisory": "Pybluemonday 0.0.8 includes a fix for CVE-2021-42576: The bluemonday sanitizer before 1.0.16 for Go, and before 0.0.8 for Python (in pybluemonday), does not properly enforce policies associated with the SELECT, STYLE, and OPTION elements.\r\nhttps://docs.google.com/document/d/11SoX296sMS0XoQiQbpxc5pNxSdbJKDJkm5BDv0zrX50",
        "cve": "CVE-2021-42576",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pyconau-funtimes",
        "advisory": "Pyconau-funtimes is a typosquatting package. It shows a malicious behavior, for example, it may leak your sensitive data and/or gain unauthorized persistence in your system.\r\nhttps://www.zdnet.com/article/twelve-malicious-python-libraries-found-and-removed-from-pypi/",
        "cve": "PVE-2022-45423",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pycrypto",
        "advisory": "Heap-based buffer overflow in the ALGnew function in block_templace.c in Python Cryptography Toolkit (aka pycrypto) 2.6.1 allows remote attackers to execute arbitrary code as demonstrated by a crafted iv parameter to cryptmsg.py.",
        "cve": "CVE-2013-7459",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pydrive2",
        "advisory": "PyDrive2, a Python wrapper for Google Drive API V2, has a vulnerability (CVE-2023-49297) due to unsafe YAML deserialization, which could lead to arbitrary code execution from a malicious YAML file in the same directory or loaded via LoadSettingsFile. The issue was fixed in release version 1.16.2 (commit c57355dc). Users should update to this version or later.\r\nhttps://github.com/iterative/PyDrive2/commit/c57355dc2033ad90b7050d681b2c3ba548ff0004",
        "cve": "CVE-2023-49297",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pyenv",
        "advisory": "Pyenv 1.2.24 throughout 2.3.2 allows local users to gain privileges via a .python-version file in the current working directory. An attacker can craft a Python version string in .python-version to execute shims under their control. Shims are executables that pass a command along to a specific version of pyenv. The version string is used to construct the path to the command, and there is no validation of whether the version specified is a valid version. Thus, relative path traversal can occur.",
        "cve": "CVE-2022-35861",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pyesasky",
        "advisory": "The pyesasky for python, as distributed on PyPI, included a code-execution backdoor inserted by a third party. The affected versions are 1.2.0-1.4.2.\r\nhttps://github.com/esdc-esac-esa-int/pyesasky/issues/39",
        "cve": "CVE-2022-30885",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pyforce",
        "advisory": "Pyforce 1.8.0 fixes an external entitiy injection (XXE) vulnerability.\r\nhttps://github.com/salesforce-python-client/pyforce/pull/35",
        "cve": "CVE-2013-1665",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pyforce",
        "advisory": "Pyforce 1.8.0 fixes an external entitiy injection (XXE) vulnerability.\r\nhttps://github.com/salesforce-python-client/pyforce/pull/35",
        "cve": "CVE-2013-1664",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pygments",
        "advisory": "Pygments 2.15.0 includes a fix for CVE-2022-40896: The regular expressions used when parsing Smithy, SQL/SQL+Jinja, and Java properties files were discovered to be vulnerable. As a result, pygmentizing a maliciously-crafted file of these kinds would have resulted in high resources consumption or crashing of the application.\r\nhttps://pyup.io/posts/pyup-discovers-redos-vulnerabilities-in-top-python-packages-part-2",
        "cve": "CVE-2022-40896",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pygresql",
        "advisory": "The pygresql module 3.8.1 and 4.0 for Python does not properly support the PQescapeStringConn function, which might allow remote attackers to leverage escaping issues involving multibyte character encodings.",
        "cve": "CVE-2009-2940",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pyinstaller",
        "advisory": "PyInstaller bundles a Python application and all its dependencies into a single package. A PyInstaller built application, elevated as a privileged process, may be tricked by an unprivileged attacker into deleting files the unprivileged user does not otherwise have access to. A user is affected if **all** the following are satisfied: 1. The user runs an application containing either `matplotlib` or `win32com`. 2. The application is ran as administrator (or at least a user with higher privileges than the attacker). 3. The user's temporary directory is not locked to that specific user (most likely due to `TMP`/`TEMP` environment variables pointing to an unprotected, arbitrary, non default location). Either: A. The attacker is able to very carefully time the replacement of a temporary file with a symlink. This switch must occur exactly between `shutil.rmtree()`'s builtin symlink check and the deletion itself B: The application was built with Python 3.7.x or earlier which has no protection against Directory Junctions links. The vulnerability has been addressed in PR #7827 which corresponds to `pyinstaller >= 5.13.1`. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
        "cve": "CVE-2023-49797",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pykarotz",
        "advisory": "Pykarotz is used together with Electronic Arts Karotz Smart Rabbit, which allows Python module hijacking. See: <https://www.exploit-db.com/exploits/27285>.",
        "cve": "CVE-2013-4867",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pylint",
        "advisory": "Pylint 2.5.0 no longer allows ``python -m pylint ...`` to import user code. Previously, it added the current working directory as the first element of ``sys.path``. This opened up a potential security hole where ``pylint`` would import user level code as long as that code resided in modules having the same name as stdlib or pylint's own modules.",
        "cve": "PVE-2021-38224",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pyload",
        "advisory": "pyload is an open-source Download Manager written in pure Python. An authenticated user can change the download folder and upload a crafted template to the specified folder lead to remote code execution. There is no fix available at the time of publication. See CVE-2024-32880.",
        "cve": "CVE-2024-32880",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pyload-ng",
        "advisory": "pyLoad is an open-source Download Manager written in pure Python. There is an open redirect vulnerability due to incorrect validation of input values when redirecting users after login. pyLoad is validating URLs via the `get_redirect_url` function when redirecting users at login. This vulnerability has been patched with commit fe94451. See CVE-2024-24808.",
        "cve": "CVE-2024-24808",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pymatgen",
        "advisory": "Pymatgen (Python Materials Genomics) is an open-source Python library for materials analysis. A critical security vulnerability exists in the `JonesFaithfulTransformation.from_transformation_str()` method within the `pymatgen` library before version 2024.2.20. This method insecurely utilizes `eval()` for processing input, enabling the execution of arbitrary code when parsing untrusted input. Version 2024.2.20 fixes this issue. See CVE-2024-23346.",
        "cve": "CVE-2024-23346",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pyminiracer",
        "advisory": "A heap overflow in Sqreen PyMiniRacer (aka Python Mini Racer) before 0.3.0 allows remote attackers to potentially exploit heap corruption. See: CVE-2020-25489.",
        "cve": "CVE-2020-25489",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pymongo",
        "advisory": "Pymongo 2.5.2 includes a fix for CVE-2013-2132: null pointer when decoding invalid DBRef.\r\nhttps://github.com/mongodb/mongo-python-driver/commit/a060c15ef87e0f0e72974c7c0e57fe811bbd06a2",
        "cve": "CVE-2013-2132",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pyorient",
        "advisory": "A vulnerability has been detected in pyorient before 1.4.7, an Orientdb driver for Python, where SQL Injection allows an attacker to alter the WHERE clause in a query, leading to unexpected results.\r\nhttps://github.com/mogui/pyorient/pull/172/commits/f1840d6deff8e97ffd4d7a0b3842fee09e8911f7",
        "cve": "PVE-2024-99768",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pypdfium2",
        "advisory": "Pypdfium2 3.9.0 includes a fix for CVE-2007-4559: Directory traversal vulnerability in the (1) extract and (2) extractall functions in the tarfile module in Python allows user-assisted remote attackers to overwrite arbitrary files via a .. (dot dot) sequence in filenames in a TAR archive, a related issue to CVE-2001-1267.",
        "cve": "CVE-2007-4559",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pyramid",
        "advisory": "Pyramid 1.6a1 prevents timing attacks in 'AuthTktCookieHelper' and 'SignedCookieSessionFactory' classes by using the stdlib's 'hmac.compare_digest' if it is available (such as in Python 2.7.7+ and 3.3+). \r\nhttps://github.com/Pylons/pyramid/pull/1457",
        "cve": "PVE-2021-32203",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pyramid",
        "advisory": "Pyramid 2.0.2 includes a fix for CVE-2023-40587: A path traversal vulnerability in Pyramid versions 2.0.0 and 2.0.1 impacts users of Python 3.11 that are using a Pyramid static view with a full filesystem path and have a 'index.html' file that is located exactly one directory above the location of the static view's file system path. No further path traversal exists, and the only file that could be disclosed accidentally is 'index.html'. Pyramid version 2.0.2 rejects any path that contains a null-byte out of caution. While valid in directory/file names, we would strongly consider it a mistake to use null-bytes in naming files/directories. Secondly, Python 3.11, and 3.12 has fixed the underlying issue in 'os.path.normpath' to no longer truncate on the first '0x00' found, returning the behavior to pre-3.11 Python. Fixes will be available in:Python 3.12.0rc2 and 3.11.5. Some workarounds are available. Use a version of Python 3 that is not affected, downgrade to Python 3.10 series temporarily, or wait until Python 3.11.5 is released and upgrade to the latest version of Python 3.11 series.\r\nhttps://github.com/Pylons/pyramid/security/advisories/GHSA-j8g2-6fc7-q8f8",
        "cve": "CVE-2023-40587",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pysaml2",
        "advisory": "PySAML2 is a pure python implementation of SAML Version 2 Standard. PySAML2 before 6.5.0 has an improper verification of cryptographic signature vulnerability. Users of pysaml2 that use the default CryptoBackendXmlSec1 backend and need to verify signed SAML documents are impacted. PySAML2 does not ensure that a signed SAML document is correctly signed. The default CryptoBackendXmlSec1 backend is using the xmlsec1 binary to verify the signature of signed SAML documents, but by default xmlsec1 accepts any type of key found within the given document. xmlsec1 needs to be configured explicitly to only use only _x509 certificates_ for the verification process of the SAML document signature. This is fixed in PySAML2 6.5.0. See CVE-2021-21239.",
        "cve": "CVE-2021-21239",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pysaml2",
        "advisory": "PySAML2 is a pure python implementation of SAML Version 2 Standard. PySAML2 before 6.5.0 has an improper verification of cryptographic signature vulnerability. All users of pysaml2 that need to validate signed SAML documents are impacted. The vulnerability is a variant of XML Signature wrapping because it did not validate the SAML document against an XML schema. This allowed invalid XML documents to be processed and such a document can trick pysaml2 with a wrapped signature. This is fixed in PySAML2 6.5.0. See CVE-2021-21238.",
        "cve": "CVE-2021-21238",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pysaml2",
        "advisory": "Python package pysaml2 version 4.4.0 and earlier reuses the initialization vector across encryptions in the IDP server, resulting in weak encryption of data.",
        "cve": "CVE-2017-1000246",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pysaml2",
        "advisory": "pysaml2 version 4.4.0 and older accept any password when run with python optimizations enabled. This allows attackers to log in as any user without knowing their password.",
        "cve": "CVE-2017-1000433",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pysaml2",
        "advisory": "Pysaml2 below 2.1.0 leads to information exposure in specific versions.\r\nhttps://github.com/IdentityPython/pysaml2/commit/58400479eeae275f15676f1a66767c95704809cc",
        "cve": "PVE-2024-99770",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pysaml2",
        "advisory": "Pysaml2 before 2.3.0 is susceptible to an Access Restriction Bypass vulnerability. This flaw undermines security controls, potentially allowing unauthorized access to restricted resources. Users should review their system configurations and follow recommended security practices to mitigate exposure to this vulnerability.\r\nhttps://github.com/IdentityPython/pysaml2/commit/d21ac9a70bce0535a2f3cc3a621452ad9d0681d6",
        "cve": "PVE-2024-99769",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pyspark",
        "advisory": "Prior to Spark 2.3.3, in certain situations Spark would write user data to local disk unencrypted, even if spark.io.encryption.enabled=true. This includes cached blocks that are fetched to disk (controlled by spark.maxRemoteBlockSizeFetchToMem); in SparkR, using parallelize; in Pyspark, using broadcast and parallelize; and use of python udfs.",
        "cve": "CVE-2019-10099",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pysteps",
        "advisory": "Pysteps 1.6.0 drops support for Python 3.6 as it arrived to end-of-life and don't receive security updates anymore.",
        "cve": "CVE-2020-10735",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pyston",
        "advisory": "Pyston 2.3.1 includes a fix coming from Python 3.8.12 release: multiple CRLF injection vulnerabilities in smtplib.",
        "cve": "PVE-2021-42379",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pyston",
        "advisory": "Pyston 2.3.1 includes a fix coming from Python 3.8.12 release: IP addresses access control bypass.",
        "cve": "CVE-2021-29921",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pytagora",
        "advisory": "Pytagora is a malicious package, typosquatting. \"The aforementioned package could be abused to become an entry point for more sophisticated threats, enabling the attacker to execute remote code on the target machine, amass system information, plunder credit card information and passwords auto-saved in Chrome and Edge browsers, and even steal Discord authentication tokens to impersonate the victim\".\r\nhttps://thehackernews.com/2021/07/several-malicious-typosquatted-python.html",
        "cve": "PVE-2022-45446",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pytagora2",
        "advisory": "Pytagora2 is a malicious package, typosquatting. \"The aforementioned package could be abused to become an entry point for more sophisticated threats, enabling the attacker to execute remote code on the target machine, amass system information, plunder credit card information and passwords auto-saved in Chrome and Edge browsers, and even steal Discord authentication tokens to impersonate the victim\".\r\nhttps://thehackernews.com/2021/07/several-malicious-typosquatted-python.html",
        "cve": "PVE-2022-45447",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pytest-httpserver",
        "advisory": "Pytest-httpserver 1.0.2 drops support for Python 3.4 and 3.5. These versions arrived to EOL and don't receive security fixes anymore.",
        "cve": "CVE-2019-20907",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pytest-httpserver",
        "advisory": "Pytest-httpserver 1.0.2 drops support for Python 3.4 and 3.5. These versions arrived to EOL and don't receive security fixes anymore.",
        "cve": "CVE-2021-3177",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pytest-httpserver",
        "advisory": "Pytest-httpserver 1.0.2 drops support for Python 3.4 and 3.5. These versions arrived to EOL and don't receive security fixes anymore.",
        "cve": "CVE-2021-3737",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pytest-httpserver",
        "advisory": "Pytest-httpserver 1.0.2 drops support for Python 3.4 and 3.5. These versions arrived to EOL and don't receive security fixes anymore.",
        "cve": "CVE-2020-27619",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "A vulnerability classified as problematic was found in Python 2.7.13. This vulnerability affects unknown code of the component pgAdmin4. The manipulation leads to uncontrolled search path. The attack can be initiated remotely. The exploit has been disclosed to the public and may be used.",
        "cve": "CVE-2017-20052",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "In libexpat before 2.2.8, crafted XML input could fool the parser into changing from DTD parsing to document parsing too early; a consecutive call to XML_GetCurrentLineNumber (or XML_GetCurrentColumnNumber) then resulted in a heap-based buffer over-read.",
        "cve": "CVE-2019-15903",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 2.4.6 and 2.5.2 include a fix for CVE-2008-5031: Multiple integer overflows in Python 2.2.3 through 2.5.1, and 2.6, allow context-dependent attackers to have an unknown impact via a large integer value in the tabsize argument to the expandtabs method, as implemented by (1) the string_expandtabs function in Objects/stringobject.c and (2) the unicode_expandtabs function in Objects/unicodeobject.c.  NOTE: this vulnerability reportedly exists because of an incomplete fix for CVE-2008-2315.\r\nhttps://bugs.python.org/issue4469",
        "cve": "CVE-2008-5031",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Integer signedness error in the zlib extension module in Python 2.5.2 and earlier allows remote attackers to execute arbitrary code via a negative signed integer, which triggers insufficient memory allocation and a buffer overflow.",
        "cve": "CVE-2008-1721",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python 2.5.2 and earlier allows context-dependent attackers to execute arbitrary code via multiple vectors that cause a negative size value to be provided to the PyString_FromStringAndSize function, which allocates less memory than expected when assert() is disabled and triggers a buffer overflow.",
        "cve": "CVE-2008-1887",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Multiple integer overflows in imageop.c in Python before 2.5.3 allow context-dependent attackers to cause a denial of service (crash) and possibly execute arbitrary code via crafted images that trigger heap-based buffer overflows.  NOTE: this issue is due to an incomplete fix for CVE-2007-4965.",
        "cve": "CVE-2008-1679",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 2.5.5, 2.6.4 and 3.1 include a fix for CVE-2011-1015: The is_cgi method in CGIHTTPServer.py in the CGIHTTPServer module in Python 2.5, 2.6, and 3.0 allows remote attackers to read script source code via an HTTP GET request that lacks a / (slash) character at the beginning of the URI.\r\nhttps://bugs.python.org/issue2254",
        "cve": "CVE-2011-1015",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Integer overflow in rgbimgmodule.c in the rgbimg module in Python 2.5 allows remote attackers to have an unspecified impact via a large image that triggers a buffer overflow. NOTE: this vulnerability exists because of an incomplete fix for CVE-2008-3143.12.",
        "cve": "CVE-2010-1449",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Multiple buffer overflows in the RLE decoder in the rgbimg module in Python 2.5 allow remote attackers to have an unspecified impact via an image file containing crafted data that triggers improper processing within the (1) longimagedata or (2) expandrow function. See CVE-2010-1450.",
        "cve": "CVE-2010-1450",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Buffer underflow in the rgbimg module in Python 2.5 allows remote attackers to cause a denial of service (application crash) via a large ZSIZE value in a black-and-white (aka B/W) RGB image that triggers an invalid pointer dereference. See CVE-2009-4134.",
        "cve": "CVE-2009-4134",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Buffer overflow in the repr function in Python 2.3 through 2.6 before 20060822 allows context-dependent attackers to cause a denial of service and possibly execute arbitrary code via crafted wide character UTF-32/UCS-4 strings to certain scripts.",
        "cve": "CVE-2006-4980",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 2.6.6, 2.7.0, 3.1.3 and 3.2.0 include a fix for CVE-2010-1634: Multiple integer overflows in audioop.c in the audioop module in Python 2.6, 2.7, 3.1, and 3.2 allow context-dependent attackers to cause a denial of service (application crash) via a large fragment, as demonstrated by a call to audioop.lin2lin with a long string in the first argument, leading to a buffer overflow.  NOTE: this vulnerability exists because of an incorrect fix for CVE-2008-3143.\r\nhttps://bugs.python.org/issue8674",
        "cve": "CVE-2010-1634",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 2.6.6, 2.7.0, 3.1.3 and 3.2.0 include a fix for CVE-2010-1634: The audioop module in Python 2.7 and 3.2 does not verify the relationships between size arguments and byte string lengths, which allows context-dependent attackers to cause a denial of service (memory corruption and application crash) via crafted arguments, as demonstrated by a call to audioop.reverse with a one-byte string, a different vulnerability than CVE-2010-1634.\r\nhttps://bugs.python.org/issue7673",
        "cve": "CVE-2010-2089",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python version 2.6.7, 2.7.2, 3.1.4 and 3.2.0 include a fix for CVE-2010-3493: Multiple race conditions in smtpd.py in the smtpd module in Python 2.6, 2.7, 3.1, and 3.2 alpha allow remote attackers to cause a denial of service (daemon outage) by establishing and then immediately closing a TCP connection, leading to the accept function having an unexpected return value of None, an unexpected value of None for the address, or an ECONNABORTED, EAGAIN, or EWOULDBLOCK error, or the getpeername function having an ENOTCONN error, a related issue to CVE-2010-3492.\r\nhttps://bugs.python.org/issue9129",
        "cve": "CVE-2010-3493",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 2.6.9, 2.7.7, 3.2.6, 3.3.6 and 3.4.1 include a fix for CVE-2013-4238: The ssl.match_hostname function in the SSL module in Python 2.6 through 3.4 does not properly handle a '\\0' character in a domain name in the Subject Alternative Name field of an X.509 certificate, which allows man-in-the-middle attackers to spoof arbitrary SSL servers via a crafted certificate issued by a legitimate Certification Authority, a related issue to CVE-2009-2408.\r\nhttps://bugs.python.org/issue18709",
        "cve": "CVE-2013-4238",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 2.7.10, 3.3.7 and 3.4.4 include a fix for CVE-2016-5699: CRLF injection vulnerability in the HTTPConnection.putheader function in urllib2 and urllib in CPython (aka Python) before 2.7.10 and 3.x before 3.4.4 allows remote attackers to inject arbitrary HTTP headers via CRLF sequences in a URL.\r\nhttps://bugs.python.org/issue22928",
        "cve": "CVE-2016-5699",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "The smtplib library in CPython (aka Python) before 2.7.12, 3.x before 3.4.5, and 3.5.x before 3.5.2 does not return an error when StartTLS fails, which might allow man-in-the-middle attackers to bypass the TLS protections by leveraging a network position between the client and the registry to block the StartTLS command, aka a \"StartTLS stripping attack.\" See CVE-2016-0772.",
        "cve": "CVE-2016-0772",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Integer overflow in the get_data function in zipimport.c in CPython (aka Python) before 2.7.12, 3.x before 3.4.5, and 3.5.x before 3.5.2 allows remote attackers to have unspecified impact via a negative data size value, which triggers a heap-based buffer overflow. See CVE-2016-5636.",
        "cve": "CVE-2016-5636",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 2.7.13, 3.3.7, 3.4.6 and 3.5.3 fix an arbitrary code execution in gettext.c2py().\r\nhttps://python-security.readthedocs.io/vuln/gettext-c2py.html",
        "cve": "PVE-2021-42408",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 2.7.13, 3.3.7, 3.4.6 and 3.5.3 include a fix for CVE-2016-1000110: The CGIHandler class in Python does not protect against the HTTP_PROXY variable name clash in a CGI script, which could allow a remote attacker to redirect HTTP requests.\r\nhttps://bugs.python.org/issue27568",
        "cve": "CVE-2016-1000110",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 2.7.14, 3.3.7, 3.4.7, 3.5.4 and 3.6.2 update modules/expat to libexpat 2.2.1 to include security fixes.\r\nhttps://bugs.python.org/issue29591",
        "cve": "CVE-2016-0718",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 2.7.14, 3.3.7, 3.4.7, 3.5.4 and 3.6.2 update modules/expat to libexpat 2.2.1 to include security fixes.\r\nhttps://bugs.python.org/issue29591",
        "cve": "CVE-2016-4472",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 2.7.14, 3.3.7, 3.4.7, 3.5.4 and 3.6.2 update modules/expat to libexpat 2.2.1 to include security fixes.\r\nhttps://bugs.python.org/issue29591",
        "cve": "CVE-2012-6702",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 2.7.14, 3.3.7, 3.4.7, 3.5.4 and 3.6.2 update modules/expat to libexpat 2.2.1 to include security fixes.\r\nhttps://bugs.python.org/issue29591",
        "cve": "CVE-2016-5300",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 2.7.14, 3.3.7, 3.4.7, 3.5.4 and 3.6.3 fix ftplib.FTP.putline() to throw an error for a illegal command, as a remote attacker could attack by using newline characters. This issue is similar to CVE-2017-3533.\r\nhttps://bugs.python.org/issue30119",
        "cve": "PVE-2021-42403",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 2.7.14, 3.4.7 and 3.5.4 update its dependency 'zlib' to v1.2.11 to include security fixes.\r\nhttps://bugs.python.org/issue29169",
        "cve": "CVE-2016-9840",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 2.7.14, 3.4.7 and 3.5.4 update its dependency 'zlib' to v1.2.11 to include security fixes.\r\nhttps://bugs.python.org/issue29169",
        "cve": "CVE-2016-9842",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 2.7.14, 3.4.7 and 3.5.4 update its dependency 'zlib' to v1.2.11 to include security fixes.\r\nhttps://bugs.python.org/issue29169",
        "cve": "CVE-2016-9841",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 2.7.14, 3.4.8 and 3.5.5 include a fix for CVE-2017-1000158: Integer overflow in the PyString_DecodeEscape function in stringobject.c, resulting in heap-based buffer overflow (and possible arbitrary code execution).\r\nhttps://bugs.python.org/issue30657",
        "cve": "CVE-2017-1000158",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python 2.7.15 includes a fix for CVE-2018-1000030: Python 2.7.14 is vulnerable to a Heap-Buffer-Overflow as well as a Heap-Use-After-Free. Python versions prior to 2.7.14 may also be vulnerable and it appears that Python 2.7.17 and prior may also be vulnerable however this has not been confirmed. The vulnerability lies when multiply threads are handling large amounts of data. In both cases there is essentially a race condition that occurs. For the Heap-Buffer-Overflow, Thread 2 is creating the size for a buffer, but Thread1 is already writing to the buffer without knowing how much to write. So when a large amount of data is being processed, it is very easy to cause memory corruption using a Heap-Buffer-Overflow. As for the Use-After-Free, Thread3->Malloc->Thread1->Free's->Thread2-Re-uses-Free'd Memory. The PSRT has stated that this is not a security vulnerability due to the fact that the attacker must be able to run code, however in some situations, such as function as a service, this vulnerability can potentially be used by an attacker to violate a trust boundary, as such the DWF feels this issue deserves a CVE.\r\nhttps://bugs.python.org/issue31530",
        "cve": "CVE-2018-1000030",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python before versions 2.7.15, 3.4.9, 3.5.6, 3.6.5 and 3.7.0 is vulnerable to catastrophic backtracking in the difflib.IS_LINE_JUNK method. An attacker could use this flaw to cause denial of service. See CVE-2018-1061.\r\nhttps://bugs.python.org/issue32981",
        "cve": "CVE-2018-1061",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python before versions 2.7.15, 3.4.9, 3.5.6rc1, 3.6.5rc1 and 3.7.0 is vulnerable to catastrophic backtracking in pop3lib's apop() method. An attacker could use this flaw to cause denial of service.",
        "cve": "CVE-2018-1060",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python 2.7.16 includes a fix for CVE-2018-1000802: Python Software Foundation Python (CPython) version 2.7 contains a CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection') vulnerability in shutil module (make_archive function) that can result in Denial of service or Information gain via injection of arbitrary files on the system or entire drive. This attack appear to be exploitable via Passage of unfiltered user input to the function.\r\nhttps://bugs.python.org/issue34540",
        "cve": "CVE-2018-1000802",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 2.7.16, 3.4.10, 3.5.7, 3.6.7 and 3.7.1 include a fix for CVE-2018-14647: Python's elementtree C accelerator failed to initialise Expat's hash salt during initialization. This could make it easy to conduct denial of service attacks against Expat by constructing an XML document that would cause pathological hash collisions in Expat's internal data structures, consuming large amounts CPU and RAM.\r\nhttps://bugs.python.org/issue34623",
        "cve": "CVE-2018-14647",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 2.7.16, 3.4.10, 3.5.7, 3.6.7, 3.7.1 and 3.8.0 include a fix for CVE-2019-17514: Library/glob.html in the Python 2 and 3 documentation before 2016 has potentially misleading information about whether sorting occurs, as demonstrated by irreproducible cancer-research results. NOTE: the effects of this documentation cross application domains, and thus it is likely that security-relevant code elsewhere is affected. This issue is not a Python implementation bug, and there are no reports that NMR researchers were specifically relying on library/glob.html. In other words, because the older documentation stated \"finds all the pathnames matching a specified pattern according to the rules used by the Unix shell,\" one might have incorrectly inferred that the sorting that occurs in a Unix shell also occurred for glob.glob. There is a workaround in newer versions of Willoughby nmr-data_compilation-p2.py and nmr-data_compilation-p3.py, which call sort() directly.\r\nhttps://bugs.python.org/issue33275\r\nhttps://www.vice.com/en/article/zmjwda/a-code-glitch-may-have-caused-errors-in-more-than-100-published-studies",
        "cve": "CVE-2019-17514",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 2.7.16, 3.4.10, 3.5.7, 3.6.9 and 3.7.3 include a fix for CVE-2019-5010: An exploitable denial-of-service vulnerability exists in the X509 certificate parser of Python.org Python 2.7.11 / 3.6.6. A specially crafted X509 certificate can cause a NULL pointer dereference, resulting in a denial of service. An attacker can initiate or accept TLS connections using crafted certificates to trigger this vulnerability.\r\nhttps://bugs.python.org/issue35746",
        "cve": "CVE-2019-5010",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 2.7.16, 3.4.10, 3.5.7, 3.6.9 and 3.7.3 include a fix for CVE-2018-20852: http.cookiejar.DefaultPolicy.domain_return_ok in Lib/http/cookiejar.py in Python before 3.7.3 does not correctly validate the domain: it can be tricked into sending existing cookies to the wrong server. An attacker may abuse this flaw by using a server with a hostname that has another valid hostname as a suffix (e.g., pythonicexample.com to steal cookies for example.com). When a program uses http.cookiejar.DefaultPolicy and tries to do an HTTP connection to an attacker-controlled server, existing cookies can be leaked to the attacker.\r\nhttps://bugs.python.org/issue35121",
        "cve": "CVE-2018-20852",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 2.7.17, 3.5.10, 3.6.10 and 3.7.5 include a fix for CVE-2019-16935: The documentation XML-RPC server in Python through 2.7.16, 3.x through 3.6.9, and 3.7.x through 3.7.4 has XSS via the server_title field. This occurs in Lib/DocXMLRPCServer.py in Python 2.x, and in Lib/xmlrpc/server.py in Python 3.x. If set_server_title is called with untrusted input, arbitrary JavaScript can be delivered to clients that visit the http URL for this server.\r\nhttps://bugs.python.org/issue38243",
        "cve": "CVE-2019-16935",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 2.7.17, 3.5.7, 3.6.9 and 3.7.3 include a fix for CVE-2019-9636: Python 2.7.x through 2.7.16 and 3.x through 3.7.2 is affected by Improper Handling of Unicode Encoding (with an incorrect netloc) during NFKC normalization. The impact is information disclosure (credentials, cookies, etc. that are cached against a given hostname). The affected components are urllib.parse.urlsplit and urllib.parse.urlparse. The attack vector is a specially crafted URL that could be incorrectly parsed to locate cookies or authentication data and send that information to a different host.\r\nhttps://bugs.python.org/issue36216",
        "cve": "CVE-2019-9636",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 3.8.0b2, 3.7.4, 3.6.10, 3.5.8 and 2.7.17 include a fix for CVE-2019-10160: A security regression of CVE-2019-9636 was discovered in python since commit d537ab0ff9767ef024f26246899728f0116b1ec3 affecting versions 2.7, 3.5, 3.6, 3.7 and from v3.8.0a4 through v3.8.0b1, which still allows an attacker to exploit CVE-2019-9636 by abusing the user and password parts of a URL. When an application parses user-supplied URLs to store cookies, authentication credentials, or other kind of information, it is possible for an attacker to provide specially crafted URLs to make the application locate host-related information (e.g. cookies, authentication data) and send them to a different host than where it should, unlike if the URLs had been correctly parsed. The result of an attack may vary based on the application.\r\nhttps://bugs.python.org/issue36742",
        "cve": "CVE-2019-10160",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 2.7.17, 3.5.8, 3.6.10 and 3.7.5 include a fix for CVE-2019-9948: Urllib in Python 2.x through 2.7.16 supports the local_file: scheme, which makes it easier for remote attackers to bypass protection mechanisms that blacklist file: URIs, as demonstrated by triggering a urllib.urlopen('local_file:///etc/passwd') call. The issue was also found to be present in Python 3 when using URLopener class.\r\nhttps://bugs.python.org/issue35907",
        "cve": "CVE-2019-9948",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 2.7.17, 3.5.8, 3.6.9 and 3.7.4 include a fix for CVE-2019-9947: An issue was discovered in urllib2 in Python 2.x through 2.7.16 and urllib in Python 3.x through 3.7.3. CRLF injection is possible if the attacker controls a url parameter, as demonstrated by the first argument to urllib.request.urlopen with \\r\\n (specifically in the path component of a URL that lacks a ? character) followed by an HTTP header or a Redis command. This is similar to the CVE-2019-9740 query string issue.\r\nhttps://bugs.python.org/issue35906",
        "cve": "CVE-2019-9947",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "An issue was discovered in urllib2 in Python 2.x through 2.7.16 and urllib in Python 3.x through 3.7.3. CRLF injection is possible if the attacker controls a url parameter, as demonstrated by the first argument to urllib.request.urlopen with \\r\\n (specifically in the query string after a ? character) followed by an HTTP header or a Redis command.",
        "cve": "CVE-2019-9740",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "BZ2_decompress in decompress.c in bzip2 through 1.0.6 has an out-of-bounds write when there are many selectors.",
        "cve": "CVE-2019-12900",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python 2.7.18rc1, 3.5.10rc1, 3.6.11rc1, 3.7.8rc1 and 3.8.3rc1 include a fix for CVE-2019-18348: An issue was discovered in urllib2 in Python 2.x through 2.7.17 and urllib in Python 3.x through 3.8.0. CRLF injection is possible if the attacker controls a url parameter, as demonstrated by the first argument to urllib.request.urlopen with \\r\\n (specifically in the host component of a URL) followed by an HTTP header. This is similar to the CVE-2019-9740 query string issue and the CVE-2019-9947 path string issue. (This is not exploitable when glibc has CVE-2016-10739 fixed.).\r\nhttps://bugs.python.org/issue30458#msg347282",
        "cve": "CVE-2019-18348",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "The urllib and urllib2 modules in Python 2.x before 2.7.2 and 3.x before 3.2.1 process Location headers that specify redirection to file: URLs, which makes it easier for remote attackers to obtain sensitive information or cause a denial of service (resource consumption) via a crafted URL, as demonstrated by the file:///etc/passwd and file:///dev/zero URLs. See CVE-2011-1521.",
        "cve": "CVE-2011-1521",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 2.7.3 and 3.1.5 include a fix for CVE-2010-3492: The asyncore module in Python before 3.2 does not properly handle unsuccessful calls to the accept function, and does not have accompanying documentation describing how daemon applications should handle unsuccessful calls to the accept function, which makes it easier for remote attackers to conduct denial of service attacks that terminate these applications via network connections.\r\nhttps://bugs.python.org/issue6706",
        "cve": "CVE-2010-3492",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 2.7.7, 3.1.5, 3.2.6, 3.3.4 and 3.4.0 include a fix for CVE-2014-1912: Buffer overflow in the socket.recvfrom_into function in Modules/socketmodule.c in Python 2.5 before 2.7.7, 3.x before 3.3.4, and 3.4.x before 3.4rc1 allows remote attackers to execute arbitrary code via a crafted string.\r\nhttps://bugs.python.org/issue20246",
        "cve": "CVE-2014-1912",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 2.7.7, 3.2.6, 3.3.6, 3.4.2 and 3.5.0 include a fix for CVE-2014-4616: Array index error in the scanstring function in the _json module in Python 2.7 through 3.5 and simplejson before 2.6.1 allows context-dependent attackers to read arbitrary process memory via a negative index value in the idx argument to the raw_decode function.\r\nhttps://bugs.python.org/issue21529",
        "cve": "CVE-2014-4616",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python 2.7.8 includes a fix for CVE-2014-7185: Integer overflow in bufferobject.c in Python before 2.7.8 allows context-dependent attackers to obtain sensitive information from process memory via a large size and offset in a \"buffer\" function.\r\nhttps://bugs.python.org/issue21831",
        "cve": "CVE-2014-7185",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 2.7.8, 3.2.6, 3.3.6 and 3.4.2 include a fix for CVE-2014-4650: The CGIHTTPServer module in Python 2.7.5 and 3.3.4 (possible in others too) does not properly handle URLs in which URL encoding is used for path separators, which allows remote attackers to read script source code or conduct directory traversal attacks and execute unintended code via a crafted character sequence, as demonstrated by a %2f separator.\r\nhttps://bugs.python.org/issue21766",
        "cve": "CVE-2014-4650",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 2.7.9, 3.2.6, 3.3.7 and 3.4.3 include a fix for CVE-2013-1752: Smtplib and ftplib unlimited read. This issue was initially assigned a CVE but it was rejected due to the patch not working for some OSes (now fixed).\r\nhttps://bugs.python.org/issue16039\r\nhttps://python-security.readthedocs.io/vuln/ftplib-unlimited-read.html\r\nhttps://python-security.readthedocs.io/vuln/smtplib-unlimited-read.html",
        "cve": "CVE-2013-1752",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python version 2.7.9 and 3.3.3 include a fix for CVE-2013-7440: The ssl.match_hostname function in CPython (aka Python) before 2.7.9 and 3.x before 3.3.3 does not properly handle wildcards in hostnames, which might allow man-in-the-middle attackers to spoof servers via a crafted certificate.\r\nhttps://bugs.python.org/issue17997",
        "cve": "CVE-2013-7440",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 2.7.9 and 3.4.3 include a fix for CVE-2014-9365: The HTTP clients in the (1) httplib, (2) urllib, (3) urllib2, and (4) xmlrpclib libraries in CPython (aka Python) 2.x before 2.7.9 and 3.x before 3.4.3, when accessing an HTTPS URL, do not (a) check the certificate against a trust store or verify that the server hostname matches a domain name in the subject's (b) Common Name or (c) subjectAltName field of the X.509 certificate, which allows man-in-the-middle attackers to spoof SSL servers via an arbitrary valid certificate.\r\nhttps://bugs.python.org/issue22417",
        "cve": "CVE-2014-9365",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 2.7.9, 3.2.6, 3.3.6 and 3.4.3 include a fix for CVE-2013-1753: The gzip_decode function in the xmlrpc client library in Python 3.4 and earlier allows remote attackers to cause a denial of service (memory consumption) via a crafted HTTP request.\r\nhttps://bugs.python.org/issue16043",
        "cve": "CVE-2013-1753",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "A defect was discovered in the Python \u201cssl\u201d module where there is a memory race condition with the ssl.SSLContext methods \u201ccert_store_stats()\u201d and \u201cget_ca_certs()\u201d. The race condition can be triggered if the methods are called at the same time as certificates are loaded into the SSLContext, such as during the TLS handshake with a certificate directory configured.",
        "cve": "CVE-2024-0397",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "An issue was found in CPython 3.12.0 `subprocess` module on POSIX platforms. The issue was fixed in CPython 3.12.1 and does not affect other stable releases. When using the `extra_groups=` parameter with an empty list as a value (ie `extra_groups=[]`) the logic regressed to not call `setgroups(0, NULL)` before calling `exec()`, thus not dropping the original processes' groups before starting the new process. There is no issue when the parameter isn't used or when any value is used besides an empty list. This issue only impacts CPython processes run with sufficient privilege to make the `setgroups` system call (typically `root`).",
        "cve": "CVE-2023-6507",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python version 3.4 includes a fix for CVE-2013-7040: Python before 3.4 only uses the last eight bits of the prefix to randomize hash values, which causes it to compute hash values without restricting the ability to trigger hash collisions predictably and makes it easier for context-dependent attackers to cause a denial of service (CPU consumption) via crafted input to an application that maintains a hash table.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2012-1150.\r\nhttps://bugs.python.org/issue14621",
        "cve": "CVE-2013-7040",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 3.9.0a6, 3.8.4, 3.7.8, 3.6.11, and 3.5.10 disallow CR or LF in email.headerregistry.Address arguments to guard against header injection attacks.\r\nhttps://bugs.python.org/issue39073",
        "cve": "PVE-2021-42386",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python 3.5.10, 3.6.12, 3.7.9, 3.8.4 and 3.9.0 include a fix for CVE-2020-15523: A Trojan horse python3.dll might be used in cases where CPython is embedded in a native application. This occurs because python3X.dll may use an invalid search path for python3.dll loading (after Py_SetPath has been used). \r\n#NOTE: This vulnerability affects only users of Windows.\r\n#NOTE2: this issue CANNOT occur when using python.exe from a standard (non-embedded) Python installation on Windows.\r\nhttps://python-security.readthedocs.io/vuln/pysetpath-python-dll-path.html",
        "cve": "CVE-2020-15523",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "http.client in Python 3.x before 3.5.10, 3.6.x before 3.6.12, 3.7.x before 3.7.9, and 3.8.x before 3.8.5 allows CRLF injection if the attacker controls the HTTP request method, as demonstrated by inserting CR and LF control characters in the first argument of HTTPConnection.request.",
        "cve": "CVE-2020-26116",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "In Lib/tarfile.py in Python through 3.8.3, an attacker is able to craft a TAR archive leading to an infinite loop when opened by tarfile.open, because _proc_pax lacks header validation.",
        "cve": "CVE-2019-20907",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 3.5.10rc1, 3.6.12, 3.7.9, 3.8.4 and 3.9.0b4 include a fix for CVE-2020-14422: Lib/ipaddress.py in Python through 3.8.3 improperly computes hash values in the IPv4Interface and IPv6Interface classes, which might allow a remote attacker to cause a denial of service if an application is affected by the performance of a dictionary containing IPv4Interface or IPv6Interface objects, and this attacker can cause many dictionary entries to be created.\r\nhttps://bugs.python.org/issue41004",
        "cve": "CVE-2020-14422",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 3.6.10, 3.7.5 and 3.8.0 fix an infinite loop with short maximum line lengths in EmailPolicy.\r\nhttps://bugs.python.org/issue36564",
        "cve": "PVE-2021-42390",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 3.6.10, 3.7.6 and 3.8.1 fix loop.create_datagram_endpoint()'s usage of SO_REUSEADDR that allowed  by default multiple processes to bind the same port.\r\nhttps://bugs.python.org/issue37228",
        "cve": "PVE-2021-42387",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python 3.6.11, 3.7.7 and 3.8.2 include a fix for CVE-2022-48560: Use After Free vulnerability via heappushpop in heapq.\r\nhttps://bugs.python.org/issue39421",
        "cve": "CVE-2022-48560",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 3.6.13, 3.7.10, 3.8.7, 3.9.2 and 3.10.0a4 use CRYPTO_memcmp() for compare_digest to try harder to be constant-time.\r\nhttps://bugs.python.org/issue40791",
        "cve": "PVE-2021-42385",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 3.6.14, 3.7.11, 3.8.10, 3.9.5 and 3.10.0 include a fix for CVE-2021-3733: There's a flaw in urllib's AbstractBasicAuthHandler class. An attacker who controls a malicious HTTP server that an HTTP client (such as web browser) connects to, could trigger a Regular Expression Denial of Service (ReDOS) during an authentication request with a specially crafted payload that is sent by the server to the client.\r\nhttps://python-security.readthedocs.io/vuln/urllib-basic-auth-regex2.html",
        "cve": "CVE-2021-3733",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 3.10.0b1, 3.9.5, 3.8.11, 3.7.11 and 3.6.14 include a fix for CVE-2022-0391: A flaw was found in Python, specifically within the urllib.parse module. The issue involves how the urlparse method does not sanitize input and allows characters like '\\r' and '\\n' in the URL path. This flaw allows an attacker to input a crafted URL, leading to injection attacks.\r\nhttps://bugs.python.org/issue43882",
        "cve": "CVE-2022-0391",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "A flaw was found in python. An improperly handled HTTP response in the HTTP client code of python may allow a remote attacker, who controls the HTTP server, to make the client script enter an infinite loop, consuming CPU time. The highest threat from this vulnerability is to system availability.",
        "cve": "CVE-2021-3737",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python 3.6.14, 3.7.11, 3.8.9 and 3.9.3 include a fix for CVE-2021-4189: The issue is how the FTP client trusts the host from the PASV response by default. This flaw allows an attacker to set up a malicious FTP server that can trick FTP clients into connecting back to a given IP address and port. This vulnerability could lead to FTP client scanning ports, which otherwise would not have been possible.\r\nhttps://python-security.readthedocs.io/vuln/ftplib-pasv.html",
        "cve": "CVE-2021-4189",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 3.6.15, 3.7.12, 3.8.12, 3.9.7 and 3.10.0rc2 fix multiple CRLF injection vulnerabilities in smtplib.\r\nhttps://bugs.python.org/issue43124",
        "cve": "PVE-2021-42379",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "An integer overflow during the parsing of XML using the Expat library. This vulnerability affects Firefox < 50.",
        "cve": "CVE-2016-9063",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 3.6.7 and 3.7.1 disable external entities in SAX parser to patch XML vulnerabilities.\r\nhttps://bugs.python.org/issue17239",
        "cve": "PVE-2021-42398",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python 3.7.13, 3.8.13, 3.9.11 and 3.10.3 update bundled libexpat version to v2.4.6 to include security fixes.",
        "cve": "CVE-2022-25314",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python 3.7.13, 3.8.13, 3.9.11 and 3.10.3 update bundled libexpat version to v2.4.6 to include security fixes.",
        "cve": "CVE-2022-22822",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python 3.7.13, 3.8.13, 3.9.11 and 3.10.3 update bundled libexpat version to v2.4.6 to include security fixes.",
        "cve": "CVE-2022-22825",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python 3.7.13, 3.8.13, 3.9.11 and 3.10.3 update bundled libexpat version to v2.4.6 to include security fixes.",
        "cve": "CVE-2022-23852",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python 3.7.13, 3.8.13, 3.9.11 and 3.10.3 update bundled libexpat version to v2.4.6 to include security fixes.",
        "cve": "CVE-2022-22827",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python 3.7.13, 3.8.13, 3.9.11 and 3.10.3 update bundled libexpat version to v2.4.6 to include security fixes.",
        "cve": "CVE-2022-22826",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python 3.7.13, 3.8.13, 3.9.11 and 3.10.3 update bundled libexpat version to v2.4.6 to include security fixes.",
        "cve": "CVE-2022-22824",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python 3.7.13, 3.8.13, 3.9.11 and 3.10.3 update bundled libexpat version to v2.4.6 to include security fixes.",
        "cve": "CVE-2022-22823",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python 3.7.13, 3.8.13, 3.9.11 and 3.10.3 update bundled libexpat version to v2.4.6 to include security fixes.",
        "cve": "CVE-2021-46143",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python 3.7.13, 3.8.13, 3.9.11 and 3.10.3 update bundled libexpat version to v2.4.6 to include security fixes.",
        "cve": "CVE-2021-45960",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python 3.7.13, 3.8.13, 3.9.11 and 3.10.3 update bundled libexpat version to v2.4.6 to include security fixes.",
        "cve": "CVE-2022-25236",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python 3.7.13, 3.8.13, 3.9.11 and 3.10.3 update bundled libexpat version to v2.4.6 to include security fixes.",
        "cve": "CVE-2022-25313",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "In Python before 3.10.3 on Windows, local users can gain privileges because the search path is inadequately secured. The installer may allow a local attacker to add user-writable directories to the system search path. To exploit, an administrator must have installed Python for all users and enabled PATH entries. A non-administrative user can trigger a repair that incorrectly adds user-writable paths into PATH, enabling search-path hijacking of other users and system services. This affects Python (CPython) through 3.7.12, 3.8.x through 3.8.12, 3.9.x through 3.9.10, and 3.10.x through 3.10.2.",
        "cve": "CVE-2022-26488",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python 3.7.13, 3.8.13, 3.9.11 and 3.10.3 update bundled libexpat version to v2.4.6 to include security fixes.",
        "cve": "CVE-2022-25235",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python 3.7.13, 3.8.13, 3.9.11 and 3.10.3 update bundled libexpat version to v2.4.6 to include security fixes.",
        "cve": "CVE-2022-23990",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python 3.7.13, 3.8.13, 3.9.11 and 3.10.3 update bundled libexpat version to v2.4.6 to include security fixes.",
        "cve": "CVE-2022-25315",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python 3.7.14, 3.8.14, 3.9.14 and 3.10.6 include a fix for CVE-2021-28861: Python 3.x through 3.10 has an open redirection vulnerability in lib/http/server.py due to no protection against multiple (/) at the beginning of URI path which may lead to information disclosure. \r\nNOTE: this is disputed by a third party because the http.server.html documentation page states \"Warning: http.server is not recommended for production. It only implements basic security checks.\"",
        "cve": "CVE-2021-28861",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "A flaw was found in python. In algorithms with quadratic time complexity using non-binary bases, when using int(\"text\"), a system could take 50ms to parse an int string with 100,000 digits and 5s for 1,000,000 digits (float, decimal, int.from_bytes(), and int() for binary bases 2, 4, 8, 16, and 32 are not affected). The highest threat from this vulnerability is to system availability.",
        "cve": "CVE-2020-10735",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python 3.7.15, 3.8.15, 3.9.15 and 3.10.8 update bundled 'libexpat' version to v2.4.9 to include a security fix.",
        "cve": "CVE-2022-40674",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python 3.7.16, 3.8.16, 3.9.16 and 3.10.9 include a fix for CVE-2022-37454: Buffer overflow in the _sha3 module.\r\nhttps://python-security.readthedocs.io/vuln/sha3-buffer-overflow.html",
        "cve": "CVE-2022-37454",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python 3.11.1, 3.10.9, 3.9.16, 3.8.16, and 3.7.16 include a fix for CVE-2022-45061: An unnecessary quadratic algorithm exists in one path when processing some inputs to the IDNA (RFC 3490) decoder, such that a crafted, unreasonably long name being presented to the decoder could lead to a CPU denial of service. Hostnames are often supplied by remote servers that could be controlled by a malicious actor; in such a scenario, they could trigger excessive CPU consumption on the client attempting to make use of an attacker-supplied supposed hostname. For example, the attack payload could be placed in the Location header of an HTTP response with status code 302.\r\nhttps://github.com/python/cpython/issues/98433\r\nhttps://python-security.readthedocs.io/vuln/slow-idna-large-strings.html",
        "cve": "CVE-2022-45061",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Lib/zipfile.py in Python allows remote attackers to cause a denial of service (resource consumption) via a ZIP bomb.\r\nhttps://bugs.python.org/issue36260",
        "cve": "CVE-2019-9674",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "In difflib module, table header in output of difflib.HtmlDiff.make_table is not escaped and can be rendered as code in the browser, leading potentially to XSS.\r\nhttps://bugs.python.org/issue35603\r\nhttps://github.com/python/cpython/commit/44e36e80456dabaeb59c6e2a93e0c1322bfeb179",
        "cve": "PVE-2021-42393",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "The \u201cipaddress\u201d module contained incorrect information about whether certain IPv4 and IPv6 addresses were designated as \u201cglobally reachable\u201d or \u201cprivate\u201d. This affected the is_private and is_global properties of the ipaddress.IPv4Address, ipaddress.IPv4Network, ipaddress.IPv6Address, and ipaddress.IPv6Network classes, where values wouldn\u2019t be returned in accordance with the latest information from the IANA Special-Purpose Address Registries. CPython 3.12.4 and 3.13.0a6 contain updated information from these registries and thus have the intended behavior.",
        "cve": "CVE-2024-4032",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python 3.9.16, 3.10.9 and 3.11.0 include a fix for CVE-2022-42919: Python 3.9.x and 3.10.x through 3.10.8 on Linux allows local privilege escalation in a non-default configuration. The Python multiprocessing library, when used with the forkserver start method on Linux, allows pickles to be deserialized from any user in the same machine local network namespace, which in many system configurations means any user on the same machine. Pickles can execute arbitrary code. Thus, this allows for local user privilege escalation to the user that any forkserver process is running as. Setting multiprocessing.util.abstract_sockets_supported to False is a workaround. The forkserver start method for multiprocessing is not the default start method. This issue is Linux specific because only Linux supports abstract namespace sockets. CPython before 3.9 does not make use of Linux abstract namespace sockets by default. Support for users manually specifying an abstract namespace socket was added as a bugfix in 3.7.8 and 3.8.3, but users would need to make specific uncommon API calls in order to do that in CPython before 3.9.\r\nhttps://github.com/python/cpython/issues/97514",
        "cve": "CVE-2022-42919",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "os._execvpe from os.py in Python 2.2.1 and earlier creates temporary files with predictable names, which could allow local users to execute arbitrary code via a symlink attack.",
        "cve": "CVE-2002-1119",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Multiple buffer overflows in Python 2.5.2 and earlier on 32bit platforms allow context-dependent attackers to cause a denial of service (crash) or have unspecified other impact via a long string that leads to incorrect memory allocation during Unicode string processing, related to the unicode_resize function and the PyMem_RESIZE macro.",
        "cve": "CVE-2008-3142",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Multiple integer overflows in Python 2.5.2 and earlier allow context-dependent attackers to have an unknown impact via vectors related to the (1) stringobject, (2) unicodeobject, (3) bufferobject, (4) longobject, (5) tupleobject, (6) stropmodule, (7) gcmodule, and (8) mmapmodule modules.  NOTE: The expandtabs integer overflows in stringobject and unicodeobject in 2.5.2 are covered by CVE-2008-5031.",
        "cve": "CVE-2008-2315",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Multiple integer overflows in the PyOS_vsnprintf function in Python/mysnprintf.c in Python 2.5.2 and earlier allow context-dependent attackers to cause a denial of service (memory corruption) or have unspecified other impact via crafted input to string formatting operations.  NOTE: the handling of certain integer values is also affected by related integer underflows and an off-by-one error.",
        "cve": "CVE-2008-3144",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Multiple integer overflows in Python before 2.5.2 might allow context-dependent attackers to have an unknown impact via vectors related to (1) Include/pymem.h; (2) _csv.c, (3) _struct.c, (4) arraymodule.c, (5) audioop.c, (6) binascii.c, (7) cPickle.c, (8) cStringIO.c, (9) cjkcodecs/multibytecodec.c, (10) datetimemodule.c, (11) md5.c, (12) rgbimgmodule.c, and (13) stropmodule.c in Modules/; (14) bufferobject.c, (15) listobject.c, and (16) obmalloc.c in Objects/; (17) Parser/node.c; and (18) asdl.c, (19) ast.c, (20) bltinmodule.c, and (21) compile.c in Python/, as addressed by \"checks for integer overflows, contributed by Google.\"",
        "cve": "CVE-2008-3143",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Untrusted search path vulnerability in the PySys_SetArgv API function in Python 2.6 and earlier, and possibly later versions, prepends an empty string to sys.path when the argv[0] argument does not contain a path separator, which might allow local users to execute arbitrary code via a Trojan horse Python file in the current working directory.",
        "cve": "CVE-2008-5983",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "The MSI installer for Python through 2.7.16 on Windows defaults to the C:\\Python27 directory, which makes it easier for local users to deploy Trojan horse code: a privilege escalation vulnerability. This issue also affects old 3.x releases before 3.5.\r\nNOTE: the vendor's position is that it is the user's responsibility to ensure C:\\Python27 access control or choose a different directory, because backwards compatibility requires that C:\\Python27 remain the default for 2.7.x.",
        "cve": "CVE-2019-13404",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Untrusted search path vulnerability in python.exe in Python through 3.5.0 on Windows allows local users to gain privileges via a Trojan horse readline.pyd file in the current working directory.  NOTE: the vendor says \"It was determined that this is a longtime behavior of Python that cannot really be altered at this point.\"",
        "cve": "CVE-2015-5652",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Stack-based buffer overflow in the file_compress function in minigzip (Modules/zlib) in Python 2.5 allows context-dependent attackers to execute arbitrary code via a long file argument.",
        "cve": "CVE-2007-1657",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python 3.12.0a7, as downloaded from Github repository after commit 13f942ac16ef53d2c7add6f299eddcaf9ad0dda5, was discovered to contain a heap use-after-free via the function ascii_decode at /Objects/unicodeobject.c.\r\nhttps://github.com/python/cpython/issues/103824",
        "cve": "CVE-2023-33595",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python Software Foundation CPython version From 3.2 until 3.6.4 on Windows contains a Buffer Overflow vulnerability in os.symlink() function on Windows that can result in Arbitrary code execution, likely escalation of privilege. This attack appears to be exploitable via a python script that creates a symlink with an attacker controlled name or location. This vulnerability appears to have been fixed in 3.7.0 and 3.6.5.",
        "cve": "CVE-2018-1000117",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "This is a dummy vulnerability only.",
        "cve": "CVE-2023-0593",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "The e-mail module of Python 0 - 2.7.18, 3.x - 3.11 incorrectly parses e-mail addresses that contain a special character. This vulnerability allows attackers to send messages from e-mail addresses that would otherwise be rejected.\r\nhttps://github.com/python/cpython/issues/102988\r\nhttps://python-security.readthedocs.io/vuln/email-parseaddr-realname.html",
        "cve": "CVE-2023-27043",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Multiple integer overflows in imageop.c in the imageop module in Python 1.5.2 through 2.5.1 allow context-dependent attackers to break out of the Python VM and execute arbitrary code via large integer values in certain arguments to the crop function, leading to a buffer overflow, a different vulnerability than CVE-2007-4965 and CVE-2008-1679.",
        "cve": "CVE-2008-4864",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Multiple integer overflows in the imageop module in Python 2.5.1 and earlier allow context-dependent attackers to cause a denial of service (application crash) and possibly obtain sensitive information (memory contents) via crafted arguments to (1) the tovideo method, and unspecified other vectors related to (2) imageop.c, (3) rbgimgmodule.c, and other files, which trigger heap-based buffer overflows.",
        "cve": "CVE-2007-4965",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Integer overflow in _hashopenssl.c in the hashlib module in Python 2.5.2 and earlier might allow context-dependent attackers to defeat cryptographic digests, related to \"partial hashlib hashing of data exceeding 4GB.\"",
        "cve": "CVE-2008-2316",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "The SimpleXMLRPCServer library module in Python 2.2, 2.3 before 2.3.5, and 2.4, when used by XML-RPC servers that use the register_instance method to register an object without a _dispatch method, allows remote attackers to read or modify globals of the associated module, and possibly execute arbitrary code, via dotted attributes.",
        "cve": "CVE-2005-0089",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Buffer overflow in the getaddrinfo function in Python 2.2 before 2.2.2, when IPv6 support is disabled, allows remote attackers to execute arbitrary code via an IPv6 address that is obtained using DNS.",
        "cve": "CVE-2004-0150",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Stack-based buffer overflow in Python 2.4.2 and earlier, running on Linux 2.6.12.5 under gcc 4.0.3 with libc 2.3.5, allows local users to cause a \"stack overflow,\" and possibly gain privileges, by running a script from a current working directory that has a long name, related to the realpath function.  NOTE: this might not be a vulnerability. However, the fact that it appears in a programming language interpreter could mean that some applications are affected, although attack scenarios might be limited because the attacker might already need to cross privilege boundaries to cause an exploitable program to be placed in a directory with a long name; or, depending on the method that Python uses to determine the current working directory, setuid applications might be affected.",
        "cve": "CVE-2006-1542",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Off-by-one error in the PyLocale_strxfrm function in Modules/_localemodule.c for Python 2.4 and 2.5 causes an incorrect buffer size to be used for the strxfrm function, which allows context-dependent attackers to read portions of memory via unknown manipulations that trigger a buffer over-read due to missing null termination.",
        "cve": "CVE-2007-2052",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python 2.5.6c1, 2.6.7rc2, 2.7.2, 3.2.4 and 3.3.1 include a fix for CVE-2011-4940: The list_directory function in Lib/SimpleHTTPServer.py in SimpleHTTPServer in Python before 2.5.6c1, 2.6.x before 2.6.7 rc2, and 2.7.x before 2.7.2 does not place a charset parameter in the Content-Type HTTP header, which makes it easier for remote attackers to conduct cross-site scripting (XSS) attacks against Internet Explorer 7 via UTF-7 encoding.\r\nhttps://python-security.readthedocs.io/vuln/simplehttpserver-utf-7.html",
        "cve": "CVE-2011-4940",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "The XML parser (xmlparse.c) in expat before 2.1.0 computes hash values without restricting the ability to trigger hash collisions predictably, which allows context-dependent attackers to cause a denial of service (CPU consumption) via an XML file with many identifiers with the same value.",
        "cve": "CVE-2012-0876",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python 2.6 through 3.2 creates ~/.pypirc with world-readable permissions before changing them after data has been written, which introduces a race condition that allows local users to obtain a username and password by reading this file. See CVE-2011-4944.",
        "cve": "CVE-2011-4944",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python before 2.6.8, 2.7.x before 2.7.3, 3.x before 3.1.5, and 3.2.x before 3.2.3 computes hash values without restricting the ability to trigger hash collisions predictably, which allows context-dependent attackers to cause a denial of service (CPU consumption) via crafted input to an application that maintains a hash table. See CVE-2012-1150.",
        "cve": "CVE-2012-1150",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "SimpleXMLRPCServer.py in SimpleXMLRPCServer in Python before 2.6.8, 2.7.x before 2.7.3, 3.x before 3.1.5, and 3.2.x before 3.2.3 allows remote attackers to cause a denial of service (infinite loop and CPU consumption) via an XML-RPC POST request that contains a smaller amount of data than specified by the Content-Length header. See CVE-2012-0845.",
        "cve": "CVE-2012-0845",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Multiple integer overflows in the XML_GetBuffer function in Expat through 2.1.0, as used in Google Chrome before 44.0.2403.89 and other products, allow remote attackers to cause a denial of service (heap-based buffer overflow) or possibly have unspecified other impact via crafted XML data, a related issue to CVE-2015-2716.",
        "cve": "CVE-2015-1283",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "XML External Entity vulnerability in libexpat 2.2.0 and earlier (Expat XML Parser Library) allows attackers to put the parser in an infinite loop using a malformed external entity definition from an external DTD.",
        "cve": "CVE-2017-9233",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "OpenSSL before 0.9.8za, 1.0.0 before 1.0.0m, and 1.0.1 before 1.0.1h does not properly restrict processing of ChangeCipherSpec messages, which allows man-in-the-middle attackers to trigger use of a zero-length master key in certain OpenSSL-to-OpenSSL communications, and consequently hijack sessions or obtain sensitive information, via a crafted TLS handshake, aka the \"CCS Injection\" vulnerability.",
        "cve": "CVE-2014-0224",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python 3.3.4rc1 includes a fix for CVE-2013-7338: Python before 3.3.4 RC1 allows remote attackers to cause a denial of service (infinite loop and CPU consumption) via a file size value larger than the size of the zip file to the (1) ZipExtFile.read, (2) ZipExtFile.read(n), (3) ZipExtFile.readlines, (4) ZipFile.extract, or (5) ZipFile.extractall function.\r\nhttps://bugs.python.org/issue20078",
        "cve": "CVE-2013-7338",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 3.4.10, 3.5.7, 3.6.7 and 3.7.1 include a fix for CVE-2018-20406: Modules/_pickle.c in Python before 3.7.1 has an integer overflow via a large LONG_BINPUT value that is mishandled during a \"resize to twice the size\" attempt. This issue might cause memory exhaustion, but is only relevant if the pickle format is used for serializing tens or hundreds of gigabytes of data.\r\nhttps://bugs.python.org/issue34656",
        "cve": "CVE-2018-20406",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 2.7.17, 3.5.8, 3.6.10 and 3.7.5 include a fix for CVE-2019-16056: An issue was discovered in Python through 2.7.16, 3.x through 3.5.7, 3.6.x through 3.6.9, and 3.7.x through 3.7.4. The email module wrongly parses email addresses that contain multiple @ characters. An application that uses the email module and implements some kind of checks on the From/To headers of a message could be tricked into accepting an email address that should be denied. An attack may be the same as in CVE-2019-11340; however, this CVE applies to Python more generally.\r\nhttps://bugs.python.org/issue34155",
        "cve": "CVE-2019-16056",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python 3.6.13, 3.7.10, 3.8.7, 3.9.1 and 3.10.0a2 include a fix for CVE-2020-27619: In Python 3 through 3.9.0, the Lib/test/multibytecodec_support.py CJK codec tests call eval() on content retrieved via HTTP.\r\nhttps://python-security.readthedocs.io/vuln/cjk-codec-download-eval.html",
        "cve": "CVE-2020-27619",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "The utf-16 decoder in Python 3.1 through 3.3 does not update the aligned_end variable after calling the unicode_decode_call_errorhandler function, which allows remote attackers to obtain sensitive information (process memory) or cause a denial of service (memory corruption and crash) via unspecified vectors.",
        "cve": "CVE-2012-2135",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Use-after-free vulnerability in bzip2recover in bzip2 1.0.6 allows remote attackers to cause a denial of service (crash) via a crafted bzip2 file, related to block ends set to before the start of the block.",
        "cve": "CVE-2016-3189",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python 3.8.12, 3.9.5 and 3.10.0 include a fix for CVE-2021-29921: In Python before 3.9.5, the ipaddress library mishandles leading zero characters in the octets of an IP address string. This (in some situations) allows attackers to bypass access control that is based on IP addresses.\r\nhttps://python-security.readthedocs.io/vuln/ipaddress-ipv4-leading-zeros.html",
        "cve": "CVE-2021-29921",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python 3.7.17, 3.8.17, 3.9.17, 3.10.12 and 3.11.4 include a fix for CVE-2023-24329: An issue in the urllib.parse component of Python before 3.11.4 allows attackers to bypass blocklisting methods by supplying a URL that starts with blank characters.\r\nhttps://github.com/python/cpython/issues/102153\r\nhttps://pointernull.com/security/python-url-parse-problem.html",
        "cve": "CVE-2023-24329",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "An issue was found in the CPython `zipfile` module affecting versions 3.12.1, 3.11.7, 3.10.13, 3.9.18, and 3.8.18 and prior. The zipfile module is vulnerable to \u201cquoted-overlap\u201d zip-bombs which exploit the zip format to create a zip-bomb with a high compression ratio. The fixed versions of CPython makes the zipfile module reject zip archives which overlap entries in the archive.",
        "cve": "CVE-2024-0450",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "An issue was found in the CPython `tempfile.TemporaryDirectory` class affecting versions 3.12.1, 3.11.7, 3.10.13, 3.9.18, and 3.8.18 and prior. The tempfile.TemporaryDirectory class would dereference symlinks during cleanup of permissions-related errors. This means users which can run privileged programs are potentially able to modify permissions of files referenced by symlinks in some circumstances.",
        "cve": "CVE-2023-6597",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python 3.7.16, 3.8.16, 3.9.16, 3.10.6 and 3.11.0b4 include a fix for CVE-2015-20107: The mailcap module does not add escape characters into commands discovered in the system mailcap file. This may allow attackers to inject shell commands into applications that call mailcap.findmatch with untrusted input (if they lack validation of user-provided filenames or arguments).\r\nhttps://python-security.readthedocs.io/vuln/mailcap-shell-injection.html",
        "cve": "CVE-2015-20107",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "An issue was discovered in Python 3.11 through 3.11.4. If a path containing '\\0' bytes is passed to os.path.normpath(), the path will be truncated unexpectedly at the first '\\0' byte. There are plausible cases in which an application would have rejected a filename for security reasons in Python 3.10.x or earlier, but that filename is no longer rejected in Python 3.11.x.\r\nhttps://github.com/python/cpython/issues/106242\r\nhttps://github.com/advisories/GHSA-65fx-pmw6-rcfm",
        "cve": "CVE-2023-41105",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python 3.8.18, 3.9.18, 3.10.13, 3.11.5 and 3.12.0rc2 include a fix for CVE-2023-40217: It primarily affects servers (such as HTTP servers) that use TLS client authentication. If a TLS server-side socket is created, receives data into the socket buffer, and then is closed quickly, there is a brief window where the SSLSocket instance will detect the socket as \"not connected\" and won't initiate a handshake, but buffered data will still be readable from the socket buffer. This data will not be authenticated if the server-side TLS peer is expecting client certificate authentication, and is indistinguishable from valid TLS stream data. Data is limited in size to the amount that will fit in the buffer. The TLS connection cannot directly be used for data exfiltration because the vulnerable code path requires that the connection be closed on initialization of the SSLSocket.\r\nhttps://github.com/python/cpython/issues/108310\r\nhttps://mail.python.org/archives/list/security-announce@python.org/thread/PEPLII27KYHLF4AK3ZQGKYNCRERG4YXY",
        "cve": "CVE-2023-40217",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 3.2.5, 3.3.6, 3.4.2 and 3.5.0 include a fix for CVE-2014-2667: Race condition in the _get_masked_mode function in Lib/os.py in Python 3.2 through 3.5, when exist_ok is set to true and multiple threads are used, might allow local users to bypass intended file permissions by leveraging a separate application vulnerability before the umask has been set to the expected value.\r\nhttps://bugs.python.org/issue21082",
        "cve": "CVE-2014-2667",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Algorithmic complexity vulnerability in the ssl.match_hostname function in Python 3.2.x, 3.3.x, and earlier, and unspecified versions of python-backports-ssl_match_hostname as used for older Python versions, allows remote attackers to cause a denial of service (CPU consumption) via multiple wildcard characters in the common name in a certificate.",
        "cve": "CVE-2013-2099",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python 3.4.7 and 3.5.3 remove 3DES from SSL default ciphers list, as it is vulnerable to CVE-2016-2183: The DES and Triple DES ciphers, as used in the TLS, SSH, and IPSec protocols and other protocols and products, have a birthday bound of approximately four billion blocks, which makes it easier for remote attackers to obtain cleartext data via a birthday attack against a long-duration encrypted session, as demonstrated by an HTTPS session using Triple DES in CBC mode, aka a \"Sweet32\" attack.\r\nhttps://github.com/vstinner/cpython/commit/03d13c0cbfe912eb0f9b9a02987b9e569f25fe19",
        "cve": "CVE-2016-2183",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 3.6.13, 3.7.10, 3.8.9, 3.9.3 and 3.10.0a7 include a fix for CVE-2021-3426: There's a flaw in Python 3's pydoc. A local or adjacent attacker who discovers or is able to convince another local or adjacent user to start a pydoc server could access the server and use it to disclose sensitive information belonging to the other user that they would not normally be able to access. The highest risk of this flaw is to data confidentiality.\r\nhttps://bugzilla.redhat.com/show_bug.cgi?id=1935913\r\nhttps://bugs.python.org/issue42988",
        "cve": "CVE-2021-3426",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "expat 2.1.0 and earlier does not properly handle entities expansion unless an application developer uses the XML_SetEntityDeclHandler function, which allows remote attackers to cause a denial of service (resource consumption), send HTTP requests to intranet servers, or read arbitrary files via a crafted XML document, aka an XML External Entity (XXE) issue. NOTE: it could be argued that because expat already provides the ability to disable external entity expansion, the responsibility for resolving this issue lies with application developers; according to this argument, this entry should be REJECTed, and each affected application would need its own CVE.",
        "cve": "CVE-2013-0340",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "In Python (CPython) 3.6 through 3.6.10, 3.7 through 3.7.6, and 3.8 through 3.8.1, an insecure dependency load upon launch on Windows 7 may result in an attacker's copy of api-ms-win-core-path-l1-1-0.dll being loaded and used instead of the system's copy. Windows 8 and later are unaffected.",
        "cve": "CVE-2020-8315",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python 2.7 through 2.7.17, 3.5 through 3.5.9, 3.6 through 3.6.10, 3.7 through 3.7.6, and 3.8 through 3.8.1 allows an HTTP server to conduct Regular Expression Denial of Service (ReDoS) attacks against a client because of urllib.request.AbstractBasicAuthHandler catastrophic backtracking.",
        "cve": "CVE-2020-8492",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 3.6.13, 3.7.10, 3.8.8 and 3.9.2 include a fix for CVE-2021-23336: The package python/cpython from 0 and before 3.6.13, from 3.7.0 and before 3.7.10, from 3.8.0 and before 3.8.8, from 3.9.0 and before 3.9.2 are vulnerable to Web Cache Poisoning via urllib.parse.parse_qsl and urllib.parse.parse_qs by using a vector called parameter cloaking. When the attacker can separate query parameters using a semicolon (;), they can cause a difference in the interpretation of the request between the proxy (running with default configuration) and the server. This can result in malicious requests being cached as completely safe ones, as the proxy would usually not see the semicolon as a separator, and therefore would not include it in a cache key of an unkeyed parameter.\r\nhttps://bugs.python.org/issue42967\r\nhttps://github.com/python/cpython/pull/24297",
        "cve": "CVE-2021-23336",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python 3.x through 3.9.1 has a buffer overflow in PyCArg_repr in _ctypes/callproc.c, which may lead to remote code execution in certain Python applications that accept floating-point numbers as untrusted input, as demonstrated by a 1e300 argument to c_double.from_param. This occurs because sprintf is used unsafely.",
        "cve": "CVE-2021-3177",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "In Python 3.8.4, sys.path restrictions specified in a python38._pth file are ignored, allowing code to be loaded from arbitrary locations. The <executable-name>._pth file (e.g., the python._pth file) is not affected.",
        "cve": "CVE-2020-15801",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python version 3.7.0b3 hardens ssl module against CVE-2018-8970.\r\nhttps://bugs.python.org/issue33136",
        "cve": "CVE-2018-8970",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python 3.6.13, 3.7.10, 3.8.7 and 3.9.1 include a fix for CVE-2022-48565: XML External Entity vulnerability. The plistlib module no longer accepts entity declarations in XML plist files to avoid XML vulnerabilities.\r\nhttps://bugs.python.org/issue42051",
        "cve": "CVE-2022-48565",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python 3.6.13, 3.7.10, 3.8.7, 3.9.1 and 3.10.0a3 include a fix for CVE-2022-48566: Observable Timing Discrepancy vulnerability in compare_digest in Lib/hmac.py. The fix includes constant-time-defeating optimizations were possible in the accumulator variable in hmac.compare_digest.\r\nhttps://bugs.python.org/issue40791",
        "cve": "CVE-2022-48566",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python 3.6.13, 3.7.10, 3.8.7 and 3.9.1 include a fix for CVE-2022-48564: read_ints in plistlib.py in Python is vulnerable to a potential DoS attack via CPU and RAM exhaustion when processing malformed Apple Property List files in binary format.\r\nhttps://bugs.python.org/issue42103",
        "cve": "CVE-2022-48564",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python",
        "advisory": "Python versions 3.7.4 and 3.8.0 includes a fix for ssl.match_hostname() ignoring extra strings after whitespace in IPv4 address.\r\nhttps://python-security.readthedocs.io/vuln/ssl-match_hostname-ipv4-trailing.html",
        "cve": "PVE-2021-42391",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-amazon-ad-api",
        "advisory": "Python-amazon-ad-api 0.5.1 includes a security fix that could lead the application to crash.\r\nhttps://github.com/denisneuf/python-amazon-ad-api/pull/172",
        "cve": "PVE-2023-61860",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-apt",
        "advisory": "Python-apt up to and including version 0.7.8 is vulnerable to CVE-2019-15796: Python-apt doesn't check if hashes are signed in 'Version.fetch_binary()' and 'Version.fetch_source()' of apt/package.py or in '_fetch_archives()' of apt/cache.py in version 1.9.3ubuntu2 and earlier. This allows downloads from unsigned repositories which shouldn't be allowed and has been fixed in verisions 1.9.5, 1.9.0ubuntu1.2, 1.6.5ubuntu0.1, 1.1.0~beta1ubuntu0.16.04.7, 0.9.3.5ubuntu3+esm2, and 0.8.3ubuntu7.5.\r\nhttps://ubuntu.com/security/notices/USN-4247-1",
        "cve": "CVE-2019-15795",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-apt",
        "advisory": "Python-apt up to and including version 0.7.8 is vulnerable to CVE-2019-15796: Python-apt doesn't check if hashes are signed in 'Version.fetch_binary()' and 'Version.fetch_source()' of apt/package.py or in '_fetch_archives()' of apt/cache.py in version 1.9.3ubuntu2 and earlier. This allows downloads from unsigned repositories which shouldn't be allowed and has been fixed in verisions 1.9.5, 1.9.0ubuntu1.2, 1.6.5ubuntu0.1, 1.1.0~beta1ubuntu0.16.04.7, 0.9.3.5ubuntu3+esm2, and 0.8.3ubuntu7.5.\r\nhttps://ubuntu.com/security/notices/USN-4247-1",
        "cve": "CVE-2019-15796",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-augeas",
        "advisory": "The clone_file function in transfer.c in Augeas before 1.0.0, when copy_if_rename_fails is set and EXDEV or EBUSY is returned by the rename function, allows local users to overwrite arbitrary files and obtain sensitive information via a bind mount on the (1) .augsave or (2) destination file when using the backup save option, or (3) .augnew file when using the newfile save option.",
        "cve": "CVE-2012-0787",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-augeas",
        "advisory": "python-augeas before 1.0.0 is vulnerable to cross-mountpoint and symlink attacks.",
        "cve": "PVE-2021-26077",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-augeas",
        "advisory": "The transform_save function in transform.c in Augeas before 1.0.0 allows local users to overwrite arbitrary files and obtain sensitive information via a symlink attack on a .augnew file.",
        "cve": "CVE-2012-0786",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-base-app",
        "advisory": "Python-base-app version 0.2.25 adds improved HTTP header options.",
        "cve": "PVE-2021-41821",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-bitvavo-api",
        "advisory": "Python-bitvavo-api version 1.4.2 updates its requests dependency from 'requests==2.31.0' to 'requests>=2.31.0,<3.0.0' to address vulnerabilities such as CVE-2023-32681.",
        "cve": "CVE-2023-32681",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-bugzilla",
        "advisory": "python-bugzilla before 0.9.0 does not validate X.509 certificates, which allows man-in-the-middle attackers to spoof Bugzilla servers via a crafted certificate.",
        "cve": "CVE-2013-2191",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-cjson",
        "advisory": "Dan Pascu python-cjson 1.0.5 does not properly handle a ['/'] argument to cjson.encode, which makes it easier for remote attackers to conduct certain cross-site scripting (XSS) attacks involving Firefox and the end tag of a SCRIPT element.",
        "cve": "CVE-2009-4924",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-cjson",
        "advisory": "Buffer overflow in Dan Pascu python-cjson 1.0.5, when UCS-4 encoding is enabled, allows context-dependent attackers to cause a denial of service (application crash) or possibly have unspecified other impact via vectors involving crafted Unicode input to the cjson.encode function.",
        "cve": "CVE-2010-1666",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-clu",
        "advisory": "Python-clu 0.5.1 removes an unsafe requirement (Django==2.2.5).",
        "cve": "CVE-2019-19118",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-coveralls",
        "advisory": "Python-Coveralls 2.9.3 includes a security patch for the function 'parse_args' in 'coveralls/init.py'. It used the unsafe yaml.load(), that allows instantiation of arbitrary objects. Consider yaml.safe_load(). \r\nhttps://github.com/z4r/python-coveralls/commit/cb798698f3d6ef120e6d6ff87d4d4a0e239d8c85#diff-82a6c0a53e21b94154c2c4ec0c9c76370e6e9d4305c551b8e70c82add2030db1",
        "cve": "CVE-2017-18342",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-dateuti",
        "advisory": "Python-dateuti is a malicious package. It injects obfuscated JS code that replaces crypto addresses in developer clipboards.",
        "cve": "PVE-2022-51752",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-dbusmock",
        "advisory": "Python-dbusmock before version 0.15.1 AddTemplate() D-Bus method call or DBusTestCase.spawn_server_template() method could be tricked into executing malicious code if an attacker supplies a .pyc file. See CVE-2015-1326.",
        "cve": "CVE-2015-1326",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-docx",
        "advisory": "Python-docx 0.8.6 includes a fix for CVE-2016-5851: context-dependent attackers were able to conduct XML External Entity (XXE) attacks via a crafted document.",
        "cve": "CVE-2016-5851",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-engineio",
        "advisory": "Python-engineio 3.5.2 removes a security alert in the requirements.",
        "cve": "PVE-2021-37168",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-engineio",
        "advisory": "Python-engineio 3.9.0 includes a fix for CVE-2019-13611: An issue was discovered in python-engineio through 3.8.2. There is a Cross-Site WebSocket Hijacking (CSWSH) vulnerability that allows attackers to make WebSocket connections to a server by using a victim's credentials, because the Origin header is not restricted.",
        "cve": "CVE-2019-13611",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-exiv2",
        "advisory": "A stack out of bounds read vulnerability exists in Exiv2 library 0.26 within the webp parser.",
        "cve": "CVE-2017-1000126",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-exiv2",
        "advisory": "Exiv2 0.26 contains a heap buffer overflow in tiff parser.",
        "cve": "CVE-2017-1000127",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-exiv2",
        "advisory": "Exiv2 0.26 contains a stack out of bounds read in JPEG2000 parser.",
        "cve": "CVE-2017-1000128",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-fedora",
        "advisory": "Python-fedora 0.3.26 fixes faswho auth plugin to set session cookies as secure and httponly and sets the Django session cookies httponly.",
        "cve": "PVE-2021-34408",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-fedora",
        "advisory": "Python-fedora 0.8.0 and lower is vulnerable to an open redirect resulting in loss of CSRF protection.",
        "cve": "CVE-2017-1002150",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-flask",
        "advisory": "Python-flask is a malicious package. It injects obfuscated JS code that replaces crypto addresses in developer clipboards.",
        "cve": "PVE-2022-51753",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-for-android",
        "advisory": "Python-for-android 0.5.3 recognizes Password fields as secure passwords to avoid keyboards \"remembering\" these passwords in their dictionaries.\r\nhttps://github.com/kivy/python-for-android/issues/138",
        "cve": "PVE-2022-46073",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-for-android",
        "advisory": "Python-for-android 2021.09.05 updates its NPM dependency 'grunt' to versions '>=1.3.0' to include a security fix.",
        "cve": "CVE-2020-7729",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-framework",
        "advisory": "Python-framework 0.3.69 avoids attacks that could arrive from specifying custom requestHeaders.\r\nhttps://github.com/SamuelJansen/python-framework/commit/c674433a8ec729fb093bf57e4e5f589931d64406",
        "cve": "PVE-2022-48257",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-ftp",
        "advisory": "Python-ftp is a typosquatting package. It installs malware in your system that leaks your data.\r\nhttps://github.com/rsc-dev/pypi_malware",
        "cve": "PVE-2022-45430",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-gitlab",
        "advisory": "Python-gitlab 2.0.0 updates its dependency 'requests' to versions '>=2.22.0' to include a security fix.",
        "cve": "CVE-2018-18074",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-gitlab",
        "advisory": "Python-gitlab 4.0.0 updates its dependency 'requests' to include a security fix.",
        "cve": "CVE-2023-32681",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-gitlab",
        "advisory": "Python-gitlab 4.4.0 updates its dependency on Jinja2, moving from version 3.1.2 to 3.1.3, in response to the security vulnerability identified as CVE-2024-22195.\r\nhttps://github.com/python-gitlab/python-gitlab/pull/2763/commits/7b1211b3e2d13a160c7106b0b418efc632726464",
        "cve": "CVE-2024-22195",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-gitlab",
        "advisory": "Python-gitlab version 4.5.0 updates its dependency on `jinja2` from version 3.1.3 to 3.1.4 due to the security vulnerability identified in CVE-2024-22195.",
        "cve": "CVE-2024-22195",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-gitlab",
        "advisory": "Python-gitlab version 4.5.0 updates its dependency on the `black` package from version 24.2.0 to 24.3.0 in response to CVE-2024-21503.",
        "cve": "CVE-2024-21503",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-gitlab",
        "advisory": "Python-gitlab version 4.6.0 updates its requests dependency from 2.31.0 to 2.32.0 to address the security vulnerability identified as CVE-2024-35195.",
        "cve": "CVE-2024-35195",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-glanceclient",
        "advisory": "The Python client library for Glance (python-glanceclient) before 0.10.0 does not properly check the preverify_ok value, which prevents the server hostname from being verified with a domain name in the subject's Common Name (CN) or subjectAltName field of the X.509 certificate and allows man-in-the-middle attackers to spoof SSL servers via an arbitrary valid certificate.",
        "cve": "CVE-2013-4111",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-gnupg",
        "advisory": "Python-gnupg before 0.3.5 allows context-dependent attackers to execute arbitrary commands via shell metacharacters in unspecified vectors.",
        "cve": "CVE-2013-7323",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-gnupg",
        "advisory": "Python-gnupg 0.3.6 includes a fix for CVE-2014-1928: The shell_quote function in python-gnupg 0.3.5 does not properly escape characters, which allows context-dependent attackers to execute arbitrary code via shell metacharacters in unspecified vectors, as demonstrated using \"\\\" (backslash) characters to form multi-command sequences, a different vulnerability than CVE-2014-1927. \r\nNOTE: this vulnerability exists because of an incomplete fix for CVE-2013-7323.",
        "cve": "CVE-2014-1928",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-gnupg",
        "advisory": "Python-gnupg 0.4.3 allows context-dependent attackers to trick gnupg to decrypt other ciphertext than intended. To perform the attack, the passphrase to gnupg must be controlled by the adversary and the ciphertext should be trusted.\r\nhttps://blog.hackeriet.no/cve-2019-6690-python-gnupg-vulnerability",
        "cve": "CVE-2019-6690",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-gnupg",
        "advisory": "The shell_quote function in python-gnupg 0.3.5 does not properly quote strings, which allows context-dependent attackers to execute arbitrary code via shell metacharacters in unspecified vectors, as demonstrated using \"$(\" command-substitution sequences, a different vulnerability than CVE-2014-1928.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2013-7323.",
        "cve": "CVE-2014-1927",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-gnupg",
        "advisory": "Python-gnupg 0.3.5 and 0.3.6 allows context-dependent attackers to have an unspecified impact via vectors related to \"option injection through positional arguments.\" NOTE: this vulnerability exists because of an incomplete fix for CVE-2013-7323.\r\nhttps://seclists.org/oss-sec/2014/q1/335",
        "cve": "CVE-2014-1929",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-homewizard-energy",
        "advisory": "Python-homewizard-energy 2.1.2 updates its dependency 'gitpython' to include a security fix.",
        "cve": "CVE-2023-40590",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-homewizard-energy",
        "advisory": "Python-homewizard-energy 2.1.2 updates its dependency 'gitpython' to include a security fix.",
        "cve": "CVE-2023-41040",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-homewizard-energy",
        "advisory": "Python-homewizard-energy 2.1.2 updates its dependency 'urllib3' to include a security fix.",
        "cve": "CVE-2023-43804",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-hugo",
        "advisory": "Python-hugo 0.114.0 fixes the upstream Go templates bug with reversed key/value assignment, in response to the identified CVE-2023-24538 vulnerability. \r\nhttps://github.com/gohugoio/hugo/commit/ee359df172ece11989e9b1bf35c2d376f2608ac6",
        "cve": "CVE-2023-24538",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-hugo",
        "advisory": "Python-hugo 0.119.0 upgrades its dependency Go to version 1.21.1, in response to the identified CVE-2023-39318 vulnerability. \r\nhttps://github.com/gohugoio/hugo/commit/1e9b87f7602711fcf84069e03bbae6e0c08f73d1",
        "cve": "CVE-2023-39318",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-hugo",
        "advisory": "Python-hugo 0.120.4 updates its dependency Go to version 1.21.4, as a response to a previously identified security issue concerning the insecure parsing of Windows paths  in Go versions above 1.21.4\r\n#Note: This only affect Windows Users\r\nhttps://github.com/golang/go/issues/63715\r\nhttps://github.com/gohugoio/hugo/commit/9315a2d2c424e41850b642c80c08b898f85bf991",
        "cve": "PVE-2024-63260",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-hugo",
        "advisory": "Python-hugo 0.121.0 updates its dependency libwebp from version v1.2.4 to v1.3.2, in response to the identified CVE-2023-1999 vulnerability.\r\nhttps://github.com/gohugoio/hugo/commit/4fb40ee873415e3147cccb9f2ae43267198a41fe",
        "cve": "CVE-2023-1999",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-hugo",
        "advisory": "Python-hugo 0.81.0 fixes a race condition in text template baseof that could potentially lead to data corruption, access control bypass, denial of service (DoS), deadlocks, thread blocks, and resource starvation in certain situations.\r\nhttps://github.com/gohugoio/hugo/issues/8110\r\nhttps://github.com/gohugoio/hugo/commit/241b7483ea954653512d4895ad6bacf79ee26ddcac",
        "cve": "PVE-2024-63275",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-incidentio-client",
        "advisory": "Python-incidentio-client 0.10.0 updates its dependency 'httpx' to version '0.23.0' to include a fix for an Improper Input Validation vulnerability.\r\nhttps://github.com/expobrain/python-incidentio-client/commit/3170dc08b80f82d729164d24fc36e2989ac0f6d0\r\nhttps://github.com/advisories/GHSA-h8pj-cxx2-jfg2",
        "cve": "CVE-2021-41945",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-jose",
        "advisory": "python-jose before 1.3.2 allows attackers to have unspecified impact by leveraging failure to use a constant time comparison for HMAC keys.",
        "cve": "CVE-2016-7036",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-jose",
        "advisory": "python-jose through 3.3.0 allows attackers to cause a denial of service (resource consumption) during a decode via a crafted JSON Web Encryption (JWE) token with a high compression ratio, aka a \"JWT bomb.\" This is similar to CVE-2024-21319. See CVE-2024-33664.",
        "cve": "CVE-2024-33664",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-jose",
        "advisory": "python-jose through 3.3.0 has algorithm confusion with OpenSSH ECDSA keys and other key formats. This is similar to CVE-2022-29217. See CVE-2024-33663.",
        "cve": "CVE-2024-33663",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-jsonlogic",
        "advisory": "Python-jsonlogic version 2.0.1 addresses a security issue where the operations object was vulnerable to exploitation, allowing the execution of arbitrary code.\r\nhttps://security.snyk.io/vuln/SNYK-JS-JSONLOGICJS-674308",
        "cve": "PVE-2024-66041",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-jss",
        "advisory": "Python-jss 2.1.0 updates its dependency 'urllib3' to v1.24.2 to mitigate a vulnerability.",
        "cve": "CVE-2019-11324",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-jwt",
        "advisory": "Python-jwt 1.0.0 includes fixes for a security vulnerability where 'alg=None' header could bypass signature verification.\r\nhttps://github.com/jpadilla/pyjwt/pull/109\r\nhttps://github.com/jpadilla/pyjwt/pull/110",
        "cve": "PVE-2021-42355",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-jwt",
        "advisory": "Python-jwt 3.3.4 includes a fix for CVE-2022-39227: Versions prior to 3.3.4 are subject to Authentication Bypass by Spoofing, resulting in identity spoofing, session hijacking or authentication bypass. An attacker who obtains a JWT can arbitrarily forge its contents without knowing the secret key. Depending on the application, this may for example enable the attacker to spoof other user's identities, hijack their sessions, or bypass authentication. There are no known workarounds.",
        "cve": "CVE-2022-39227",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-keystoneclient",
        "advisory": "Python-keystoneclient versions 0.11.0 and 1.2.0 include a fix for CVE-2014-7144: OpenStack keystonemiddleware (formerly python-keystoneclient) 0.x before 0.11.0 and 1.x before 1.2.0 disables certification verification when the \"insecure\" option is set in a paste configuration (paste.ini) file regardless of the value, which allows remote attackers to conduct man-in-the-middle attacks via a crafted certificate.\r\nhttp://www.openwall.com/lists/oss-security/2014/09/25/51\r\nhttps://bugs.launchpad.net/python-keystoneclient/+bug/1353315\r\nhttp://rhn.redhat.com/errata/RHSA-2014-1783.html\r\nhttp://rhn.redhat.com/errata/RHSA-2014-1784.html\r\nhttp://rhn.redhat.com/errata/RHSA-2015-0020.html\r\nhttp://www.ubuntu.com/usn/USN-2705-1\r\nhttp://www.securityfocus.com/bid/69864\r\nhttp://secunia.com/advisories/62709",
        "cve": "CVE-2014-7144",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-keystoneclient",
        "advisory": "Python-keystoneclient 0.2.4 includes a fix for CVE-2013-2013: The user-password-update command in python-keystoneclient before 0.2.4 accepts the new password in the --password argument, which allows local users to obtain sensitive information by listing the process.\r\nhttps://bugs.launchpad.net/python-keystoneclient/+bug/938315",
        "cve": "CVE-2013-2013",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-keystoneclient",
        "advisory": "Python-keystoneclient 0.2.4 includes a fix for CVE-2013-2104: python-keystoneclient before 0.2.4, as used in OpenStack Keystone (Folsom), does not properly check expiry for PKI tokens, which allows remote authenticated users to (1) retain use of a token after it has expired, or (2) use a revoked token once it expires.\r\nhttps://bugs.launchpad.net/python-keystoneclient/+bug/1179615",
        "cve": "CVE-2013-2104",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-keystoneclient",
        "advisory": "keystone/middleware/auth_token.py in OpenStack Nova Folsom, Grizzly, and Havana uses an insecure temporary directory for storing signing certificates, which allows local users to spoof servers by pre-creating this directory, which is reused by Nova, as demonstrated using /tmp/keystone-signing-nova on Fedora.",
        "cve": "CVE-2013-2030",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-keystoneclient",
        "advisory": "The auth_token middleware in the OpenStack Python client library for Keystone (aka python-keystoneclient) before 0.7.0 does not properly retrieve user tokens from memcache, which allows remote authenticated users to gain privileges in opportunistic circumstances via a large number of requests, related to an \"interaction between eventlet and python-memcached.\"",
        "cve": "CVE-2014-0105",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-keystoneclient",
        "advisory": "Python-keystoneclient 1.4.0 includes a fix for CVE-2015-1852: The s3_token middleware in OpenStack keystonemiddleware before 1.6.0 and python-keystoneclient before 1.4.0 disables certification verification when the \"insecure\" option is set in a paste configuration (paste.ini) file regardless of the value, which allows remote attackers to conduct man-in-the-middle attacks via a crafted certificate, a different vulnerability than CVE-2014-7144.",
        "cve": "CVE-2015-1852",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-keystoneclient",
        "advisory": "The identity service in OpenStack Identity (Keystone) before 2015.1.3 (Kilo) and 8.0.x before 8.0.2 (Liberty) and keystonemiddleware (formerly python-keystoneclient) before 1.5.4 (Kilo) and Liberty before 2.3.3 does not properly invalidate authorization tokens when using the PKI or PKIZ token providers, which allows remote authenticated users to bypass intended access restrictions and gain access to cloud resources by manipulating byte fields within a revoked token.",
        "cve": "CVE-2015-7546",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-keystoneclient",
        "advisory": "Python-keystoneclient is affected by CVE-2022-2447: A flaw was found in OpenStack. The application credential tokens can be used even after they have expired. This flaw allows an authenticated remote attacker to obtain access despite the defender's efforts to remove access.\r\nhttps://access.redhat.com/security/cve/CVE-2022-2447\r\nhttps://bugzilla.redhat.com/show_bug.cgi?id=2105419",
        "cve": "CVE-2022-2447",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-keystoneclient",
        "advisory": "Python-keystoneclient 0.3.0 includes a fix for CVE-2013-2166: Middleware memcache encryption and signing bypass.",
        "cve": "CVE-2013-2166",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-keystoneclient",
        "advisory": "Python-keystoneclient 0.3.0 includes a fix for CVE-2013-2167: Middleware memcache encryption and signing bypass.",
        "cve": "CVE-2013-2167",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-kraken-sdk",
        "advisory": "Python-kraken-sdk 0.7.1 secures protected and private properties and methods.\r\nhttps://github.com/btschwertfeger/Python-Kraken-SDK/pull/26/commits/d4e14e457a6e34e530472db7a734a01e1534e329",
        "cve": "PVE-2022-52052",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-ldap",
        "advisory": "Python-ldap 3.4.0 includes a fix for CVE-2021-46823: versions before 3.4.0 are vulnerable to a denial of service when ldap.schema is used for untrusted schema definitions, because of a regular expression denial of service (ReDoS) flaw in the LDAP schema parser. By sending crafted regex input, a remote authenticated attacker could exploit this vulnerability to cause a denial of service condition.\r\nhttps://github.com/python-ldap/python-ldap/security/advisories/GHSA-r8wq-qrxc-hmcm",
        "cve": "CVE-2021-46823",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-levenshtein",
        "advisory": "Python-levenshtein 0.12.1 fixes handling of numerous possible wraparounds in calculating the size of memory allocations. Incorrect handling of which could cause denial of service or even possible remote code execution in previous versions of the library.",
        "cve": "PVE-2022-51245",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-libnmap",
        "advisory": "Python-libnmap 0.7.2 adds unittest for defusedxml to fix billionlaugh and external entities security issues. It also includes a fix for security issue on XXE (XML External Entities). See: CVE-2019-1010017.",
        "cve": "CVE-2019-1010017",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-libnmap",
        "advisory": "In python-libnmap through 0.7.2, remote command execution can occur, if used in a client application that does not validate arguments. \r\nNOTE: the vendor believes it would be unrealistic for an application to call NmapProcess with arguments taken from input data that arrived over an untrusted network, and thus the CVSS score corresponds to an unrealistic use case. None of the NmapProcess documentation implies that this is an expected use case.",
        "cve": "CVE-2022-30284",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-libtorrent",
        "advisory": "python-libtorrent before 1.0.6 has several undisclosed vulnerabilities related to uTP.",
        "cve": "PVE-2021-26084",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-mf-data",
        "advisory": "Python-mf-data 0.2.6 updates its dependency 'mako' to v1.2.2 to include a security fix.",
        "cve": "CVE-2022-40023",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-mongo",
        "advisory": "Python-mongo is a typosquatting package. It installs malware in your system that leaks your data.\r\nhttps://github.com/rsc-dev/pypi_malware",
        "cve": "PVE-2022-45432",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-ms",
        "advisory": "Python-ms 1.1.0 includes a fix for a ReDoS vulnerability.\r\nhttps://github.com/Diapolo10/python-ms/commit/441c027b631d6652ccac09d358b77c061ebedc99",
        "cve": "PVE-2023-58825",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-multipart",
        "advisory": "A vulnerability in versions of python-multipart before 0.0.7 involves a Regular Expression Denial of Service (ReDoS) triggered by custom Content-Type headers. This issue allows an attacker to cause a significant consumption of system resources while processing such headers, effectively preventing the processing of other requests. This ReDoS vulnerability stems from the way regular expressions evaluate certain input patterns, which can lead to extensive backtracking, thereby causing the application to slow down significantly, consuming a disproportionate amount of CPU time and facilitating a denial of service condition.",
        "cve": "PVE-2024-99762",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-muranoclient",
        "advisory": "OpenStack Murano before 1.0.3 (liberty) and 2.x before 2.0.1 (mitaka), Murano-dashboard before 1.0.3 (liberty) and 2.x before 2.0.1 (mitaka), and python-muranoclient before 0.7.3 (liberty) and 0.8.x before 0.8.5 (mitaka) improperly use loaders inherited from yaml.Loader when parsing MuranoPL and UI files, which allows remote attackers to create arbitrary Python objects and execute arbitrary code via crafted extended YAML tags in UI definitions in packages.",
        "cve": "CVE-2016-4972",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-mysql",
        "advisory": "Python-mysql is a typosquatting package. It installs malware in your system that leaks your data.\r\nhttps://github.com/rsc-dev/pypi_malware",
        "cve": "PVE-2022-45433",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-mysqldb",
        "advisory": "Python-mysqldb is a typosquatting package. It installs malware in your system that leaks your data.\r\nhttps://github.com/rsc-dev/pypi_malware",
        "cve": "PVE-2022-45434",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-ndev-blizzardapi",
        "advisory": "Python-ndev-blizzardapi version 0.1.2 has been upgraded to Python 3.12 and includes minor security adjustments in response to CVE-2023-40217.",
        "cve": "CVE-2023-40217",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-nomad",
        "advisory": "Python-nomad 1.0.1 updates 'requests` to v2.20.0 to include a security fix.",
        "cve": "CVE-2018-18074",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-opencv",
        "advisory": "Python-opencv isn't in PyPI. The package you may be looking for is \"opencv-python\".",
        "cve": "PVE-2022-50757",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-openflow",
        "advisory": "python-openflow 2016.1.a1 fixes a undisclosed security vulnerability.",
        "cve": "PVE-2021-33282",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-openflow",
        "advisory": "Python-openflow 2019.1b3 updates its dependency 'urllib3' to v1.24.2 to include a security fix.",
        "cve": "CVE-2019-11324",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-openflow",
        "advisory": "Python-openflow 2019.1b3 updates its dependency 'jinja2' to v2.10.1 to include a security fix.",
        "cve": "CVE-2019-10906",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-openssl",
        "advisory": "Python-openssl is a typosquatting package. It installs malware in your system that leaks your data.\r\nhttps://github.com/rsc-dev/pypi_malware",
        "cve": "PVE-2022-45435",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-openzwave",
        "advisory": "Python-openzwave version 0.4.19 includes a security patch for the function 'update_ozw_config' in 'openzwave/controller.py'. Previous versions contained an OS injection vulnerability: unsafe use of os.system().\r\nhttps://github.com/OpenZWave/python-openzwave/commit/3ef3e4b2c68052cc1973e0bbf080048247c3aa89#diff-c804949ef4a7ac8d06368ac70d26e88b719a6e8affe926716e2ae02a24896326",
        "cve": "PVE-2021-41378",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-otr",
        "advisory": "python-otr before 1.1.0 is vulnerable to man-in-the-middle attacks as it allows to restart the protocol.\r\nhttps://github.com/AGProjects/python-otr/commit/8f3e291b172bb97272be077c67bce430dababcdb",
        "cve": "PVE-2021-26086",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-pptx",
        "advisory": "python-pptx before 0.6.12 used a vulnerable version of Pillow.",
        "cve": "PVE-2021-36382",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-pptx",
        "advisory": "Python-pptx 0.6.23 removes '<=9.5.0' constraint for 'pillow' to include security fixes.",
        "cve": "CVE-2023-4863",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-pycraft",
        "advisory": "Python-pycraft 0.8 doesn't attempts to get an internet connection in game, due to privacy, performance and security concerns.",
        "cve": "PVE-2021-42479",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-rapidjson",
        "advisory": "Python-rapidjson 1.15 now enforces the recursion limit during parsing to mitigate potential vulnerabilities, specifically addressing the concerns outlined in CVE-2024-27454.",
        "cve": "CVE-2024-27454",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-saml",
        "advisory": "Python-saml 2.11.0 sets sha256 and rsa-sha256 as default algorithms.\r\nhttps://github.com/onelogin/python-saml/commit/8f76c85756c252d9c845eb268f2111d9d7a53b97",
        "cve": "PVE-2022-44711",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-saml",
        "advisory": "Python-saml 2.11.0 updates its dependency 'lxml' requirement to \">=4.7.1\" to include security fixes.",
        "cve": "PVE-2021-39195",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-saml",
        "advisory": "Python-saml 2.11.0 updates its dependency 'lxml' requirement to \">=4.7.1\" to include security fixes.",
        "cve": "CVE-2018-19787",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-saml",
        "advisory": "Python-saml 2.11.0 updates its dependency 'lxml' requirement to \">=4.7.1\" to include security fixes.",
        "cve": "CVE-2021-28957",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-saml",
        "advisory": "Python-saml 2.11.0 updates its dependency 'lxml' requirement to \">=4.7.1\" to include security fixes.",
        "cve": "CVE-2020-27783",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-saml",
        "advisory": "Python-saml 2.11.0 updates its dependency 'lxml' requirement to \">=4.7.1\" to include security fixes.",
        "cve": "CVE-2021-43818",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-saml",
        "advisory": "Python-saml 2.2.0 includes several fixes to prevent Signature Wrapping attacks.\r\nhttps://github.com/onelogin/python-saml/commit/aeb25be9aff1313ec87c2f9b19687fb76088813f",
        "cve": "CVE-2016-1000252",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-saml",
        "advisory": "Python-saml 2.3.0 replaces etree.tostring  with the sanitized call provided by defusedxml, to prevent XXE attacks.\r\nhttps://github.com/onelogin/python-saml/commit/0799719409282c77672b846004cf9da2cb8de942",
        "cve": "CVE-2017-11427",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-saml",
        "advisory": "Python-saml 2.5.0 includes security improvements to prevent XPath injection.\r\nhttps://github.com/SAML-Toolkits/python3-saml/commit/61eacb44d5789bd96edd11309a2bcae66e0d725f\r\nhttps://github.com/SAML-Toolkits/python-saml/commit/c2e8b095e1af5fe665d5128dfb4ed53e21e92ad8",
        "cve": "PVE-2021-39452",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-saml",
        "advisory": "Python-saml 2.7.0 sets to True the default value for 'strict' setting to improve validation.\r\nhttps://github.com/onelogin/python-saml/commit/8bb4901efa89435466d0087f66efbb5c3f053f44",
        "cve": "PVE-2022-50739",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-scciclient",
        "advisory": "Python-scciclient 0.12.0 includes a fix for CVE-2022-2996: A flaw was found in the python-scciclient when making an HTTPS connection to a server where the server's certificate would not be verified. This issue opens up the connection to possible Man-in-the-middle (MITM) attacks.",
        "cve": "CVE-2022-2996",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-secrets",
        "advisory": "Python-secrets 0.9.1 adds ``six`` for securing ``input`` call.",
        "cve": "PVE-2021-37582",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-secrets",
        "advisory": "Python-secrets before 19.10.0 adds control of umask for better file perm security.",
        "cve": "PVE-2021-37583",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-secrets",
        "advisory": "Python-secrets 19.12.0 addresses security issue per \"Your xkcd passwords are pwned\" article.\r\nhttps://www.unix-ninja.com/p/your_xkcd_passwords_are_pwned",
        "cve": "PVE-2021-41720",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-secrets",
        "advisory": "Python-secrets 19.8.0 tightens permissions on cloned environments/groups.\r\nhttps://github.com/davedittrich/python_secrets/commit/db39d50cabaa4fe9470b96ec8b8b931cf388e647",
        "cve": "PVE-2021-37401",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-secrets",
        "advisory": "Python-secrets 19.8.3 ensures more secure permissions.\r\nhttps://github.com/davedittrich/python_secrets/commit/4cfa6d8d7f809d823de784dac2ddad4341d0e3f6",
        "cve": "PVE-2021-37421",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-secrets",
        "advisory": "Python-secrets 21.6.0 switches to a more secure random number generator.",
        "cve": "PVE-2021-41719",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-semantic-release",
        "advisory": "Versions of Python-semantic-release prior to 9.4.2 are capable of establishing HTTP connections if so configured, potentially exposing the connection to security risks due .",
        "cve": "PVE-2024-67892",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-smooch",
        "advisory": "Python-smooch 1.0.4 updates 'requests' to resolve a potential vulnerability in HTTP connections handling.",
        "cve": "CVE-2018-18074",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-socketio",
        "advisory": "Python-socketio 4.3.0 addresses potential websocket cross-origin attacks. See: <https://github.com/miguelgrinberg/python-engineio/issues/128>.",
        "cve": "PVE-2021-37308",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-sqlite",
        "advisory": "Python-sqlite is a typosquatting package. It installs malware in your system that leaks your data.\r\nhttps://github.com/rsc-dev/pypi_malware",
        "cve": "PVE-2022-45436",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-tutum",
        "advisory": "Python-tutum 0.14.2 avoids reconnecting when not authorized.\r\nhttps://github.com/tutumcloud/python-tutum/commit/0977801be213a95738568d444e01d448ce59c36f",
        "cve": "PVE-2021-34687",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-urbandict",
        "advisory": "Python-urbandict 0.3.10 updates its certifi dependency from version 2024.6.2 to 2024.7.4 to address a security vulnerability identified as CVE-2024-39689.",
        "cve": "CVE-2024-39689",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-urbandict",
        "advisory": "Python-urbandict updates its `urllib3` dependency from version 2.2.1 to 2.2.2 to address security concerns, including CVE-2024-37891.",
        "cve": "CVE-2024-37891",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python-zeep",
        "advisory": "python-zeep 0.4.0 adds defusedxml module for XML security issues.",
        "cve": "PVE-2021-36504",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python3-dateutil",
        "advisory": "Python3-dateutil is a malicious package, typosquatting. It steals SSH and GPG keys from the projects of infected developers.\r\nhttps://www.zdnet.com/article/two-malicious-python-libraries-removed-from-pypi/",
        "cve": "PVE-2022-45411",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python3-flask",
        "advisory": "Python3-flask is a malicious package. It injects obfuscated JS code that replaces crypto addresses in developer clipboards.",
        "cve": "PVE-2022-51754",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python3-ldap",
        "advisory": "python3-ldap before 0.9.5.4 has a security issue in lazy connections.",
        "cve": "PVE-2021-26089",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python3-ldap",
        "advisory": "Python3-ldap 2.4 includes a security fix in the rebind() method of the Connection object.",
        "cve": "PVE-2017-47542",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python3-saml",
        "advisory": "Python3-saml 1.13.0 sets sha256 and rsa-sha256 as default algorithms.\r\nhttps://github.com/onelogin/python3-saml/pull/296",
        "cve": "PVE-2022-44711",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python3-saml",
        "advisory": "Python3-saml 1.13.0 updates its dependency 'lxml' to v4.7.0 to include security fixes.",
        "cve": "CVE-2018-19787",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python3-saml",
        "advisory": "Python3-saml 1.13.0 updates its dependency 'lxml' to v4.7.0 to include security fixes.",
        "cve": "CVE-2021-28957",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python3-saml",
        "advisory": "Python3-saml 1.13.0 updates its dependency 'lxml' to v4.7.0 to include security fixes.",
        "cve": "CVE-2020-27783",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python3-saml",
        "advisory": "Python3-saml 1.13.0 updates its dependency 'lxml' to v4.7.0 to include security fixes.",
        "cve": "CVE-2021-43818",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python3-saml",
        "advisory": "Python3-saml 1.2.1 includes several fixes to prevent Signature Wrapping attacks.\r\nhttps://github.com/onelogin/python3-saml/pull/30",
        "cve": "PVE-2021-26087",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python3-saml",
        "advisory": "Multiple SAML libraries may incorrectly utilize the results of XML DOM traversal and canonicalization APIs in such a way that an attacker may be able to manipulate the SAML data without invalidating the cryptographic signature, allowing the attack to potentially bypass authentication to SAML service providers.",
        "cve": "CVE-2017-11427",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python3-saml",
        "advisory": "Python3-saml 1.5.0 contains security improvements to prevent XPath injection. It also disables DTD on the fromstring defusedxml method.\r\nhttps://github.com/SAML-Toolkits/python3-saml/commit/61eacb44d5789bd96edd11309a2bcae66e0d725f\r\nhttps://github.com/SAML-Toolkits/python-saml/commit/c2e8b095e1af5fe665d5128dfb4ed53e21e92ad8",
        "cve": "PVE-2021-39454",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "python3-saml",
        "advisory": "Python3-saml 1.8.0 sets to True the default value for 'strict' setting to improve validation. When strict is True, then the Python Toolkit will reject unsigned or unencrypted messages if it expects them to be signed or encrypted. Also it will reject the messages if the SAML standard is not strictly followed. Destination, NameId, Conditions ... are validated too.\r\nhttps://github.com/SAML-Toolkits/python3-saml/commit/b7ae95132f35a5b649c546bb79442422aff3073a",
        "cve": "PVE-2022-50739",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pythonkafka",
        "advisory": "Pythonkafka is a typosquatting package. It installs malware in your system that leaks your data.\r\nhttps://github.com/rsc-dev/pypi_malware",
        "cve": "PVE-2022-45431",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pythonmysequel",
        "advisory": "Pythonmysequel 0.2.0 adds SQL injection protection.",
        "cve": "PVE-2021-41232",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pythonstyles",
        "advisory": "Pythonstyles is a malicious package. It installs information-stealing and RAT (remote access trojan) Malware while using Cloudflare Tunnel to bypass firewall restrictions for remote access.\r\nhttps://www.bleepingcomputer.com/news/security/malicious-pypi-packages-create-cloudflare-tunnels-to-bypass-firewalls",
        "cve": "PVE-2023-52939",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pytorch-ie",
        "advisory": "Pytorch-ie 0.13.0 updates its dependency 'gitpython' to v3.1.30 to include a security fix.",
        "cve": "CVE-2022-24439",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pytoxo",
        "advisory": "Pytoxo 1.2 updates its dependency 'iPython' to v7.31.1 to include a security fix.",
        "cve": "CVE-2022-21699",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pywbem",
        "advisory": "Pywbem 0.17.0 changes the HTTPS support of `pywbem.WBEMListener` from using the deprecated `ssl.wrap_socket()` function to using the `ssl.SSLContext` class that was introduced in Python 2.7.9. This causes more secure SSL settings to be used. On Python versions before 2.7.9, pywbem will continue to use the deprecated `ssl.wrap_socket()` function.",
        "cve": "PVE-2021-38576",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pywebsite",
        "advisory": "A timing attack vulnerability has been detected in specific versions of pywebsite, a tool used for creating websites with Python. This vulnerability could potentially compromise security by allowing attackers to infer sensitive information based on the time it takes for the system to respond.",
        "cve": "PVE-2024-99894",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pyyaml",
        "advisory": "Pyyaml 5.3.1 includes a fix for CVE-2020-1747: A vulnerability was discovered in the PyYAML library in versions before 5.3.1, where it is susceptible to arbitrary code execution when it processes untrusted YAML files through the full_load method or with the FullLoader loader. Applications that use the library to process untrusted input may be vulnerable to this flaw. An attacker could use this flaw to execute arbitrary code on the system by abusing the python/object/new constructor.",
        "cve": "CVE-2020-1747",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "pyyaml",
        "advisory": "Pyyaml version 5.4 includes a fix for CVE-2020-14343: A vulnerability was discovered in the PyYAML library in versions before 5.4, where it is susceptible to arbitrary code execution when it processes untrusted YAML files through the full_load method or with the FullLoader loader. Applications that use the library to process untrusted input may be vulnerable to this flaw. This flaw allows an attacker to execute arbitrary code on the system by abusing the python/object/new constructor. This flaw is due to an incomplete fix for CVE-2020-1747.\r\nhttps://bugzilla.redhat.com/show_bug.cgi?id=1860466",
        "cve": "CVE-2020-14343",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "qi",
        "advisory": "Qi 2.0.0 includes sets libqi version to '1.8.3', that prevents Man-in-the-Middle TLS Protocol Downgrade attacks.\r\nhttps://github.com/aldebaran/libqi-python/commit/9f204b174b04b6bb0cccf4ddb48dc8c1cf6bcb4e\r\nhttps://github.com/aldebaran/libqi/commit/4cf5aa7b1da686890b46954909b80e04a3f325f2",
        "cve": "PVE-2023-52952",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "qpid-python",
        "advisory": "Apache Qpid before 0.16 does not properly verify credentials during the joining of a cluster, which allows remote attackers to obtain access to the messaging functionality and job functionality of a cluster by leveraging knowledge of a cluster-username.",
        "cve": "CVE-2011-3620",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "qpid-python",
        "advisory": "Qpid-python 0.22 includes a fix for CVE-2013-1909: The Python client in Apache Qpid before 0.22 does not verify that the server hostname matches a domain name in the subject's Common Name (CN) or subjectAltName field of the X.509 certificate, which allows man-in-the-middle attackers to spoof SSL servers via an arbitrary valid certificate.\r\nhttps://issues.apache.org/jira/browse/QPID-4918",
        "cve": "CVE-2013-1909",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "qpid-python",
        "advisory": "sys/ssl/SslSocket.cpp in qpidd in Apache Qpid, as used in Red Hat Enterprise MRG before 1.2.2 and other products, when SSL is enabled, allows remote attackers to cause a denial of service (daemon outage) by connecting to the SSL port but not participating in an SSL handshake.",
        "cve": "CVE-2010-3083",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "qpid-python",
        "advisory": "A vulnerability has been identified in specific versions of qpid_python, where SSL or TLS connections do not automatically verify the server's hostname due to default settings. This oversight could allow an attacker to perform Man-in-the-Middle attacks by establishing connections without proper verification.",
        "cve": "PVE-2024-99892",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "quart",
        "advisory": "Quart, a Python ASGI web microframework, is exposed to Denial of Service (DoS) attacks due to vulnerabilities present in certain versions. These attacks can lead to the server being overloaded and becoming inaccessible to legitimate users, without necessarily breaching security or extracting data. DoS attacks, including the high-volume Distributed Denial of Service (DDoS) varieties, exploit a flaw to exhaust server resources through methods such as sending crafted requests that significantly increase CPU or Memory consumption or cause the system to crash. This vulnerability can be unintentionally triggered by high traffic to resource-intensive routes or can be maliciously exploited to render services unavailable.",
        "cve": "PVE-2024-99891",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "qutebrowser",
        "advisory": "Qutebrowser 1.5.0 ships with Python 3.7, PyQt 5.11.3 and Qt 5.11.2. QtWebEngine includes security fixes up to Chromium 68.0.3440.75 and various other fixes.",
        "cve": "PVE-2021-36521",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "qweb",
        "advisory": "Qweb 3.0.0 updates the dependency opencv-python from 4.8.0.74 to 4.8.1.78 to include security fixes for the CVE-2023-4863.\r\nhttps://github.com/qentinelqi/qweb/compare/v2.2.3...v3.0.0#diff-4d7c51b1efe9043e44439a949dfd92e5827321b34082903477fd04876edb7552L10",
        "cve": "CVE-2023-4863",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "rasa",
        "advisory": "Rasa 3.0.0 includes a version of 'rasa-sdk' that drops support for Python 3.6, as it is arriving to end of life on Dec 23rd 2021.\r\nhttps://github.com/rasahq/rasa/issues/8569",
        "cve": "CVE-2022-26488",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ravenpy",
        "advisory": "Ravenpy 0.9.0 includes a fix for CVE-2007-4559: Directory traversal vulnerability in the (1) extract and (2) extractall functions in the tarfile module in Python allows user-assisted remote attackers to overwrite arbitrary files via a .. (dot dot) sequence in filenames in a TAR archive, a related issue to CVE-2001-1267.",
        "cve": "CVE-2007-4559",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ray",
        "advisory": "Ray allows a remote attacker to execute arbitrary code via the job submission API. In the default configuration, Ray does not enforce authentication. As a result, attackers may freely submit jobs, delete existing jobs, retrieve sensitive information, and exploit the other vulnerabilities described in this advisory. While the Ray documentation included an optional mutual TLS authentication mode, Ray does not appear to support an authorization model. In other words, even if a Ray administrator explicitly enabled TLS authentication, they would be unable to grant users different permissions, such as read-only access to the Ray Dashboard.\r\nThe most direct method of exploitation discovered is to submit arbitrary operating system commands for execution via the job submission API using a raw HTTP request or the Ray Jobs Python SDK. These do not require authentication in the default configuration, and are accessible remotely to any system with access to the Ray Dashboard (TCP port 8265 by default).\r\nNOTE: The vendor's position is that this report is irrelevant because Ray, as stated in its documentation, is not intended for use outside of a strictly controlled network environment.\r\nNOTE2: This flaw has been under active exploitation in the wild and it was baptized 'ShadowRay'.",
        "cve": "CVE-2023-48022",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "rdquests",
        "advisory": "Rdquests is a malicious package, typosquatting the popular Python 'requests' library. It embeds source code that retrieves a Golang-based ransomware binary from a remote server.\r\nhttps://thehackernews.com/2022/12/malware-strains-targeting-python-and.html",
        "cve": "PVE-2023-52888",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "reactpy-django",
        "advisory": "Reactpy-django 0.0.2 includes a critical update that addresses a previously identified potential directory traversal vulnerability in the IDOM web modules URL.\r\nhttps://github.com/reactive-python/reactpy-django/compare/0.0.1...0.0.2",
        "cve": "PVE-2024-63677",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "readmeai",
        "advisory": "Readmeai 0.3.16 updates its dependency 'gitpython' to v3.1.35 to include a security fix.",
        "cve": "CVE-2023-40590",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "readmeai",
        "advisory": "Readmeai 0.3.17 updates its dependency 'gitpython' to v3.1.36 to include a security fix.",
        "cve": "CVE-2023-41040",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "realcugan-ncnn-vulkan-python",
        "advisory": "Realcugan-ncnn-vulkan-python 1.0.2 and prior releases ship with a version of C library 'libwebp' which is affected by a high risk vulnerability.\r\nhttps://inspector.pypi.io/project/realcugan-ncnn-vulkan-python/1.0.2/packages/64/8f/a97b3fac5e2123e4652a122f1df50846e4721056964003890edc20f24fbf/realcugan-ncnn-vulkan-python-1.0.2.tar.gz/realcugan-ncnn-vulkan-python-1.0.2/realcugan_ncnn_vulkan_python/realcugan-ncnn-vulkan/src/libwebp/ChangeLog",
        "cve": "CVE-2023-4863",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "realsr-ncnn-vulkan-python",
        "advisory": "Realsr-ncnn-vulkan-python 1.0.2 throughout 1.0.6 ship with a version of C library 'libwebp' which is affected by a high risk vulnerability.\r\nhttps://inspector.pypi.io/project/realsr-ncnn-vulkan-python/1.0.6/packages/75/17/03e75d9498a43e9770a3043cc8b587e868bf6d4f2a60fda3305ffac8b2b5/realsr-ncnn-vulkan-python-1.0.6.tar.gz/realsr-ncnn-vulkan-python-1.0.6/realsr_ncnn_vulkan_python/realsr-ncnn-vulkan/src/libwebp/ChangeLog",
        "cve": "CVE-2023-4863",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "reauests",
        "advisory": "Reauests is a malicious package, typosquatting the popular Python 'requests' library. It embeds source code that retrieves a Golang-based ransomware binary from a remote server.\r\nhttps://thehackernews.com/2022/12/malware-strains-targeting-python-and.html",
        "cve": "PVE-2023-52887",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "recurly",
        "advisory": "The Recurly Client Python Library before 2.0.5, 2.1.16, 2.2.22, 2.3.1, 2.4.5, 2.5.1, 2.6.2 is vulnerable to a Server-Side Request Forgery vulnerability in the \"Resource.get\" method that could result in compromise of API keys or other critical resources.",
        "cve": "CVE-2017-0906",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "reduests",
        "advisory": "Reduests is a malicious package, typosquatting the popular Python 'requests' library. It embeds source code that retrieves a Golang-based ransomware binary from a remote server.\r\nhttps://thehackernews.com/2022/12/malware-strains-targeting-python-and.html",
        "cve": "PVE-2023-52891",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "reeuests",
        "advisory": "Reeuests is a malicious package, typosquatting the popular Python 'requests' library. It embeds source code that retrieves a Golang-based ransomware binary from a remote server.\r\nhttps://thehackernews.com/2022/12/malware-strains-targeting-python-and.html",
        "cve": "PVE-2023-52892",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "rencode",
        "advisory": "The rencode package through 1.0.6 for Python allows an infinite loop in typecode decoding (such as via ;\\x2f\\x7f), enabling a remote attack that consumes CPU and memory.\r\nhttps://seclists.org/fulldisclosure/2021/Sep/16",
        "cve": "CVE-2021-40839",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "renku",
        "advisory": "Renku 0.6.0 updates its Werkzeug dependency to version 0.15.5 from the previous 0.12, in response to the security vulnerability CVE-2019-14322.\r\nhttps://github.com/SwissDataScienceCenter/renku-python/pull/633/commits/d349d70939feff4e2797ac99b07f1cb633b37596",
        "cve": "CVE-2019-14322",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "renku",
        "advisory": "Renku 1.11.0 resolves high severity XSS (Cross-Site Scripting) vulnerabilities that previously permitted the injection and execution of malicious scripts within the application's web interface.\r\nhttps://github.com/SwissDataScienceCenter/renku-python/pull/3234/commits/a47aedf7bd147c4999a91bcf7489ade3542b39ad",
        "cve": "PVE-2024-64209",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "renku",
        "advisory": "Renku 2.0.0 resolves high severity XSS (Cross-Site Scripting) vulnerabilities that previously permitted the injection and execution of malicious scripts within the application's web interface.\r\nhttps://github.com/SwissDataScienceCenter/renku-python/pull/3234/commits/a47aedf7bd147c4999a91bcf7489ade3542b39ad",
        "cve": "PVE-2024-64210",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "reportlab",
        "advisory": "ReportLab 3.5.31 includes a fix for CVE-2019-19450: Paraparser in ReportLab before 3.5.31 allows remote code execution because start_unichar in paraparser.py evaluates untrusted user input in a unichar element in a crafted XML document with '<unichar code=\"' followed by arbitrary Python code, a similar issue to CVE-2019-17626.\r\nhttps://github.com/MrBitBucket/reportlab-mirror/blob/master/CHANGES.md#release-353115102019",
        "cve": "CVE-2019-19450",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "reportlab",
        "advisory": "ReportLab 3.5.34 includes a fix for CVE-2019-17626: Remote code execution vulnerability because of toColor(eval(arg)) in colors.py, as demonstrated by a crafted XML document with '<span color=\"' followed by arbitrary Python code.",
        "cve": "CVE-2019-17626",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "reprozip",
        "advisory": "Reprozip 1.2 includes a fix for CVE-2007-4559: Directory traversal vulnerability in the (1) extract and (2) extractall functions in the tarfile module in Python allows user-assisted remote attackers to overwrite arbitrary files via a .. (dot dot) sequence in filenames in a TAR archive, a related issue to CVE-2001-1267.",
        "cve": "CVE-2007-4559",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "reqhests",
        "advisory": "Reqhests is a malicious package, typosquatting the popular Python 'requests' library. It embeds source code that retrieves a Golang-based ransomware binary from a remote server.\r\nhttps://thehackernews.com/2022/12/malware-strains-targeting-python-and.html",
        "cve": "PVE-2023-52893",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "reqkests",
        "advisory": "Reqkests is a malicious package, typosquatting the popular Python 'requests' library. It embeds source code that retrieves a Golang-based ransomware binary from a remote server.\r\nhttps://thehackernews.com/2022/12/malware-strains-targeting-python-and.html",
        "cve": "PVE-2023-52894",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "requesfs",
        "advisory": "Requesfs is a malicious package, typosquatting the popular Python 'requests' library. It embeds source code that retrieves a Golang-based ransomware binary from a remote server.\r\nhttps://thehackernews.com/2022/12/malware-strains-targeting-python-and.html",
        "cve": "PVE-2023-52895",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "requesta",
        "advisory": "Requesta is a malicious package, typosquatting the popular Python 'requests' library. It embeds source code that retrieves a Golang-based ransomware binary from a remote server.\r\nhttps://thehackernews.com/2022/12/malware-strains-targeting-python-and.html",
        "cve": "PVE-2023-52896",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "requeste",
        "advisory": "Requeste is a malicious package, typosquatting the popular Python 'requests' library. It embeds source code that retrieves a Golang-based ransomware binary from a remote server.\r\nhttps://thehackernews.com/2022/12/malware-strains-targeting-python-and.html",
        "cve": "PVE-2023-52897",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "requestn",
        "advisory": "An attacker published a malicious Python package to the PyPI registry named \"requestn,\" which closely resembles the popular \"requests\" library. This package was designed to exfiltrate a victim's files to a remote Telegram server.",
        "cve": "PVE-2024-71487",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "requests-kerberos",
        "advisory": "Python-requests-Kerberos through 0.5 does not handle mutual authentication correctly. See: CVE-2014-8650 and <https://www.openwall.com/lists/oss-security/2014/11/07/1>.",
        "cve": "CVE-2014-8650",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "requestw",
        "advisory": "Requestw is a malicious package, typosquatting the popular Python 'requests' library. It embeds source code that retrieves a Golang-based ransomware binary from a remote server.\r\nhttps://thehackernews.com/2022/12/malware-strains-targeting-python-and.html",
        "cve": "PVE-2023-52898",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "requfsts",
        "advisory": "Requfsts is a malicious package, typosquatting the popular Python 'requests' library. It embeds source code that retrieves a Golang-based ransomware binary from a remote server.\r\nhttps://thehackernews.com/2022/12/malware-strains-targeting-python-and.html",
        "cve": "PVE-2023-52899",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "resilient",
        "advisory": "IBM Resilient OnPrem 38.2 could allow a privileged user to inject malicious commands through Python3 scripting. IBM X-Force ID: 185503. See CVE-2020-4636.",
        "cve": "CVE-2020-4636",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "restkit",
        "advisory": "Restkit allows man-in-the-middle attackers to spoof TLS servers by leveraging use of the ssl.wrap_socket function in Python with the default CERT_NONE value for the cert_reqs argument.",
        "cve": "CVE-2015-2674",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "restrictedpython",
        "advisory": "Restrictedpython 4.0 ships with a default implementation for ``_getattr_`` which prevents from using the ``format()`` method on str/unicode as it is not safe. See <http://lucumr.pocoo.org/2016/12/29/careful-with-str-format/>.\r\n\r\n **Caution:** If you do not already have secured the access to this ``format()`` method in your ``_getattr_`` implementation use ``RestrictedPython.Guards.safer_getattr()`` in your implementation to benefit from this fix.",
        "cve": "PVE-2021-37433",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "restrictedpython",
        "advisory": "Restrictedpython 6.1 and 5.3 include a fix for CVE-2023-37271: Arbitrary code execution via stack frame sandbox escape.\r\nhttps://github.com/zopefoundation/RestrictedPython/security/advisories/GHSA-wqc8-x2pr-7jqh",
        "cve": "CVE-2023-37271",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "restrictedpython",
        "advisory": "RestrictedPython 6.2 and 5.4 include a fix for an Information Disclosure vulnerability. Python's \"format\" functionality allows someone controlling the format string to \"read\" all objects accessible through recursive attribute lookup and subscription from objects he can access. This can lead to critical information disclosure. With 'RestrictedPython', the format functionality is available via the 'format' and 'format_map' methods of 'str' (and 'Unicode') and via 'string.Formatter'.\r\nhttps://github.com/advisories/GHSA-xjw2-6jm9-rf67",
        "cve": "CVE-2023-41039",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "resuests",
        "advisory": "Resuests is a malicious package, typosquatting the popular Python 'requests' library. It embeds source code that retrieves a Golang-based ransomware binary from a remote server.\r\nhttps://thehackernews.com/2022/12/malware-strains-targeting-python-and.html",
        "cve": "PVE-2023-52900",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "rewuests",
        "advisory": "Rewuests is a malicious package, typosquatting the popular Python 'requests' library. It embeds source code that retrieves a Golang-based ransomware binary from a remote server.\r\nhttps://thehackernews.com/2022/12/malware-strains-targeting-python-and.html",
        "cve": "PVE-2023-52901",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "rfquests",
        "advisory": "Rfquests is a malicious package, typosquatting the popular Python 'requests' library. It embeds source code that retrieves a Golang-based ransomware binary from a remote server.\r\nhttps://thehackernews.com/2022/12/malware-strains-targeting-python-and.html",
        "cve": "PVE-2023-52902",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "rife-ncnn-vulkan-python",
        "advisory": "Rife-ncnn-vulkan-python 1.2.1 and prior releases ship with a version of C library 'libwebp' which is affected by a high risk vulnerability.\r\nhttps://inspector.pypi.io/project/rife-ncnn-vulkan-python/1.2.1/packages/7d/eb/95529e003ac6a7de01d10601957320ee6af1fcd6195b762269e81b730fde/rife-ncnn-vulkan-python-1.2.1.tar.gz/rife-ncnn-vulkan-python-1.2.1/rife_ncnn_vulkan_python/rife-ncnn-vulkan/src/libwebp/ChangeLog",
        "cve": "CVE-2023-4863",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "rope",
        "advisory": "base/oi/doa.py in the Rope library in CPython (aka Python) allows remote attackers to execute arbitrary code by leveraging an unsafe call to pickle.load.",
        "cve": "CVE-2014-3539",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "rply",
        "advisory": "The parser cache functionality in parsergenerator.py in RPLY (aka python-rply) before 0.7.1 allows local users to spoof cache data by pre-creating a temporary rply-*.json file with a predictable name.",
        "cve": "CVE-2014-1604",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "rply",
        "advisory": "python-rply before 0.7.4 insecurely creates temporary files. See: CVE-2014-1938.",
        "cve": "CVE-2014-1938",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "rrquests",
        "advisory": "Rrquests is a malicious package, typosquatting the popular Python 'requests' library. It embeds source code that retrieves a Golang-based ransomware binary from a remote server.\r\nhttps://thehackernews.com/2022/12/malware-strains-targeting-python-and.html",
        "cve": "PVE-2023-52903",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "rsa",
        "advisory": "Rsa 2.0 includes a security fix: Make sure p and q are different and phi_n is not divisible by 256. Any of the previous conditions would make breaking encryption trivial.\r\nhttps://github.com/sybrenstuvel/python-rsa/commit/f2fec9090cc4220e12b9b6f3102114bcc6aa9575",
        "cve": "PVE-2021-26109",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "rsa",
        "advisory": "The verify function in the RSA package for Python (Python-RSA) before 3.3 allows attackers to spoof signatures with a small public exponent via crafted signature padding, aka a BERserk attack.",
        "cve": "CVE-2016-1494",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "rsa",
        "advisory": "Rsa before 3.4 is vulnerable to timing attacks.\r\nhttps://github.com/sybrenstuvel/python-rsa/issues/19",
        "cve": "PVE-2021-26112",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "rsa",
        "advisory": "Rsa 4.3 includes a fix for CVE-2020-13757: Python-RSA before 4.3 ignores leading '\\0' bytes during decryption of ciphertext. This could conceivably have a security-relevant impact, e.g., by helping an attacker to infer that an application uses Python-RSA, or if the length of accepted ciphertext affects application behavior (such as by causing excessive memory allocation).",
        "cve": "CVE-2020-13757",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "rsa",
        "advisory": "Rsa 4.7 includes a fix for CVE-2020-25658: It was found that python-rsa is vulnerable to Bleichenbacher timing attacks. An attacker can use this flaw via the RSA decryption API to decrypt parts of the cipher text encrypted with RSA.",
        "cve": "CVE-2020-25658",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "rsa",
        "advisory": "Specific versions of a Pure-Python RSA implementation are susceptible to an Authentication Bypass vulnerability. This flaw arises because the implementation does not use authentication encryption or Message Authentication Codes (MACs) to validate messages before decrypting them with a public key. This weakness potentially allows unauthorized access or information disclosure.",
        "cve": "PVE-2024-99882",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "rsanic",
        "advisory": "Versions of rsanic, a Python 3 based micro framework, are susceptible to Cross-site Scripting (XSS) attacks due to the autoescape option being disabled in the Jinja configuration. XSS attacks enable attackers to inject malicious content into web applications, tricking the application into delivering this content as if it were from a trusted source. This can lead to actions such as stealing cookies, hijacking user sessions, exposing sensitive information, enabling unauthorized access, and delivering malware. The vulnerability can manifest in several forms, including Stored, Reflected, DOM-based, and Mutated XSS, each with unique attack vectors ranging from inserting malicious links directly into applications to manipulating web pages in the client's browser.",
        "cve": "PVE-2024-99881",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "rtv",
        "advisory": "rtv before 1.12.1 has a security vulnerability where malicious URLs could inject python code.",
        "cve": "PVE-2021-26113",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "rwquests",
        "advisory": "Rwquests is a malicious package, typosquatting the popular Python 'requests' library. It embeds source code that retrieves a Golang-based ransomware binary from a remote server.\r\nhttps://thehackernews.com/2022/12/malware-strains-targeting-python-and.html",
        "cve": "PVE-2023-52904",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "safety",
        "advisory": "The command-line \"safety\" package for Python has a potential security issue. There are two Python characteristics that allow malicious code to \u201cpoison-pill\u201d command-line Safety package detection routines by disguising, or obfuscating, other malicious or non-secure packages. This vulnerability is considered to be of low severity because the attack makes use of an existing Python condition, not the Safety tool itself. This can happen if: You are running Safety in a Python environment that you don\u2019t trust. You are running Safety from the same Python environment where you have your dependencies installed. Dependency packages are being installed arbitrarily or without proper verification. Users can mitigate this issue by doing any of the following: Perform a static analysis by installing Docker and running the Safety Docker image: $ docker run --rm -it pyupio/safety check -r requirements.txt Run Safety against a static dependencies list, such as the requirements.txt file, in a separate, clean Python environment. Run Safety from a Continuous Integration pipeline. Use PyUp.io, which runs Safety in a controlled environment and checks Python for dependencies without any need to install them. Use PyUp's Online Requirements Checker.",
        "cve": "CVE-2020-5252",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "safeurl-python",
        "advisory": "Safeurl-python 1.2 includes a fix for CVE-2023-24622: isInList in the safeurl-python package before 1.2 for Python has an insufficiently restrictive regular expression for external domains, leading to SSRF.\r\nhttps://github.com/IncludeSecurity/safeurl-python/security/advisories/GHSA-jgh8-vchw-q3g7",
        "cve": "CVE-2023-24622",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "safeurl-python",
        "advisory": "Versions of the safeurl-python library are susceptible to an Access Control Bypass vulnerability because they fail to block fully qualified domain names (FQDNs). This flaw allows attackers to bypass hostname blacklists by appending a dot to the end of the blacklisted hostname, potentially leading to server-side request forgery (SSRF) incidents.",
        "cve": "PVE-2024-99878",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "sagemaker",
        "advisory": "sagemaker-python-sdk is a library for training and deploying machine learning models on Amazon SageMaker. In affected versions the capture_dependencies function in `sagemaker.serve.save_retrive.version_1_0_0.save.utils` module allows for potentially unsafe Operating System (OS) Command Injection if an inappropriate command is passed as the \u201crequirements_path\u201d parameter. This consequently may allow an unprivileged third party to cause remote code execution, denial of service, affecting both confidentiality and integrity. This issue has been addressed in version 2.214.3. Users are advised to upgrade. Users unable to upgrade should not override the \u201crequirements_path\u201d parameter of capture_dependencies function in `sagemaker.serve.save_retrive.version_1_0_0.save.utils`, and instead use the default value.",
        "cve": "CVE-2024-34073",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "sagemaker",
        "advisory": "sagemaker-python-sdk is a library for training and deploying machine learning models on Amazon SageMaker. The sagemaker.base_deserializers.NumpyDeserializer module before v2.218.0 allows potentially unsafe deserialization when untrusted data is passed as pickled object arrays. This consequently may allow an unprivileged third party to cause remote code execution, denial of service, affecting both confidentiality and integrity. Users are advised to upgrade to version 2.218.0. Users unable to upgrade should not pass pickled numpy object arrays which originated from an untrusted source, or that could have been tampered with. Only pass pickled numpy object arrays from trusted sources.",
        "cve": "CVE-2024-34072",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "sagemaker-python-sdk",
        "advisory": "sagemaker-python-sdk is a library for training and deploying machine learning models on Amazon SageMaker. In affected versions the capture_dependencies function in `sagemaker.serve.save_retrive.version_1_0_0.save.utils` module allows for potentially unsafe Operating System (OS) Command Injection if inappropriate command is passed as the \u201crequirements_path\u201d parameter. This consequently may allow an unprivileged third party to cause remote code execution, denial of service, affecting both confidentiality and integrity. This issue has been addressed in version 2.214.3. Users are advised to upgrade. Users unable to upgrade should not override the \u201crequirements_path\u201d parameter of capture_dependencies function in `sagemaker.serve.save_retrive.version_1_0_0.save.utils`, and instead use the default value. See CVE-2024-34073.",
        "cve": "CVE-2024-34073",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "sagemaker-python-sdk",
        "advisory": "sagemaker-python-sdk is a library for training and deploying machine learning models on Amazon SageMaker. The sagemaker.base_deserializers.NumpyDeserializer module before v2.218.0 allows potentially unsafe deserialization when untrusted data is passed as pickled object arrays. This consequently may allow an unprivileged third party to cause remote code execution, denial of service, affecting both confidentiality and integrity. Users are advised to upgrade to version 2.218.0. Users unable to upgrade should not pass pickled numpy object arrays which originated from an untrusted source, or that could have been tampered with. Only pass pickled numpy object arrays from trusted sources.",
        "cve": "CVE-2024-34072",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "saleor",
        "advisory": "Saleor 3.1.48, 3.7.59, 3.8.30, 3.9.27, 3.10.14 and 3.11.12 include a fix for CVE-2023-26051: Some internal Python exceptions are not handled properly and thus are returned in API as error messages. Some messages might contain sensitive information like user email address in staff-authenticated requests.\r\nSafe versions aren't in PyPi but on Saleor Github repository.\r\nhttps://github.com/saleor/saleor/security/advisories/GHSA-r8qr-wwg3-2r85",
        "cve": "CVE-2023-26051",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "saleor",
        "advisory": "Saleor 3.1.48, 3.7.59, 3.8.30, 3.9.27, 3.10.14 and 3.11.12 include a fix for CVE-2023-26052: Some internal Python exceptions are not handled properly and thus are returned in API as error messages. Some messages might contain sensitive information like infrastructure details in unauthenticated requests.\r\nSafe versions aren't in PyPi but on Saleor Github repository.\r\nhttps://github.com/saleor/saleor/security/advisories/GHSA-3hvj-3cg9-v242",
        "cve": "CVE-2023-26052",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "salt",
        "advisory": "Salt 3005.3 updates gitpython to >=3.1.35 due to https://github.com/advisories/GHSA-wfm5-v35h-vwf4 and https://github.com/advisories/GHSA-cwvm-v4w8-q58c (#65167)",
        "cve": "PVE-2023-62053",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "salt",
        "advisory": "Salt 3006.6 upgrades its gitpython library to version 3.1.41 as a security measure in response to CVE-2024-22190.",
        "cve": "CVE-2024-22190",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "salt",
        "advisory": "Salt version 3007.0 updates its GitPython dependency to version 3.1.35 or higher to address the security vulnerability identified in CVE-2023-40590.",
        "cve": "CVE-2023-40590",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "salt",
        "advisory": "Salt version 3007.0 updates its GitPython dependency to version 3.1.35 or higher to address the security vulnerability identified in CVE-2023-40590.",
        "cve": "CVE-2023-41040",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "salt",
        "advisory": "Salt version 3007.0rc1 has updated its GitPython dependency to version 3.1.35 or higher in response to CVE-2023-40590\r\nhttps://github.com/saltstack/salt/pull/65137/commits/aaf493adba19ab96c5985eba6d8d471dd011115d",
        "cve": "CVE-2023-40590",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "salt",
        "advisory": "Salt version 3007.0rc1 has updated its GitPython dependency to version 3.1.35 or higher in response to CVE-2023-41040\r\nhttps://github.com/saltstack/salt/pull/65137/commits/aaf493adba19ab96c5985eba6d8d471dd011115d",
        "cve": "CVE-2023-41040",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "salted",
        "advisory": "Salted 0.5.4 requires lxml version >= 4.6.2 as it fixes a vulnerability and works with Python 3.9.",
        "cve": "CVE-2020-27783",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "sanic",
        "advisory": "Sanic v20.12 officially supports Python versions 3.6, 3.7, 3.8, and 3.9. However, if you accidentally run it with version 3.10 (**which is not supported by Sanic 20.12**), your server is prone to crashing on an incoming web request.\r\nhttps://github.com/sanic-org/sanic/security/advisories/GHSA-7p79-6x2v-5h88",
        "cve": "PVE-2023-55191",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "sanic-ext",
        "advisory": "The official compatibility of Sanic includes Python versions 3.6, 3.7, 3.8, and 3.9, but not version 3.10. Mistakenly running it with Python 3.10 can potentially cause your server to crash upon receiving a web request.",
        "cve": "PVE-2023-99923",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "satosa",
        "advisory": "Satosa 6.1.0 includes a fix for CVE-2020-5390: Improper Verification of Cryptographic Signature in PySAML2.\r\nhttps://github.com/IdentityPython/SATOSA/commit/7f93dcf95ce7228844a1f6d8969eea2164052e5c\r\nhttps://github.com/advisories/GHSA-qf7v-8hj3-4xw7",
        "cve": "CVE-2020-5390",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "satosa",
        "advisory": "Satosa 7.0.2 includes a fix for CVE-2021-21238: SAML XML Signature wrapping in PySAML2.\r\nhttps://github.com/IdentityPython/SATOSA/commit/21bdada3509c7d53db131a5f8944c563934ba290\r\nhttps://github.com/advisories/GHSA-f4g9-h89h-jgv9",
        "cve": "CVE-2021-21238",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "satosa",
        "advisory": "Satosa 7.0.2 includes a fix for CVE-2021-21239: Improper Verification of Cryptographic Signature in PySAML2.\r\nhttps://github.com/IdentityPython/SATOSA/commit/21bdada3509c7d53db131a5f8944c563934ba290\r\nhttps://github.com/advisories/GHSA-5p3x-r448-pc62",
        "cve": "CVE-2021-21239",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "scalyr-agent-2",
        "advisory": "Scalyr-agent-2 version 2.1.10 includes a fix for CVE-2020-24715: The Scalyr Agent before 2.1.10 has Missing SSL Certificate Validation because, in some circumstances, native Python code is used that lacks a comparison of the hostname to commonName and subjectAltName.",
        "cve": "CVE-2020-24715",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "scikit-network",
        "advisory": "Scikit-network 0.29.0 updates its dependency 'ipython' to v8.10.0 to include a security fix.",
        "cve": "CVE-2023-24816",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "scml",
        "advisory": "Scml 0.5.1 pins a transitive dependency (ipython>=7.16.3) to include a security fix.",
        "cve": "CVE-2022-21699",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "securesystemslib",
        "advisory": "Securesystemslib 0.20.1 drops support for Python 2.7, as it arrived to EOL in January 2020.",
        "cve": "CVE-2021-23336",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "seldon-core",
        "advisory": "Seldon-core 1.7.0 addresses CVEs for Redhat Python based images.\r\nhttps://github.com/SeldonIO/seldon-core/pull/2977",
        "cve": "CVE-2020-8116",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "seldon-core",
        "advisory": "Seldon-core 1.7.0 addresses CVEs for Redhat Python based images.\r\nhttps://github.com/SeldonIO/seldon-core/pull/2977",
        "cve": "CVE-2020-8287",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "seldon-core",
        "advisory": "Seldon-core 1.7.0 addresses CVEs for Redhat Python based images.\r\nhttps://github.com/SeldonIO/seldon-core/pull/2977",
        "cve": "CVE-2020-8265",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "seldon-core",
        "advisory": "Seldon-core 1.7.0 addresses CVEs from Python base Image.\r\nhttps://github.com/SeldonIO/seldon-core/pull/2970",
        "cve": "CVE-2020-26137",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "seldon-core",
        "advisory": "Seldon-core 1.7.0 addresses CVEs from Python base Image.\r\nhttps://github.com/SeldonIO/seldon-core/pull/2970",
        "cve": "CVE-2019-11236",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "seldon-core",
        "advisory": "Seldon-core 1.7.0 addresses CVEs for Redhat Python based images.\r\nhttps://github.com/SeldonIO/seldon-core/pull/2977",
        "cve": "CVE-2020-7788",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "seldon-core",
        "advisory": "Seldon-core 1.7.0 addresses CVEs from Python base Image.\r\nhttps://github.com/SeldonIO/seldon-core/pull/2970",
        "cve": "CVE-2020-1971",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "selenium",
        "advisory": "Selenium 4.15.1 (Python bindings) include a fix for CVE-2023-5590: NULL Pointer Dereference.\r\nhttps://github.com/seleniumhq/selenium/commit/023a0d52f106321838ab1c0997e76693f4dcbdf6",
        "cve": "CVE-2023-5590",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "selenium-duration-50ms",
        "advisory": "Selenium 4.15.1 (Python bindings) include a fix for CVE-2023-5590: NULL Pointer Dereference.\r\nhttps://github.com/seleniumhq/selenium/commit/023a0d52f106321838ab1c0997e76693f4dcbdf6",
        "cve": "CVE-2023-5590",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "sentry",
        "advisory": "Sentry 22.11.0 includes a fix for CVE-2022-23485: In versions of the sentry python library prior to 22.11.0 an attacker with a known valid invite link could manipulate a cookie to allow the same invite link to be reused on multiple accounts when joining an organization. As a result an attacker with a valid invite link can create multiple users and join an organization they may not have been originally invited to. Sentry SaaS customers do not need to take action. Self-hosted Sentry installs on systems which can not upgrade can disable the invite functionality until they are ready to deploy the patched version by editing their 'sentry.conf.py' file (usually located at '~/.sentry/').\r\nhttps://github.com/getsentry/sentry/security/advisories/GHSA-jv85-mqxj-3f9j",
        "cve": "CVE-2022-23485",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "sentry-sdk",
        "advisory": "Sentry-sdk 1.14.0 includes a fix for CVE-2023-28117: When using the Django integration of versions prior to 1.14.0 of the Sentry SDK in a specific configuration it is possible to leak sensitive cookies values, including the session cookie to Sentry. These sensitive cookies could then be used by someone with access to your Sentry issues to impersonate or escalate their privileges within your application. In order for these sensitive values to be leaked, the Sentry SDK configuration must have 'sendDefaultPII' set to 'True'; one must use a custom name for either 'SESSION_COOKIE_NAME' or 'CSRF_COOKIE_NAME' in one's Django settings; and one must not be configured in one's organization or project settings to use Sentry's data scrubbing features to account for the custom cookie names. As of version 1.14.0, the Django integration of the 'sentry-sdk' will detect the custom cookie names based on one's Django settings and will remove the values from the payload before sending the data to Sentry. As a workaround, use the SDK's filtering mechanism to remove the cookies from the payload that is sent to Sentry. For error events, this can be done with the 'before_send' callback method and for performance related events (transactions) one can use the 'before_send_transaction' callback method. Those who want to handle filtering of these values on the server-side can also use Sentry's advanced data scrubbing feature to account for the custom cookie names. Look for the '$http.cookies', '$http.headers', '$request.cookies', or '$request.headers' fields to target with a scrubbing rule.\r\nhttps://github.com/getsentry/sentry-python/security/advisories/GHSA-29pr-6jr8-q5jm",
        "cve": "CVE-2023-28117",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "sentry-sdk",
        "advisory": "Sentry-sdk 1.4.1 includes a fix for a Race Condition vulnerability.\r\nhttps://github.com/getsentry/sentry-python/pull/1203",
        "cve": "PVE-2023-59553",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "sentry-sdk",
        "advisory": "Affected versions of Sentry's Python SDK are vulnerable to unintentional exposure of environment variables to subprocesses despite the env={} setting. In Python's 'subprocess' calls, all environment variables are passed to subprocesses by default. However, if you specifically do not want them to be passed to subprocesses, you may use 'env' argument in 'subprocess' calls. Due to the bug in Sentry SDK, with the Stdlib integration enabled (which is enabled by default), this expectation is not fulfilled, and all environment variables are being passed to subprocesses instead. \r\nAs a workaround, and if passing environment variables to child processes poses a security risk for you, you can disable all default integrations.",
        "cve": "CVE-2024-40647",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "setuptools",
        "advisory": "setuptools 3.0 avoids the potential security vulnerabilities presented by use of tar archives in ez_setup.py. It also leverages the security features added to ZipFile.extract in Python 2.7.4.",
        "cve": "PVE-2021-26133",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "setuptools",
        "advisory": "Setuptools 65.5.1 includes a fix for CVE-2022-40897: Python Packaging Authority (PyPA) setuptools before 65.5.1 allows remote attackers to cause a denial of service via HTML in a crafted package or custom PackageIndex page. There is a Regular Expression Denial of Service (ReDoS) in package_index.py.",
        "cve": "CVE-2022-40897",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "sgx-dcap-quote-verify-python",
        "advisory": "Sgx-dcap-quote-verify-python 0.0.3 includes a statically linked copy of OpenSSL. The version of OpenSSL included in sgx-dcap-quote-verify-python 0.0.1..0.0.2 is vulnerable to a security issue. More details about the OpenSSL vulnerabilities themselves can be found at https://www.openssl.org/news/secadv/20230207.txt\r\nhttps://github.com/advisories/GHSA-344m-qcjq-xgrf",
        "cve": "CVE-2023-0286",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "shinylive",
        "advisory": "Shinylive 0.0.8 includes a fix for CVE-2007-4559: Directory traversal vulnerability in the (1) extract and (2) extractall functions in the tarfile module in Python allows user-assisted remote attackers to overwrite arbitrary files via a .. (dot dot) sequence in filenames in a TAR archive, a related issue to CVE-2001-1267.",
        "cve": "CVE-2007-4559",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "simplejson",
        "advisory": "Simplejson 2.6.1 includes a fix for CVE-2014-4616: Array index error in the scanstring function in the _json module in Python 2.7 through 3.5 and simplejson before 2.6.1 allows context-dependent attackers to read arbitrary process memory via a negative index value in the idx argument to the raw_decode function.\r\nhttps://bugs.python.org/issue21529",
        "cve": "CVE-2014-4616",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "skale-allocator-cli",
        "advisory": "Skale-allocator-cli is a malicious package, typosquatting.\r\nhttps://blog.sonatype.com/trojanized-pypi-package-imitates-a-popular-python-server-library",
        "cve": "PVE-2022-47819",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "skops",
        "advisory": "Deserialization of untrusted data can occur in versions 0.6 or newer of the skops python library, enabling a maliciously crafted model to run arbitrary code on an end user's system when loaded. See CVE-2024-37065.",
        "cve": "CVE-2024-37065",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "slackeventsapi",
        "advisory": "Slackeventsapi 2.1.0 updates minimum Flask version to address security vulnerability.\r\nhttps://github.com/slackapi/python-slack-events-api/pull/45/commits/bdc6abfbb5f6ae50be16750988fc5adddd9a4a80",
        "cve": "CVE-2018-1000656",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "smplejson",
        "advisory": "Smplejson is a typosquatting package. It shows a malicious behavior, for example, it may leak your sensitive data and/or gain unauthorized persistence in your system.\r\nhttps://www.zdnet.com/article/twelve-malicious-python-libraries-found-and-removed-from-pypi/",
        "cve": "PVE-2022-45417",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "smqtk-core",
        "advisory": "Smqtk-core 0.18.2 updates its dependency 'ipython' to v7.16.3 to include a security fix.",
        "cve": "CVE-2022-21699",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "smqtk-dataprovider",
        "advisory": "Smqtk-dataprovider 0.17.0 updates its dependency 'ipython' to v7.16.3 to include a security fix.",
        "cve": "CVE-2022-21699",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "smqtk-descriptors",
        "advisory": "Smqtk-descriptors 0.19.0 updates its dependency 'ipython' to version '7.16.3' to include a security fix.\r\nhttps://github.com/Kitware/SMQTK-Descriptors/commit/64e889344fddb5de64323d6c7d5b2388cfd6483f",
        "cve": "CVE-2022-21699",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "smqtk-detection",
        "advisory": "Smqtk-detection 0.19.0 updates its dependency 'ipython' to v7.16.3 to include a security fix.",
        "cve": "CVE-2022-21699",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "snakemake",
        "advisory": "Snakemake 6.11.1 addresses a race condition related to the execution of multiple Jupyter notebooks concurrently. It provides a temporary IPYTHONDIR for each notebook execution.\r\nhttps://github.com/snakemake/snakemake/pull/1280\r\nhttps://github.com/snakemake/snakemake/commit/4d70da11f810224ddce192ae1472a6380898865f",
        "cve": "PVE-2024-63790",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "snappass",
        "advisory": "Snappass 1.4.1 includes a fix for CVE-2018-10903: A flaw was found in python-cryptography versions between >=1.9.0 and <2.3. The finalize_with_tag API did not enforce a minimum tag length. If a user did not validate the input length prior to passing it to finalize_with_tag an attacker could craft an invalid payload with a shortened tag (e.g. 1 byte) such that they would have a 1 in 256 chance of passing the MAC check. GCM tag forgeries can cause key leakage.",
        "cve": "CVE-2018-10903",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "snowflake-connector-python",
        "advisory": "Snowflake-connector-python 2.8.2 includes a fix for CVE-2022-42965: An exponential ReDoS (Regular Expression Denial of Service) can be triggered in the snowflake-connector-python PyPI package, when an attacker is able to supply arbitrary input to the undocumented get_file_transfer_type method.",
        "cve": "CVE-2022-42965",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "snowflake-connector-python",
        "advisory": "Snowflake-connector-python 3.0.2 includes a fix for CVE-2023-34233: A command injection vulnerability in the Snowflake Python connector via SSO browser URL authentication.\r\nhttps://github.com/snowflakedb/snowflake-connector-python/commit/1cdbd3b1403c5ef520d7f4d9614fe35165e101ac\r\nhttps://github.com/snowflakedb/snowflake-connector-python/pull/1480\r\nhttps://github.com/snowflakedb/snowflake-connector-python/security/advisories/GHSA-5w5m-pfw9-c8fp",
        "cve": "CVE-2023-34233",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "social-auth-app-django",
        "advisory": "Python Social Auth is a social authentication/registration mechanism. Prior to version 5.4.1, due to default case-insensitive collation in MySQL or MariaDB databases, third-party authentication user IDs are not case-sensitive and could cause different IDs to match. This issue has been addressed by a fix released in version 5.4.1. An immediate workaround would be to change collation of the affected field. See CVE-2024-32879.",
        "cve": "CVE-2024-32879",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "sockjs-tornado",
        "advisory": "Versions of sockjs-tornado, a Python server side counterpart of SockJS-client browser library utilizing the Tornado framework, are susceptible to a Cross Site Scripting (XSS) vulnerability. This issue arises from the HTMLFILE_HEAD template's incorporation of unsanitized user data, with an incomplete mitigation previously attempted.",
        "cve": "PVE-2024-99862",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "sparkfish-python-pptx",
        "advisory": "Sparkfish-python-pptx version 0.6.12 updates its dependencies to avoid using a vulnerable version of Pillow. The Pillow library version is updated from 2.6.1 to >=3.3.2 to address the security issue identified in CVE-2016-9190.",
        "cve": "CVE-2016-9190",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "sparkfish-python-pptx",
        "advisory": "Sparkfish-python-pptx version 0.6.12 updates its dependencies to avoid using a vulnerable version of Pillow. The Pillow library version is updated from 2.6.1 to >=3.3.2 to address the security issue identified in CVE-2016-9189.",
        "cve": "CVE-2016-9189",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "sparkfish-python-pptx",
        "advisory": "Sparkfish-python-pptx version 0.6.23 updates its support for Pillow to version 10+ to address security vulnerabilities, including CVE-2023-44271.",
        "cve": "CVE-2023-44271",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "speach",
        "advisory": "Speach 0.1a13 uses 'defusedxml' automatically instead of Python's default parser to avoid XML injection.\r\nhttps://github.com/neocl/speach/commit/b992031fa2c0acc7924cd2442d9f77da1cfdf4a3",
        "cve": "CVE-2013-1665",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "speach",
        "advisory": "Speach 0.1a13 uses 'defusedxml' automatically instead of Python's default parser to avoid XML injection.\r\nhttps://github.com/neocl/speach/commit/b992031fa2c0acc7924cd2442d9f77da1cfdf4a3",
        "cve": "CVE-2013-1664",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "specmatic",
        "advisory": "Specmatic 0.24.0 upgrades its dependency Werkzeug to 2.3.8 to resolve vulnerability issues.\r\nhttps://github.com/znsio/specmatic-python-extensions/commit/c2233710e6195d9392258f68ad5d4cb13436c7a6",
        "cve": "PVE-2023-62019",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "spectrafit",
        "advisory": "Spectrafit 0.11.0 updates python in Dockerfile from '3.8-slim' to '3.9-slim' to include security fixes.",
        "cve": "CVE-2022-34903",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "spectrafit",
        "advisory": "Spectrafit 0.11.0 updates python in Dockerfile from '3.8-slim' to '3.9-slim' to include security fixes.",
        "cve": "CVE-2022-2068",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "spf-validator",
        "advisory": "Spf-validator 1.2.2 updates its dependency 'dnspython' to include a security fix.",
        "cve": "CVE-2023-29483",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "splunk-sdk",
        "advisory": "Splunk-sdk 1.6.16 includes a fix for a ReDoS vulnerability.\r\nhttps://github.com/splunk/splunk-sdk-python/pull/312",
        "cve": "PVE-2023-59733",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "splunk-sdk",
        "advisory": "Splunk-SDK-Python before 1.6.6 does not properly verify untrusted TLS server certificates, which could result in man-in-the-middle attacks.",
        "cve": "CVE-2019-5729",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "spyse-python",
        "advisory": "Spyse-python 2.0.0 includes fixes for email and vulnerabilities scrolling.",
        "cve": "PVE-2021-41062",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "sqla-yaml-fixtures",
        "advisory": "Sqla_yaml_fixtures 0.9.1 is affected by CVE-2019-3575: It allows local users to execute arbitrary python code via the fixture_text argument in sqla_yaml_fixtures.load.\r\nhttps://github.com/schettino72/sqla_yaml_fixtures/issues/20",
        "cve": "CVE-2019-3575",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "sqlfluff",
        "advisory": "SQLFluff 2.1.2 includes a fix for an Arbitrary Code Execution vulnerability. In environments where untrusted users have access to the config files (e.g. .sqlfluff), there is a potential security vulnerability where those users could use the library_path config value to allow arbitrary Python code to be executed via macros.\r\nhttps://github.com/sqlfluff/sqlfluff/pull/4925\r\nhttps://github.com/sqlfluff/sqlfluff/security/advisories/GHSA-jqhc-m2j3-fjrx",
        "cve": "CVE-2023-36830",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "srmd-ncnn-vulkan-python",
        "advisory": "Srmd-ncnn-vulkan-python 1.0.1 throughout 1.0.2 ship with a version of C library 'libwebp' which is affected by a high risk vulnerability.\r\nhttps://inspector.pypi.io/project/srmd-ncnn-vulkan-python/1.0.2/packages/1d/25/a626ad22548228cc72ad12f8b00bca017998783b6c3bbd4f62a253815707/srmd-ncnn-vulkan-python-1.0.2.tar.gz/srmd-ncnn-vulkan-python-1.0.2/srmd_ncnn_vulkan_python/srmd-ncnn-vulkan/src/libwebp/ChangeLog",
        "cve": "CVE-2023-4863",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ssh-decorate",
        "advisory": "Ssh-decorate was compromised. Versions 0.28 through 0.31 were backdoored to steal SSH Credentials.\r\nhttps://www.bleepingcomputer.com/news/security/backdoored-python-library-caught-stealing-ssh-credentials/",
        "cve": "PVE-2022-45471",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "st2client",
        "advisory": "StackStorm before 3.4.1, in some situations, has an infinite loop that consumes all available memory and disk space. This can occur if Python 3.x is used, the locale is not utf-8, and there is an attempt to log Unicode data (from an action or rule name). See CVE-2021-28667.",
        "cve": "CVE-2021-28667",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "starkbank-ecdsa",
        "advisory": "The verify function in the Stark Bank Python ECDSA library (aka starkbank-escada or ecdsa-python) before 2.0.1 fails to check that the signature is non-zero, which allows attackers to forge signatures on arbitrary messages.",
        "cve": "CVE-2021-43572",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "starlette",
        "advisory": "Starlette 0.25.0 includes a fix for CVE-2023-30798: The MultipartParser usage in Encode's Starlette python framework before versions 0.25.0 allows an unauthenticated and remote attacker to specify any number of form fields or files which can cause excessive memory usage resulting in denial of service of the HTTP service.",
        "cve": "CVE-2023-30798",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "starlette",
        "advisory": "When using form data, `python-multipart` employs a Regular Expression to parse the HTTP `Content-Type` header. This creates a vulnerability where an attacker can send a specially crafted `Content-Type` option, causing significant CPU resource consumption and indefinitely stalling the server by locking the main event loop, rendering the server unable to process further requests. This issue particularly affects FastAPI servers parsing form data, leading to a Denial of Service (DoS) condition when the number of malicious requests exceeds the number of available server workers. However, this vulnerability does not impact the processing of JSON data through the `/submit_json` endpoint. It is specific to a defined set of versions of FastAPI and `python-multipart` when handling form data.",
        "cve": "PVE-2024-68094",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "starwhale",
        "advisory": "Starwhale 0.3.1 includes a fix for CVE-2007-4559: Directory traversal vulnerability in the (1) extract and (2) extractall functions in the tarfile module in Python allows user-assisted remote attackers to overwrite arbitrary files via a .. (dot dot) sequence in filenames in a TAR archive, a related issue to CVE-2001-1267.",
        "cve": "CVE-2007-4559",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "stormpath",
        "advisory": "Stormpath before 2.5.0 doesn't validate JWT correctly.\r\nhttps://github.com/stormpath/stormpath-sdk-python/commit/1289135cd5bb73705297bf64cb7897c6f6e457b0",
        "cve": "PVE-2021-26145",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "stormpath-sdk",
        "advisory": "Stormpath-sdk before 2.5.0 doesn't validate JWT correctly.\r\nhttps://github.com/stormpath/stormpath-sdk-python/commit/1289135cd5bb73705297bf64cb7897c6f6e457b0",
        "cve": "PVE-2021-26146",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "streamlit-webrtc",
        "advisory": "Streamlit-webrtc 0.44.2 updates its dependency 'gitpython' to v3.1.30 to include a security fix.",
        "cve": "CVE-2022-24439",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "suffer",
        "advisory": "Suffer is a malicious package, typosquatting. \"The aforementioned package could be abused to become an entry point for more sophisticated threats, enabling the attacker to execute remote code on the target machine, amass system information, plunder credit card information and passwords auto-saved in Chrome and Edge browsers, and even steal Discord authentication tokens to impersonate the victim\".\r\nhttps://thehackernews.com/2021/07/several-malicious-typosquatted-python.html",
        "cve": "PVE-2022-45451",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "svglib",
        "advisory": "The svglib package through 0.9.3 for Python allows XXE attacks via an svg2rlg call. See: CVE-2020-10799.",
        "cve": "CVE-2020-10799",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "swift",
        "advisory": "OpenStack Object Storage (swift) before 1.7.0 uses the loads function in the pickle Python module unsafely when storing and loading metadata in memcached, which allows remote attackers to execute arbitrary code via a crafted pickle object.",
        "cve": "CVE-2012-4406",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "swift",
        "advisory": "Swift 2.0.2 includes a fix for CVE-2013-6396: The OpenStack Python client library for Swift (python-swiftclient) 1.0 through 2.0.2 does not verify X.509 certificates from SSL servers, which allows man-in-the-middle attackers to spoof servers and obtain sensitive information via a crafted certificate.\r\nhttps://bugs.launchpad.net/python-swiftclient/+bug/1199783",
        "cve": "CVE-2013-6396",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "syft",
        "advisory": "Syft 0.8.2b40 updates its dependency 'RestrictedPython' to 6.2 to include a security fix.\r\nhttps://github.com/OpenMined/PySyft/pull/8177/commits/5fb618fbf04ed26cae34d635ddf21d05100367ca",
        "cve": "CVE-2023-41039",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "symphony-bdk-python",
        "advisory": "Symphony-bdk-python 1.2.0 starts using the more secure defusedxml library to avoid XML vulnerabilities.\r\nhttps://github.com/finos/symphony-bdk-python/commit/114c9abb763cb883d6cdb471cfca38afc32f1adc",
        "cve": "CVE-2013-1664",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "symphony-bdk-python",
        "advisory": "Symphony-bdk-python 1.2.0 starts using the more secure defusedxml library to avoid XML vulnerabilities.\r\nhttps://github.com/finos/symphony-bdk-python/commit/114c9abb763cb883d6cdb471cfca38afc32f1adc",
        "cve": "CVE-2013-1665",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "symphony-bdk-python",
        "advisory": "Symphony-bdk-python version 1.3.5 updates its dependency 'urllib3' to v1.26.5 to include a security fix.",
        "cve": "CVE-2021-33503",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "symphony-bdk-python",
        "advisory": "Symphony-bdk-python 2.0b3 removes potential leak of sensitive information on logs.\r\nhttps://github.com/finos/symphony-bdk-python/pull/185/commits/0d3b600a14a322c69fec977a3bbfd49de4e74978",
        "cve": "PVE-2022-45399",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "synse",
        "advisory": "Synse 1.0.0 (python client) updates to work with Synse v3 API version, which contains several security fixes.",
        "cve": "CVE-2018-18074",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "synse",
        "advisory": "Synse 1.0.0 (python client) updates to work with Synse v3 API version, which contains several security fixes (this one is about a code injection vulnerability in Sanic dependency).",
        "cve": "PVE-2021-42108",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "synse",
        "advisory": "Synse 1.0.0 (python client) updates to work with Synse v3 API version, which contains several security fixes.",
        "cve": "CVE-2018-1000518",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "synse",
        "advisory": "Synse 1.0.0 (python client) updates to work with Synse v3 API version, which contains several security fixes.",
        "cve": "CVE-2017-18342",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tableauserverclient",
        "advisory": "Tableauserverclient 0.18.0 uses defusedxml library to reduce XML attacks surface.\r\nhttps://github.com/tableau/server-client-python/pull/1002",
        "cve": "PVE-2022-48010",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tablib",
        "advisory": "Tablib 0.11.5 includes a fix for CVE-2017-2810: An exploitable vulnerability exists in the Databook loading functionality of Tablib 0.11.4. A yaml loaded Databook can execute arbitrary python commands resulting in command execution. An attacker can insert python into loaded yaml to trigger this vulnerability.\r\nhttps://github.com/jazzband/tablib/commit/69abfc3ada5d754cb152119c0b4777043657cb6e",
        "cve": "CVE-2017-2810",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tartufo",
        "advisory": "Tartufo version 4.0.1 upgrades its GitPython dependency to version 3.1.30 in response to security concerns raised by CVE-2022-24439.\r\nhttps://github.com/godaddy/tartufo/pull/448/commits/38501c0c10b3a0c11498cc0230365078867770d7",
        "cve": "CVE-2022-24439",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "task-queue",
        "advisory": "Task-queue 2.7.0 includes a fix for a race condition vulnerability.\r\nhttps://github.com/seung-lab/python-task-queue/commit/ec30b4e659975217b0518a7e7c59b27c537f7e90",
        "cve": "PVE-2023-60908",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tasos-apiauth",
        "advisory": "Tasos-apiauth version 0.1.1 has updated its fastapi dependency to mitigate the CVE-2024-24762 vulnerability, which arises from its starlette dependency and the python-multipart package's susceptibility to a Content-Type Header ReDoS attack.",
        "cve": "CVE-2024-24762",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tatoebatools",
        "advisory": "Tatoebatools 0.2.2 includes a fix for CVE-2007-4559: Directory traversal vulnerability in the (1) extract and (2) extractall functions in the tarfile module in Python allows user-assisted remote attackers to overwrite arbitrary files via a .. (dot dot) sequence in filenames in a TAR archive, a related issue to CVE-2001-1267.",
        "cve": "CVE-2007-4559",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "td-ameritrade-python-api",
        "advisory": "Td-ameritrade-python-api 0.3.2 no longer auto-generates 'credentials.json' in the utility folder out of a concern for security. Instead, the user must specify where they would like to cache their refresh token.",
        "cve": "PVE-2021-39230",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "td-ameritrade-python-api",
        "advisory": "Versions of the td-ameritrade-python-api library are susceptible to information exposure due to the automatic generation of a credentials.json file in the utility folder, which could potentially expose sensitive information.",
        "cve": "PVE-2024-99855",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "teamscale-cli",
        "advisory": "Teamscale-cli 9.1.2 updates its dependency 'gitpython' to v3.1.35 to include a security fix.",
        "cve": "CVE-2023-41040",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "telnservrr",
        "advisory": "Telnservrr is a malicious package, typosquatting the popular Python 'requests' library. It embeds source code that retrieves a Golang-based ransomware binary from a remote server.\r\nhttps://thehackernews.com/2022/12/malware-strains-targeting-python-and.html",
        "cve": "PVE-2023-52905",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow",
        "advisory": "Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15207: In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, to mimic Python's indexing with negative values, TFLite uses 'ResolveAxis' to convert negative values to positive indices. However, the only check that the converted index is now valid is only present in debug builds. If the 'DCHECK' does not trigger, then code execution moves ahead with a negative index. This, in turn, results in accessing data out of bounds which results in segfaults and/or data corruption.\r\nhttps://github.com/tensorflow/tensorflow/security/advisories/GHSA-q4qf-3fc6-8x34",
        "cve": "CVE-2020-15207",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow",
        "advisory": "Tensorflow versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2 and 2.4.0 includes a fix for CVE-2020-26268: In affected versions, the tf.raw_ops.ImmutableConst operation returns a constant tensor created from a memory mapped file which is assumed immutable. However, if the type of the tensor is not an integral type, the operation crashes the Python interpreter as it tries to write to the memory area. If the file is too small, TensorFlow properly returns an error as the memory area has fewer bytes than what is needed for the tensor it creates. However, as soon as there are enough bytes, the above snippet causes a segmentation fault. This is because the allocator used to return the buffer data is not marked as returning an opaque handle since the needed virtual method is not overridden.",
        "cve": "CVE-2020-26268",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow",
        "advisory": "Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41213: In affected versions, the code behind 'tf.function' API can be made to deadlock when two 'tf.function' decorated Python functions are mutually recursive. This occurs due to using a non-reentrant 'Lock' Python object. Loading any model which contains mutually recursive functions is vulnerable. An attacker can cause denial of service by causing users to load such models and calling a recursive 'tf.function', although this is not a frequent scenario.\r\nhttps://github.com/tensorflow/tensorflow/security/advisories/GHSA-h67m-xg8f-fxcf\r\nhttps://github.com/tensorflow/tensorflow/commit/afac8158d43691661ad083f6dd9e56f327c1dcb7",
        "cve": "CVE-2021-41213",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow",
        "advisory": "Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21728: The implementation of shape inference for 'ReverseSequence' does not fully validate the value of 'batch_dim' and can result in a heap OOB read. There is a check to make sure the value of 'batch_dim' does not go over the rank of the input, but there is no check for negative values. Negative dimensions are allowed in some cases to mimic Python's negative indexing (i.e., indexing from the end of the array), however if the value is too negative then the implementation of 'Dim' would access elements before the start of an array.\r\nhttps://github.com/tensorflow/tensorflow/security/advisories/GHSA-6gmv-pjp9-p8w8",
        "cve": "CVE-2022-21728",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow",
        "advisory": "Tensorflow is an Open Source Machine Learning Framework. A malicious user can cause a denial of service by altering a `SavedModel` such that assertions in `function.cc` would be falsified and crash the Python interpreter. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.",
        "cve": "CVE-2022-23586",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow",
        "advisory": "Impact: A recurring instance of CVE-2022-35935 has been observed and addressed. In this case, `SobolSample` is prone to denial of service due to assumed scalar inputs. You can replicate this using the following code in Python:\r\n\r\n```python \r\nimport tensorflow as tf \r\ntf.raw_ops.SobolSample(dim=tf.constant([1,0]), num_results=tf.constant([1]), skip=tf.constant([1])) \r\n```\r\n\r\nPatches: Corrective measures have been taken and the issue has been patched via GitHub commits c65c67f88ad770662e8f191269a907bf2b94b1bf and 02400ea266bd811fc016a848445de1bbff3a23a0. These fixes will be integrated in the forthcoming TensorFlow 2.11 release and will also be added to TensorFlow 2.10.1, 2.9.3, and 2.8.4 as they fall within the supported range. Furthermore, the initial commit will be incorporated into TensorFlow 2.7.4.\r\n\r\nFor more information: You can refer to the TensorFlow's security guide for comprehensive insights into the security model and for details on how to contact them for queries or issues.\r\n\r\nAttribution: This vulnerability was reported by Kang Hong Jin from Singapore Management University, Neophytos Christou from Secure Systems Labs at Brown University, Liu Liyuan from the Information System & Security and Countermeasures Experiments Center at Beijing Institute of Technology, and Pattarakrit Rattankul.",
        "cve": "PVE-2023-99921",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow",
        "advisory": "The effect of CVE-2022-35991 was seen once more, where TensorListScatter and TensorListScatterV2 could potentially crash due to non scalar inputs in the element_shape parameter while in eager mode. This issue has been identified and resolved. The issue was identified when the following Python code was executed:\r\n\r\n```python \r\nimport tensorflow as tf \r\narg_0=tf.random.uniform(shape=(2, 2, 2), dtype=tf.float16, maxval=None) \r\narg_1=tf.random.uniform(shape=(2, 2, 2), dtype=tf.int32, maxval=65536) \r\narg_2=tf.random.uniform(shape=(2, 2, 2), dtype=tf.int32, maxval=65536) \r\narg_3='' \r\ntf.raw_ops.TensorListScatter(tensor=arg_0, indices=arg_1,  element_shape=arg_2, name=arg_3) \r\n```\r\n\r\nA patch to resolve this issue is available in the GitHub commit bf9932fc907aff0e9e8cccf769e8b00d30fd81a1. This fix will be part of TensorFlow 2.11. Additionally, the commitment will be selected for TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these versions are also known to be affected and still under supported range.\r\n\r\nFor further details, please refer to TensorFlow's security guide. If there is any issue or question, contact us please.\r\n\r\nThe person who brought this vulnerability to our attention is Pattarakrit Rattankul.",
        "cve": "PVE-2023-99920",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow",
        "advisory": "Tensorflow versions 1.15.2 and 2.0.1 includes a fix for CVE-2020-5215: In TensorFlow before 1.15.2 and 2.0.1, converting a string (from Python) to a tf.float16 value results in a segmentation fault in eager mode as the format checks for this use case are only in the graph mode. This issue can lead to denial of service in inference/training where a malicious attacker can send a data point which contains a string instead of a tf.float16 value. Similar effects can be obtained by manipulating saved models and checkpoints whereby replacing a scalar tf.float16 value with a scalar string will trigger this issue due to automatic conversions. This can be easily reproduced by tf.constant(\"hello\", tf.float16), if eager execution is enabled.",
        "cve": "CVE-2020-5215",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow",
        "advisory": "Tensorflow versions 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 include a fix for CVE-2021-29567: Due to lack of validation in 'tf.raw_ops.SparseDenseCwiseMul', an attacker can trigger denial of service via 'CHECK'-fails or accesses to outside the bounds of heap allocated data. Since the implementation (https://github.com/tensorflow/tensorflow/blob/38178a2f7a681a7835bb0912702a134bfe3b4d84/tensorflow/core/kernels/sparse_dense_binary_op_shared.cc#L68-L80), it only validates the rank of the input arguments but no constraints between dimensions (https://www.tensorflow.org/api_docs/python/tf/raw_ops/SparseDenseCwiseMul) and an attacker can abuse them to trigger internal 'CHECK' assertions (and cause program termination, denial of service) or to write to memory outside of bounds of heap allocated tensor buffers.",
        "cve": "CVE-2021-29567",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow",
        "advisory": "Tensorflow versions 2.2.1 and 2.3.1 include a fix for CVE-2020-15193: In Tensorflow before versions 2.2.1 and 2.3.1, the implementation of \"dlpack.to_dlpack\" can be made to use uninitialized memory resulting in further memory corruption. This is because the pybind11 glue code assumes that the argument is a tensor. However, there is nothing stopping users from passing in a Python object instead of a tensor. The uninitialized memory address is due to a \"reinterpret_cast\". Since the \"PyObject\" is a Python object, not a Tensorflow tensor, the cast to \"EagerTensor\" fails. The issue was patched in commit 22e07fb204386768e5bcbea563641ea11f96ceb8\r\nhttps://github.com/tensorflow/tensorflow/security/advisories/GHSA-rjjg-hgv6-h69v",
        "cve": "CVE-2020-15193",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow",
        "advisory": "Tensorflow 2.5.0, 2.4.2, 2.3.3, 2.2.3, and 2.1.4 include a fix for CVE-2021-29614: The implementation of 'tf.io.decode_raw' produces incorrect results and crashes the Python interpreter when combining 'fixed_length' and wider datatypes. The implementation of the padded version (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc) is buggy due to a confusion about pointer arithmetic rules. First, the code computes (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L61) the width of each output element by dividing the 'fixed_length' value to the size of the type argument. The 'fixed_length' argument is also used to determine the size needed for the output tensor (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L63-L79). This is followed by reencoding code (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L85-L94). The erroneous code is the last line above: it is moving the 'out_data' pointer by 'fixed_length * sizeof (T)' bytes whereas it only copied at most 'fixed_length' bytes from the input. This results in parts of the input not being decoded into the output. Furthermore, because the pointer advance is far wider than desired, this quickly leads to writing to outside the bounds of the backing data. This OOB write leads to interpreter crash in the reproducer mentioned here, but more severe attacks can be mounted too, given that this gadget allows writing to periodically placed locations in memory.",
        "cve": "CVE-2021-29614",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow",
        "advisory": "Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29539: TensorFlow is an end-to-end open source platform for machine learning. Calling `tf.raw_ops.ImmutableConst`(https://www.tensorflow.org/api_docs/python/tf/raw_ops/ImmutableConst) with a `dtype` of `tf.resource` or `tf.variant` results in a segfault in the implementation as code assumes that the tensor contents are pure scalars. We have patched the issue in 4f663d4b8f0bec1b48da6fa091a7d29609980fa4 and will release TensorFlow 2.5.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved. If using `tf.raw_ops.ImmutableConst` in code, you can prevent the segfault by inserting a filter for the `dtype` argument.",
        "cve": "CVE-2021-29539",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow",
        "advisory": "Tensorflow 2.5.0, 2.4.2, 2.3.3, 2.2.3 and 2.1.4 include a fix for CVE-2021-29548: An attacker can cause a runtime division by zero error and denial of service in `tf.raw_ops.QuantizedBatchNormWithGlobalNormalization`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/55a97caa9e99c7f37a0bbbeb414dc55553d3ae7f/tensorflow/core/kernels/quantized_batch_norm_op.cc) does not validate all constraints specified in the op's contract (https://www.tensorflow.org/api_docs/python/tf/raw_ops/QuantizedBatchNormWithGlobalNormalization).",
        "cve": "CVE-2021-29548",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow",
        "advisory": "Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29513: Calling TF operations with tensors of non-numeric types when the operations expect numeric tensors result in null pointer dereferences. The conversion from Python array to C++ array (https://github.com/tensorflow/tensorflow/blob/ff70c47a396ef1e3cb73c90513da4f5cb71bebba/tensorflow/python/lib/core/ndarray_tensor.cc#L113-L169) is vulnerable to a type confusion.",
        "cve": "CVE-2021-29513",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow",
        "advisory": "Tensorflow versions 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 include a fix for CVE-2021-29512: If the 'splits' argument of 'RaggedBincount' does not specify a valid 'SparseTensor' (https://www.tensorflow.org/api_docs/python/tf/sparse/SparseTensor), then an attacker can trigger a heap buffer overflow. This will cause a read from outside the bounds of the 'splits' tensor buffer in the implementation of the 'RaggedBincount' op (https://github.com/tensorflow/tensorflow/blob/8b677d79167799f71c42fd3fa074476e0295413a/tensorflow/core/kernels/bincount_op.cc#L430-L433). Before the 'for' loop, 'batch_idx' is set to 0. The user controls the 'splits' array, making it contain only one element, 0. Thus, the code in the 'while' loop would increment 'batch_idx' and then try to read 'splits(1)', which is outside of bounds.",
        "cve": "CVE-2021-29512",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow",
        "advisory": "Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29514: If the 'splits' argument of 'RaggedBincount' does not specify a valid 'SparseTensor' (https://www.tensorflow.org/api_docs/python/tf/sparse/SparseTensor), then an attacker can trigger a heap buffer overflow. This will cause a read from outside the bounds of the 'splits' tensor buffer in the implementation of the 'RaggedBincount' op (https://github.com/tensorflow/tensorflow/blob/8b677d79167799f71c42fd3fa074476e0295413a/tensorflow/core/kernels/bincount_op.cc#L430-L446). Before the 'for' loop, 'batch_idx' is set to 0. The attacker sets 'splits(0)' to be 7, hence the 'while' loop does not execute and 'batch_idx' remains 0. This then results in writing to 'out(-1, bin)', which is before the heap allocated buffer for the output tensor.",
        "cve": "CVE-2021-29514",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow",
        "advisory": "Tensorflow 2.5.0, 2.4.2, 2.3.3, 2.2.3, and 2.1.4 include a fix for CVE-2021-29572: The implementation of `tf.raw_ops.SdcaOptimizer` triggers undefined behavior due to dereferencing a null pointer. The implementation (https://github.com/tensorflow/tensorflow/blob/60a45c8b6192a4699f2e2709a2645a751d435cc3/tensorflow/core/kernels/sdca_internal.cc) does not validate that the user supplied arguments satisfy all constraints expected by the op(https://www.tensorflow.org/api_docs/python/tf/raw_ops/SdcaOptimizer).",
        "cve": "CVE-2021-29572",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow",
        "advisory": "Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29571: The implementation of 'tf.raw_ops.MaxPoolGradWithArgmax' can cause reads outside of bounds of heap allocated data if attacker supplies specially crafted inputs. The implementation (https://github.com/tensorflow/tensorflow/blob/31bd5026304677faa8a0b77602c6154171b9aec1/tensorflow/core/kernels/image/draw_bounding_box_op.cc#L116-L130) assumes that the last element of 'boxes' input is 4, as required by the op (https://www.tensorflow.org/api_docs/python/tf/raw_ops/DrawBoundingBoxesV2). Since this is not checked attackers passing values less than 4 can write outside of bounds of heap allocated objects and cause memory corruption. If the last dimension in 'boxes' is less than 4, accesses similar to 'tboxes(b, bb, 3)' will access data outside of bounds. Further during code execution there are also writes to these indices.",
        "cve": "CVE-2021-29571",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow",
        "advisory": "Tensorflow version 2.3.4, 2.4.3, 2.5.1, 2.6.0 and 2.7.0 include a fix for CVE-2021-37678:\r\nIn affected versions, TensorFlow and Keras can be tricked to perform arbitrary code execution when deserializing a Keras model from YAML format. The implementation(https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/python/keras/saving/model_config.py#L66-L104) uses \"yaml.unsafe_load\" which can perform arbitrary code execution on the input. Given that YAML format support requires a significant amount of work, the Tensorflow team has removed it for now. The Tensorflow team has patched the issue in GitHub commit 23d6383eb6c14084a8fc3bdf164043b974818012.\r\nhttps://github.com/tensorflow/tensorflow/security/advisories/GHSA-r6jx-9g48-2r5r\r\nhttps://github.com/tensorflow/tensorflow/commit/23d6383eb6c14084a8fc3bdf164043b974818012",
        "cve": "CVE-2021-37678",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow",
        "advisory": "Tensorflow is an Open Source Machine Learning Framework. The TFG dialect of TensorFlow (MLIR) makes several assumptions about the incoming `GraphDef` before converting it to the MLIR-based dialect. If an attacker changes the `SavedModel` format on disk to invalidate these assumptions and the `GraphDef` is then converted to MLIR-based IR then they can cause a crash in the Python interpreter. Under certain scenarios, heap OOB read/writes are possible. These issues have been discovered via fuzzing and it is possible that more weaknesses exist. We will patch them as they are discovered.",
        "cve": "CVE-2022-23594",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-cpu",
        "advisory": "Tensorflow-cpu versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15207: In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, to mimic Python's indexing with negative values, TFLite uses 'ResolveAxis' to convert negative values to positive indices. However, the only check that the converted index is now valid is only present in debug builds. If the 'DCHECK' does not trigger, then code execution moves ahead with a negative index. This, in turn, results in accessing data out of bounds which results in segfaults and/or data corruption.\nhttps://github.com/tensorflow/tensorflow/security/advisories/GHSA-q4qf-3fc6-8x34",
        "cve": "CVE-2020-15207",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-cpu",
        "advisory": "Tensorflow-cpu versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2 and 2.4.0 includes a fix for CVE-2020-26268: In affected versions, the tf.raw_ops.ImmutableConst operation returns a constant tensor created from a memory mapped file which is assumed immutable. However, if the type of the tensor is not an integral type, the operation crashes the Python interpreter as it tries to write to the memory area. If the file is too small, TensorFlow properly returns an error as the memory area has fewer bytes than what is needed for the tensor it creates. However, as soon as there are enough bytes, the above snippet causes a segmentation fault. This is because the allocator used to return the buffer data is not marked as returning an opaque handle since the needed virtual method is not overridden.",
        "cve": "CVE-2020-26268",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-cpu",
        "advisory": "Tensorflow-cpu versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41213: In affected versions, the code behind 'tf.function' API can be made to deadlock when two 'tf.function' decorated Python functions are mutually recursive. This occurs due to using a non-reentrant 'Lock' Python object. Loading any model which contains mutually recursive functions is vulnerable. An attacker can cause denial of service by causing users to load such models and calling a recursive 'tf.function', although this is not a frequent scenario.\nhttps://github.com/tensorflow/tensorflow/security/advisories/GHSA-h67m-xg8f-fxcf\nhttps://github.com/tensorflow/tensorflow/commit/afac8158d43691661ad083f6dd9e56f327c1dcb7",
        "cve": "CVE-2021-41213",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-cpu",
        "advisory": "Tensorflow-cpu is an Open Source Machine Learning Framework. A malicious user can cause a denial of service by altering a `SavedModel` such that assertions in `function.cc` would be falsified and crash the Python interpreter. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.",
        "cve": "CVE-2022-23586",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-cpu",
        "advisory": "Tensorflow-cpu versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21728: The implementation of shape inference for 'ReverseSequence' does not fully validate the value of 'batch_dim' and can result in a heap OOB read. There is a check to make sure the value of 'batch_dim' does not go over the rank of the input, but there is no check for negative values. Negative dimensions are allowed in some cases to mimic Python's negative indexing (i.e., indexing from the end of the array), however if the value is too negative then the implementation of 'Dim' would access elements before the start of an array.\nhttps://github.com/tensorflow/tensorflow/security/advisories/GHSA-6gmv-pjp9-p8w8",
        "cve": "CVE-2022-21728",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-cpu",
        "advisory": "Tensorflow-cpu versions 1.15.2 and 2.0.1 includes a fix for CVE-2020-5215: In TensorFlow before 1.15.2 and 2.0.1, converting a string (from Python) to a tf.float16 value results in a segmentation fault in eager mode as the format checks for this use case are only in the graph mode. This issue can lead to denial of service in inference/training where a malicious attacker can send a data point which contains a string instead of a tf.float16 value. Similar effects can be obtained by manipulating saved models and checkpoints whereby replacing a scalar tf.float16 value with a scalar string will trigger this issue due to automatic conversions. This can be easily reproduced by tf.constant(\"hello\", tf.float16), if eager execution is enabled.",
        "cve": "CVE-2020-5215",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-cpu",
        "advisory": "Tensorflow-cpu versions 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 include a fix for CVE-2021-29567: Due to lack of validation in 'tf.raw_ops.SparseDenseCwiseMul', an attacker can trigger denial of service via 'CHECK'-fails or accesses to outside the bounds of heap allocated data. Since the implementation (https://github.com/tensorflow/tensorflow/blob/38178a2f7a681a7835bb0912702a134bfe3b4d84/tensorflow/core/kernels/sparse_dense_binary_op_shared.cc#L68-L80), it only validates the rank of the input arguments but no constraints between dimensions (https://www.tensorflow.org/api_docs/python/tf/raw_ops/SparseDenseCwiseMul) and an attacker can abuse them to trigger internal 'CHECK' assertions (and cause program termination, denial of service) or to write to memory outside of bounds of heap allocated tensor buffers.",
        "cve": "CVE-2021-29567",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-cpu",
        "advisory": "Tensorflow-cpu versions 2.2.1 and 2.3.1 include a fix for CVE-2020-15193: In Tensorflow before versions 2.2.1 and 2.3.1, the implementation of \"dlpack.to_dlpack\" can be made to use uninitialized memory resulting in further memory corruption. This is because the pybind11 glue code assumes that the argument is a tensor. However, there is nothing stopping users from passing in a Python object instead of a tensor. The uninitialized memory address is due to a \"reinterpret_cast\". Since the \"PyObject\" is a Python object, not a Tensorflow tensor, the cast to \"EagerTensor\" fails. The issue was patched in commit 22e07fb204386768e5bcbea563641ea11f96ceb8\nhttps://github.com/tensorflow/tensorflow/security/advisories/GHSA-rjjg-hgv6-h69v",
        "cve": "CVE-2020-15193",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-cpu",
        "advisory": "Tensorflow-cpu 2.5.0, 2.4.2, 2.3.3, 2.2.3, and 2.1.4 include a fix for CVE-2021-29614: The implementation of 'tf.io.decode_raw' produces incorrect results and crashes the Python interpreter when combining 'fixed_length' and wider datatypes. The implementation of the padded version (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc) is buggy due to a confusion about pointer arithmetic rules. First, the code computes (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L61) the width of each output element by dividing the 'fixed_length' value to the size of the type argument. The 'fixed_length' argument is also used to determine the size needed for the output tensor (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L63-L79). This is followed by reencoding code (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L85-L94). The erroneous code is the last line above: it is moving the 'out_data' pointer by 'fixed_length * sizeof (T)' bytes whereas it only copied at most 'fixed_length' bytes from the input. This results in parts of the input not being decoded into the output. Furthermore, because the pointer advance is far wider than desired, this quickly leads to writing to outside the bounds of the backing data. This OOB write leads to interpreter crash in the reproducer mentioned here, but more severe attacks can be mounted too, given that this gadget allows writing to periodically placed locations in memory.",
        "cve": "CVE-2021-29614",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-cpu",
        "advisory": "Tensorflow-cpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29513: Calling TF operations with tensors of non-numeric types when the operations expect numeric tensors result in null pointer dereferences. The conversion from Python array to C++ array (https://github.com/tensorflow/tensorflow/blob/ff70c47a396ef1e3cb73c90513da4f5cb71bebba/tensorflow/python/lib/core/ndarray_tensor.cc#L113-L169) is vulnerable to a type confusion.",
        "cve": "CVE-2021-29513",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-cpu",
        "advisory": "Tensorflow-cpu 2.5.0, 2.4.2, 2.3.3, 2.2.3 and 2.1.4 include a fix for CVE-2021-29548: An attacker can cause a runtime division by zero error and denial of service in `tf.raw_ops.QuantizedBatchNormWithGlobalNormalization`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/55a97caa9e99c7f37a0bbbeb414dc55553d3ae7f/tensorflow/core/kernels/quantized_batch_norm_op.cc) does not validate all constraints specified in the op's contract (https://www.tensorflow.org/api_docs/python/tf/raw_ops/QuantizedBatchNormWithGlobalNormalization).",
        "cve": "CVE-2021-29548",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-cpu",
        "advisory": "Tensorflow-cpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29539: TensorFlow is an end-to-end open source platform for machine learning. Calling `tf.raw_ops.ImmutableConst`(https://www.tensorflow.org/api_docs/python/tf/raw_ops/ImmutableConst) with a `dtype` of `tf.resource` or `tf.variant` results in a segfault in the implementation as code assumes that the tensor contents are pure scalars. We have patched the issue in 4f663d4b8f0bec1b48da6fa091a7d29609980fa4 and will release TensorFlow 2.5.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved. If using `tf.raw_ops.ImmutableConst` in code, you can prevent the segfault by inserting a filter for the `dtype` argument.",
        "cve": "CVE-2021-29539",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-cpu",
        "advisory": "Tensorflow-cpu versions 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 include a fix for CVE-2021-29512: If the 'splits' argument of 'RaggedBincount' does not specify a valid 'SparseTensor' (https://www.tensorflow.org/api_docs/python/tf/sparse/SparseTensor), then an attacker can trigger a heap buffer overflow. This will cause a read from outside the bounds of the 'splits' tensor buffer in the implementation of the 'RaggedBincount' op (https://github.com/tensorflow/tensorflow/blob/8b677d79167799f71c42fd3fa074476e0295413a/tensorflow/core/kernels/bincount_op.cc#L430-L433). Before the 'for' loop, 'batch_idx' is set to 0. The user controls the 'splits' array, making it contain only one element, 0. Thus, the code in the 'while' loop would increment 'batch_idx' and then try to read 'splits(1)', which is outside of bounds.",
        "cve": "CVE-2021-29512",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-cpu",
        "advisory": "Tensorflow-cpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29514: If the 'splits' argument of 'RaggedBincount' does not specify a valid 'SparseTensor' (https://www.tensorflow.org/api_docs/python/tf/sparse/SparseTensor), then an attacker can trigger a heap buffer overflow. This will cause a read from outside the bounds of the 'splits' tensor buffer in the implementation of the 'RaggedBincount' op (https://github.com/tensorflow/tensorflow/blob/8b677d79167799f71c42fd3fa074476e0295413a/tensorflow/core/kernels/bincount_op.cc#L430-L446). Before the 'for' loop, 'batch_idx' is set to 0. The attacker sets 'splits(0)' to be 7, hence the 'while' loop does not execute and 'batch_idx' remains 0. This then results in writing to 'out(-1, bin)', which is before the heap allocated buffer for the output tensor.",
        "cve": "CVE-2021-29514",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-cpu",
        "advisory": "Tensorflow-cpu 2.5.0, 2.4.2, 2.3.3, 2.2.3, and 2.1.4 include a fix for CVE-2021-29572: The implementation of `tf.raw_ops.SdcaOptimizer` triggers undefined behavior due to dereferencing a null pointer. The implementation (https://github.com/tensorflow/tensorflow/blob/60a45c8b6192a4699f2e2709a2645a751d435cc3/tensorflow/core/kernels/sdca_internal.cc) does not validate that the user supplied arguments satisfy all constraints expected by the op(https://www.tensorflow.org/api_docs/python/tf/raw_ops/SdcaOptimizer).",
        "cve": "CVE-2021-29572",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-cpu",
        "advisory": "Tensorflow-cpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29571: The implementation of 'tf.raw_ops.MaxPoolGradWithArgmax' can cause reads outside of bounds of heap allocated data if attacker supplies specially crafted inputs. The implementation (https://github.com/tensorflow/tensorflow/blob/31bd5026304677faa8a0b77602c6154171b9aec1/tensorflow/core/kernels/image/draw_bounding_box_op.cc#L116-L130) assumes that the last element of 'boxes' input is 4, as required by the op (https://www.tensorflow.org/api_docs/python/tf/raw_ops/DrawBoundingBoxesV2). Since this is not checked attackers passing values less than 4 can write outside of bounds of heap allocated objects and cause memory corruption. If the last dimension in 'boxes' is less than 4, accesses similar to 'tboxes(b, bb, 3)' will access data outside of bounds. Further during code execution there are also writes to these indices.",
        "cve": "CVE-2021-29571",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-cpu",
        "advisory": "Tensorflow-cpu version 2.3.4, 2.4.3, 2.5.1, 2.6.0 and 2.7.0 include a fix for CVE-2021-37678:\nIn affected versions, TensorFlow and Keras can be tricked to perform arbitrary code execution when deserializing a Keras model from YAML format. The implementation(https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/python/keras/saving/model_config.py#L66-L104) uses \"yaml.unsafe_load\" which can perform arbitrary code execution on the input. Given that YAML format support requires a significant amount of work, the Tensorflow team has removed it for now. The Tensorflow team has patched the issue in GitHub commit 23d6383eb6c14084a8fc3bdf164043b974818012.\nhttps://github.com/tensorflow/tensorflow/security/advisories/GHSA-r6jx-9g48-2r5r\nhttps://github.com/tensorflow/tensorflow/commit/23d6383eb6c14084a8fc3bdf164043b974818012",
        "cve": "CVE-2021-37678",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-cpu",
        "advisory": "Tensorflow-cpu is an Open Source Machine Learning Framework. The TFG dialect of TensorFlow (MLIR) makes several assumptions about the incoming `GraphDef` before converting it to the MLIR-based dialect. If an attacker changes the `SavedModel` format on disk to invalidate these assumptions and the `GraphDef` is then converted to MLIR-based IR then they can cause a crash in the Python interpreter. Under certain scenarios, heap OOB read/writes are possible. These issues have been discovered via fuzzing and it is possible that more weaknesses exist. We will patch them as they are discovered.",
        "cve": "CVE-2022-23594",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-directml",
        "advisory": "Tensorflow-directml 1.15.4 includes a fix for CVE-2020-15207: In tensorflow-lite before versions 1.15.4, to mimic Python's indexing with negative values, TFLite uses 'ResolveAxis' to convert negative values to positive indices. However, the only check that the converted index is now valid is only present in debug builds. If the 'DCHECK' does not trigger, then code execution moves ahead with a negative index. This, in turn, results in accessing data out of bounds which results in segfaults and/or data corruption.\r\nhttps://github.com/tensorflow/tensorflow/security/advisories/GHSA-q4qf-3fc6-8x34",
        "cve": "CVE-2020-15207",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-gpu",
        "advisory": "Tensorflow-gpu versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15207: In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, to mimic Python's indexing with negative values, TFLite uses 'ResolveAxis' to convert negative values to positive indices. However, the only check that the converted index is now valid is only present in debug builds. If the 'DCHECK' does not trigger, then code execution moves ahead with a negative index. This, in turn, results in accessing data out of bounds which results in segfaults and/or data corruption.\nhttps://github.com/tensorflow/tensorflow/security/advisories/GHSA-q4qf-3fc6-8x34",
        "cve": "CVE-2020-15207",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-gpu",
        "advisory": "Tensorflow-gpu versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2 and 2.4.0 includes a fix for CVE-2020-26268: In affected versions, the tf.raw_ops.ImmutableConst operation returns a constant tensor created from a memory mapped file which is assumed immutable. However, if the type of the tensor is not an integral type, the operation crashes the Python interpreter as it tries to write to the memory area. If the file is too small, TensorFlow properly returns an error as the memory area has fewer bytes than what is needed for the tensor it creates. However, as soon as there are enough bytes, the above snippet causes a segmentation fault. This is because the allocator used to return the buffer data is not marked as returning an opaque handle since the needed virtual method is not overridden.",
        "cve": "CVE-2020-26268",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-gpu",
        "advisory": "Tensorflow-gpu versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41213: In affected versions, the code behind 'tf.function' API can be made to deadlock when two 'tf.function' decorated Python functions are mutually recursive. This occurs due to using a non-reentrant 'Lock' Python object. Loading any model which contains mutually recursive functions is vulnerable. An attacker can cause denial of service by causing users to load such models and calling a recursive 'tf.function', although this is not a frequent scenario.\nhttps://github.com/tensorflow/tensorflow/security/advisories/GHSA-h67m-xg8f-fxcf\nhttps://github.com/tensorflow/tensorflow/commit/afac8158d43691661ad083f6dd9e56f327c1dcb7",
        "cve": "CVE-2021-41213",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-gpu",
        "advisory": "Tensorflow-gpu is an Open Source Machine Learning Framework. A malicious user can cause a denial of service by altering a `SavedModel` such that assertions in `function.cc` would be falsified and crash the Python interpreter. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.",
        "cve": "CVE-2022-23586",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-gpu",
        "advisory": "Tensorflow-gpu versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21728: The implementation of shape inference for 'ReverseSequence' does not fully validate the value of 'batch_dim' and can result in a heap OOB read. There is a check to make sure the value of 'batch_dim' does not go over the rank of the input, but there is no check for negative values. Negative dimensions are allowed in some cases to mimic Python's negative indexing (i.e., indexing from the end of the array), however if the value is too negative then the implementation of 'Dim' would access elements before the start of an array.\nhttps://github.com/tensorflow/tensorflow/security/advisories/GHSA-6gmv-pjp9-p8w8",
        "cve": "CVE-2022-21728",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-gpu",
        "advisory": "Tensorflow-gpu versions 1.15.2 and 2.0.1 includes a fix for CVE-2020-5215: In TensorFlow before 1.15.2 and 2.0.1, converting a string (from Python) to a tf.float16 value results in a segmentation fault in eager mode as the format checks for this use case are only in the graph mode. This issue can lead to denial of service in inference/training where a malicious attacker can send a data point which contains a string instead of a tf.float16 value. Similar effects can be obtained by manipulating saved models and checkpoints whereby replacing a scalar tf.float16 value with a scalar string will trigger this issue due to automatic conversions. This can be easily reproduced by tf.constant(\"hello\", tf.float16), if eager execution is enabled.",
        "cve": "CVE-2020-5215",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-gpu",
        "advisory": "Tensorflow-gpu versions 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 include a fix for CVE-2021-29567: Due to lack of validation in 'tf.raw_ops.SparseDenseCwiseMul', an attacker can trigger denial of service via 'CHECK'-fails or accesses to outside the bounds of heap allocated data. Since the implementation (https://github.com/tensorflow/tensorflow/blob/38178a2f7a681a7835bb0912702a134bfe3b4d84/tensorflow/core/kernels/sparse_dense_binary_op_shared.cc#L68-L80), it only validates the rank of the input arguments but no constraints between dimensions (https://www.tensorflow.org/api_docs/python/tf/raw_ops/SparseDenseCwiseMul) and an attacker can abuse them to trigger internal 'CHECK' assertions (and cause program termination, denial of service) or to write to memory outside of bounds of heap allocated tensor buffers.",
        "cve": "CVE-2021-29567",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-gpu",
        "advisory": "Tensorflow-gpu versions 2.2.1 and 2.3.1 include a fix for CVE-2020-15193: In Tensorflow before versions 2.2.1 and 2.3.1, the implementation of \"dlpack.to_dlpack\" can be made to use uninitialized memory resulting in further memory corruption. This is because the pybind11 glue code assumes that the argument is a tensor. However, there is nothing stopping users from passing in a Python object instead of a tensor. The uninitialized memory address is due to a \"reinterpret_cast\". Since the \"PyObject\" is a Python object, not a Tensorflow tensor, the cast to \"EagerTensor\" fails. The issue was patched in commit 22e07fb204386768e5bcbea563641ea11f96ceb8\nhttps://github.com/tensorflow/tensorflow/security/advisories/GHSA-rjjg-hgv6-h69v",
        "cve": "CVE-2020-15193",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-gpu",
        "advisory": "Tensorflow-gpu 2.5.0, 2.4.2, 2.3.3, 2.2.3, and 2.1.4 include a fix for CVE-2021-29614: The implementation of 'tf.io.decode_raw' produces incorrect results and crashes the Python interpreter when combining 'fixed_length' and wider datatypes. The implementation of the padded version (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc) is buggy due to a confusion about pointer arithmetic rules. First, the code computes (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L61) the width of each output element by dividing the 'fixed_length' value to the size of the type argument. The 'fixed_length' argument is also used to determine the size needed for the output tensor (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L63-L79). This is followed by reencoding code (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L85-L94). The erroneous code is the last line above: it is moving the 'out_data' pointer by 'fixed_length * sizeof (T)' bytes whereas it only copied at most 'fixed_length' bytes from the input. This results in parts of the input not being decoded into the output. Furthermore, because the pointer advance is far wider than desired, this quickly leads to writing to outside the bounds of the backing data. This OOB write leads to interpreter crash in the reproducer mentioned here, but more severe attacks can be mounted too, given that this gadget allows writing to periodically placed locations in memory.",
        "cve": "CVE-2021-29614",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-gpu",
        "advisory": "Tensorflow-gpu 2.5.0, 2.4.2, 2.3.3, 2.2.3 and 2.1.4 include a fix for CVE-2021-29548: An attacker can cause a runtime division by zero error and denial of service in `tf.raw_ops.QuantizedBatchNormWithGlobalNormalization`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/55a97caa9e99c7f37a0bbbeb414dc55553d3ae7f/tensorflow/core/kernels/quantized_batch_norm_op.cc) does not validate all constraints specified in the op's contract (https://www.tensorflow.org/api_docs/python/tf/raw_ops/QuantizedBatchNormWithGlobalNormalization).",
        "cve": "CVE-2021-29548",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-gpu",
        "advisory": "Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29513: Calling TF operations with tensors of non-numeric types when the operations expect numeric tensors result in null pointer dereferences. The conversion from Python array to C++ array (https://github.com/tensorflow/tensorflow/blob/ff70c47a396ef1e3cb73c90513da4f5cb71bebba/tensorflow/python/lib/core/ndarray_tensor.cc#L113-L169) is vulnerable to a type confusion.",
        "cve": "CVE-2021-29513",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-gpu",
        "advisory": "Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29539: TensorFlow is an end-to-end open source platform for machine learning. Calling `tf.raw_ops.ImmutableConst`(https://www.tensorflow.org/api_docs/python/tf/raw_ops/ImmutableConst) with a `dtype` of `tf.resource` or `tf.variant` results in a segfault in the implementation as code assumes that the tensor contents are pure scalars. We have patched the issue in 4f663d4b8f0bec1b48da6fa091a7d29609980fa4 and will release TensorFlow 2.5.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved. If using `tf.raw_ops.ImmutableConst` in code, you can prevent the segfault by inserting a filter for the `dtype` argument.",
        "cve": "CVE-2021-29539",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-gpu",
        "advisory": "Tensorflow-gpu versions 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 include a fix for CVE-2021-29512: If the 'splits' argument of 'RaggedBincount' does not specify a valid 'SparseTensor' (https://www.tensorflow.org/api_docs/python/tf/sparse/SparseTensor), then an attacker can trigger a heap buffer overflow. This will cause a read from outside the bounds of the 'splits' tensor buffer in the implementation of the 'RaggedBincount' op (https://github.com/tensorflow/tensorflow/blob/8b677d79167799f71c42fd3fa074476e0295413a/tensorflow/core/kernels/bincount_op.cc#L430-L433). Before the 'for' loop, 'batch_idx' is set to 0. The user controls the 'splits' array, making it contain only one element, 0. Thus, the code in the 'while' loop would increment 'batch_idx' and then try to read 'splits(1)', which is outside of bounds.",
        "cve": "CVE-2021-29512",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-gpu",
        "advisory": "Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29514: If the 'splits' argument of 'RaggedBincount' does not specify a valid 'SparseTensor' (https://www.tensorflow.org/api_docs/python/tf/sparse/SparseTensor), then an attacker can trigger a heap buffer overflow. This will cause a read from outside the bounds of the 'splits' tensor buffer in the implementation of the 'RaggedBincount' op (https://github.com/tensorflow/tensorflow/blob/8b677d79167799f71c42fd3fa074476e0295413a/tensorflow/core/kernels/bincount_op.cc#L430-L446). Before the 'for' loop, 'batch_idx' is set to 0. The attacker sets 'splits(0)' to be 7, hence the 'while' loop does not execute and 'batch_idx' remains 0. This then results in writing to 'out(-1, bin)', which is before the heap allocated buffer for the output tensor.",
        "cve": "CVE-2021-29514",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-gpu",
        "advisory": "Tensorflow-gpu 2.5.0, 2.4.2, 2.3.3, 2.2.3, and 2.1.4 include a fix for CVE-2021-29572: The implementation of `tf.raw_ops.SdcaOptimizer` triggers undefined behavior due to dereferencing a null pointer. The implementation (https://github.com/tensorflow/tensorflow/blob/60a45c8b6192a4699f2e2709a2645a751d435cc3/tensorflow/core/kernels/sdca_internal.cc) does not validate that the user supplied arguments satisfy all constraints expected by the op(https://www.tensorflow.org/api_docs/python/tf/raw_ops/SdcaOptimizer).",
        "cve": "CVE-2021-29572",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-gpu",
        "advisory": "Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29571: The implementation of 'tf.raw_ops.MaxPoolGradWithArgmax' can cause reads outside of bounds of heap allocated data if attacker supplies specially crafted inputs. The implementation (https://github.com/tensorflow/tensorflow/blob/31bd5026304677faa8a0b77602c6154171b9aec1/tensorflow/core/kernels/image/draw_bounding_box_op.cc#L116-L130) assumes that the last element of 'boxes' input is 4, as required by the op (https://www.tensorflow.org/api_docs/python/tf/raw_ops/DrawBoundingBoxesV2). Since this is not checked attackers passing values less than 4 can write outside of bounds of heap allocated objects and cause memory corruption. If the last dimension in 'boxes' is less than 4, accesses similar to 'tboxes(b, bb, 3)' will access data outside of bounds. Further during code execution there are also writes to these indices.",
        "cve": "CVE-2021-29571",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-gpu",
        "advisory": "Tensorflow-gpu version 2.3.4, 2.4.3, 2.5.1, 2.6.0 and 2.7.0 include a fix for CVE-2021-37678:\nIn affected versions, TensorFlow and Keras can be tricked to perform arbitrary code execution when deserializing a Keras model from YAML format. The implementation(https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/python/keras/saving/model_config.py#L66-L104) uses \"yaml.unsafe_load\" which can perform arbitrary code execution on the input. Given that YAML format support requires a significant amount of work, the Tensorflow team has removed it for now. The Tensorflow team has patched the issue in GitHub commit 23d6383eb6c14084a8fc3bdf164043b974818012.\nhttps://github.com/tensorflow/tensorflow/security/advisories/GHSA-r6jx-9g48-2r5r\nhttps://github.com/tensorflow/tensorflow/commit/23d6383eb6c14084a8fc3bdf164043b974818012",
        "cve": "CVE-2021-37678",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-gpu",
        "advisory": "Tensorflow-gpu is an Open Source Machine Learning Framework. The TFG dialect of TensorFlow (MLIR) makes several assumptions about the incoming `GraphDef` before converting it to the MLIR-based dialect. If an attacker changes the `SavedModel` format on disk to invalidate these assumptions and the `GraphDef` is then converted to MLIR-based IR then they can cause a crash in the Python interpreter. Under certain scenarios, heap OOB read/writes are possible. These issues have been discovered via fuzzing and it is possible that more weaknesses exist. We will patch them as they are discovered.",
        "cve": "CVE-2022-23594",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-macos",
        "advisory": "Tensorflow-macos versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41213: In affected versions, the code behind 'tf.function' API can be made to deadlock when two 'tf.function' decorated Python functions are mutually recursive. This occurs due to using a non-reentrant 'Lock' Python object. Loading any model which contains mutually recursive functions is vulnerable. An attacker can cause denial of service by causing users to load such models and calling a recursive 'tf.function', although this is not a frequent scenario.\nhttps://github.com/tensorflow/tensorflow/security/advisories/GHSA-h67m-xg8f-fxcf\nhttps://github.com/tensorflow/tensorflow/commit/afac8158d43691661ad083f6dd9e56f327c1dcb7",
        "cve": "CVE-2021-41213",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-macos",
        "advisory": "Tensorflow-macos is an Open Source Machine Learning Framework. A malicious user can cause a denial of service by altering a `SavedModel` such that assertions in `function.cc` would be falsified and crash the Python interpreter. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.",
        "cve": "CVE-2022-23586",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-macos",
        "advisory": "Tensorflow-macos versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21728: The implementation of shape inference for 'ReverseSequence' does not fully validate the value of 'batch_dim' and can result in a heap OOB read. There is a check to make sure the value of 'batch_dim' does not go over the rank of the input, but there is no check for negative values. Negative dimensions are allowed in some cases to mimic Python's negative indexing (i.e., indexing from the end of the array), however if the value is too negative then the implementation of 'Dim' would access elements before the start of an array.\nhttps://github.com/tensorflow/tensorflow/security/advisories/GHSA-6gmv-pjp9-p8w8",
        "cve": "CVE-2022-21728",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-macos",
        "advisory": "Tensorflow-macos version 2.3.4, 2.4.3, 2.5.1, 2.6.0 and 2.7.0 include a fix for CVE-2021-37678:\nIn affected versions, TensorFlow and Keras can be tricked to perform arbitrary code execution when deserializing a Keras model from YAML format. The implementation(https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/python/keras/saving/model_config.py#L66-L104) uses \"yaml.unsafe_load\" which can perform arbitrary code execution on the input. Given that YAML format support requires a significant amount of work, the Tensorflow team has removed it for now. The Tensorflow team has patched the issue in GitHub commit 23d6383eb6c14084a8fc3bdf164043b974818012.\nhttps://github.com/tensorflow/tensorflow/security/advisories/GHSA-r6jx-9g48-2r5r\nhttps://github.com/tensorflow/tensorflow/commit/23d6383eb6c14084a8fc3bdf164043b974818012",
        "cve": "CVE-2021-37678",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-macos",
        "advisory": "Tensorflow-macos is an Open Source Machine Learning Framework. The TFG dialect of TensorFlow (MLIR) makes several assumptions about the incoming `GraphDef` before converting it to the MLIR-based dialect. If an attacker changes the `SavedModel` format on disk to invalidate these assumptions and the `GraphDef` is then converted to MLIR-based IR then they can cause a crash in the Python interpreter. Under certain scenarios, heap OOB read/writes are possible. These issues have been discovered via fuzzing and it is possible that more weaknesses exist. We will patch them as they are discovered.",
        "cve": "CVE-2022-23594",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-rocm",
        "advisory": "Tensorflow-rocm versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15207: In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, to mimic Python's indexing with negative values, TFLite uses 'ResolveAxis' to convert negative values to positive indices. However, the only check that the converted index is now valid is only present in debug builds. If the 'DCHECK' does not trigger, then code execution moves ahead with a negative index. This, in turn, results in accessing data out of bounds which results in segfaults and/or data corruption.\nhttps://github.com/tensorflow/tensorflow/security/advisories/GHSA-q4qf-3fc6-8x34",
        "cve": "CVE-2020-15207",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-rocm",
        "advisory": "Tensorflow-rocm versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2 and 2.4.0 includes a fix for CVE-2020-26268: In affected versions, the tf.raw_ops.ImmutableConst operation returns a constant tensor created from a memory mapped file which is assumed immutable. However, if the type of the tensor is not an integral type, the operation crashes the Python interpreter as it tries to write to the memory area. If the file is too small, TensorFlow properly returns an error as the memory area has fewer bytes than what is needed for the tensor it creates. However, as soon as there are enough bytes, the above snippet causes a segmentation fault. This is because the allocator used to return the buffer data is not marked as returning an opaque handle since the needed virtual method is not overridden.",
        "cve": "CVE-2020-26268",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-rocm",
        "advisory": "Tensorflow-rocm versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41213: In affected versions, the code behind 'tf.function' API can be made to deadlock when two 'tf.function' decorated Python functions are mutually recursive. This occurs due to using a non-reentrant 'Lock' Python object. Loading any model which contains mutually recursive functions is vulnerable. An attacker can cause denial of service by causing users to load such models and calling a recursive 'tf.function', although this is not a frequent scenario.\nhttps://github.com/tensorflow/tensorflow/security/advisories/GHSA-h67m-xg8f-fxcf\nhttps://github.com/tensorflow/tensorflow/commit/afac8158d43691661ad083f6dd9e56f327c1dcb7",
        "cve": "CVE-2021-41213",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-rocm",
        "advisory": "Tensorflow-rocm versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21728: The implementation of shape inference for 'ReverseSequence' does not fully validate the value of 'batch_dim' and can result in a heap OOB read. There is a check to make sure the value of 'batch_dim' does not go over the rank of the input, but there is no check for negative values. Negative dimensions are allowed in some cases to mimic Python's negative indexing (i.e., indexing from the end of the array), however if the value is too negative then the implementation of 'Dim' would access elements before the start of an array.\nhttps://github.com/tensorflow/tensorflow/security/advisories/GHSA-6gmv-pjp9-p8w8",
        "cve": "CVE-2022-21728",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-rocm",
        "advisory": "Tensorflow-rocm is an Open Source Machine Learning Framework. A malicious user can cause a denial of service by altering a `SavedModel` such that assertions in `function.cc` would be falsified and crash the Python interpreter. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.",
        "cve": "CVE-2022-23586",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-rocm",
        "advisory": "Tensorflow-rocm versions 1.15.2 and 2.0.1 includes a fix for CVE-2020-5215: In TensorFlow before 1.15.2 and 2.0.1, converting a string (from Python) to a tf.float16 value results in a segmentation fault in eager mode as the format checks for this use case are only in the graph mode. This issue can lead to denial of service in inference/training where a malicious attacker can send a data point which contains a string instead of a tf.float16 value. Similar effects can be obtained by manipulating saved models and checkpoints whereby replacing a scalar tf.float16 value with a scalar string will trigger this issue due to automatic conversions. This can be easily reproduced by tf.constant(\"hello\", tf.float16), if eager execution is enabled.",
        "cve": "CVE-2020-5215",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-rocm",
        "advisory": "Tensorflow-rocm versions 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 include a fix for CVE-2021-29567: Due to lack of validation in 'tf.raw_ops.SparseDenseCwiseMul', an attacker can trigger denial of service via 'CHECK'-fails or accesses to outside the bounds of heap allocated data. Since the implementation (https://github.com/tensorflow/tensorflow/blob/38178a2f7a681a7835bb0912702a134bfe3b4d84/tensorflow/core/kernels/sparse_dense_binary_op_shared.cc#L68-L80), it only validates the rank of the input arguments but no constraints between dimensions (https://www.tensorflow.org/api_docs/python/tf/raw_ops/SparseDenseCwiseMul) and an attacker can abuse them to trigger internal 'CHECK' assertions (and cause program termination, denial of service) or to write to memory outside of bounds of heap allocated tensor buffers.",
        "cve": "CVE-2021-29567",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-rocm",
        "advisory": "Tensorflow-rocm versions 2.2.1 and 2.3.1 include a fix for CVE-2020-15193: In Tensorflow before versions 2.2.1 and 2.3.1, the implementation of \"dlpack.to_dlpack\" can be made to use uninitialized memory resulting in further memory corruption. This is because the pybind11 glue code assumes that the argument is a tensor. However, there is nothing stopping users from passing in a Python object instead of a tensor. The uninitialized memory address is due to a \"reinterpret_cast\". Since the \"PyObject\" is a Python object, not a Tensorflow tensor, the cast to \"EagerTensor\" fails. The issue was patched in commit 22e07fb204386768e5bcbea563641ea11f96ceb8\nhttps://github.com/tensorflow/tensorflow/security/advisories/GHSA-rjjg-hgv6-h69v",
        "cve": "CVE-2020-15193",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-rocm",
        "advisory": "Tensorflow-rocm 2.5.0, 2.4.2, 2.3.3, 2.2.3, and 2.1.4 include a fix for CVE-2021-29614: The implementation of 'tf.io.decode_raw' produces incorrect results and crashes the Python interpreter when combining 'fixed_length' and wider datatypes. The implementation of the padded version (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc) is buggy due to a confusion about pointer arithmetic rules. First, the code computes (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L61) the width of each output element by dividing the 'fixed_length' value to the size of the type argument. The 'fixed_length' argument is also used to determine the size needed for the output tensor (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L63-L79). This is followed by reencoding code (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L85-L94). The erroneous code is the last line above: it is moving the 'out_data' pointer by 'fixed_length * sizeof (T)' bytes whereas it only copied at most 'fixed_length' bytes from the input. This results in parts of the input not being decoded into the output. Furthermore, because the pointer advance is far wider than desired, this quickly leads to writing to outside the bounds of the backing data. This OOB write leads to interpreter crash in the reproducer mentioned here, but more severe attacks can be mounted too, given that this gadget allows writing to periodically placed locations in memory.",
        "cve": "CVE-2021-29614",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-rocm",
        "advisory": "Tensorflow-rocm 2.5.0, 2.4.2, 2.3.3, 2.2.3 and 2.1.4 include a fix for CVE-2021-29548: An attacker can cause a runtime division by zero error and denial of service in `tf.raw_ops.QuantizedBatchNormWithGlobalNormalization`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/55a97caa9e99c7f37a0bbbeb414dc55553d3ae7f/tensorflow/core/kernels/quantized_batch_norm_op.cc) does not validate all constraints specified in the op's contract (https://www.tensorflow.org/api_docs/python/tf/raw_ops/QuantizedBatchNormWithGlobalNormalization).",
        "cve": "CVE-2021-29548",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-rocm",
        "advisory": "Tensorflow-rocm 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29539: TensorFlow is an end-to-end open source platform for machine learning. Calling `tf.raw_ops.ImmutableConst`(https://www.tensorflow.org/api_docs/python/tf/raw_ops/ImmutableConst) with a `dtype` of `tf.resource` or `tf.variant` results in a segfault in the implementation as code assumes that the tensor contents are pure scalars. We have patched the issue in 4f663d4b8f0bec1b48da6fa091a7d29609980fa4 and will release TensorFlow 2.5.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved. If using `tf.raw_ops.ImmutableConst` in code, you can prevent the segfault by inserting a filter for the `dtype` argument.",
        "cve": "CVE-2021-29539",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-rocm",
        "advisory": "Tensorflow-rocm 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29513: Calling TF operations with tensors of non-numeric types when the operations expect numeric tensors result in null pointer dereferences. The conversion from Python array to C++ array (https://github.com/tensorflow/tensorflow/blob/ff70c47a396ef1e3cb73c90513da4f5cb71bebba/tensorflow/python/lib/core/ndarray_tensor.cc#L113-L169) is vulnerable to a type confusion.",
        "cve": "CVE-2021-29513",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-rocm",
        "advisory": "Tensorflow-rocm versions 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 include a fix for CVE-2021-29512: If the 'splits' argument of 'RaggedBincount' does not specify a valid 'SparseTensor' (https://www.tensorflow.org/api_docs/python/tf/sparse/SparseTensor), then an attacker can trigger a heap buffer overflow. This will cause a read from outside the bounds of the 'splits' tensor buffer in the implementation of the 'RaggedBincount' op (https://github.com/tensorflow/tensorflow/blob/8b677d79167799f71c42fd3fa074476e0295413a/tensorflow/core/kernels/bincount_op.cc#L430-L433). Before the 'for' loop, 'batch_idx' is set to 0. The user controls the 'splits' array, making it contain only one element, 0. Thus, the code in the 'while' loop would increment 'batch_idx' and then try to read 'splits(1)', which is outside of bounds.",
        "cve": "CVE-2021-29512",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-rocm",
        "advisory": "Tensorflow-rocm 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29514: If the 'splits' argument of 'RaggedBincount' does not specify a valid 'SparseTensor' (https://www.tensorflow.org/api_docs/python/tf/sparse/SparseTensor), then an attacker can trigger a heap buffer overflow. This will cause a read from outside the bounds of the 'splits' tensor buffer in the implementation of the 'RaggedBincount' op (https://github.com/tensorflow/tensorflow/blob/8b677d79167799f71c42fd3fa074476e0295413a/tensorflow/core/kernels/bincount_op.cc#L430-L446). Before the 'for' loop, 'batch_idx' is set to 0. The attacker sets 'splits(0)' to be 7, hence the 'while' loop does not execute and 'batch_idx' remains 0. This then results in writing to 'out(-1, bin)', which is before the heap allocated buffer for the output tensor.",
        "cve": "CVE-2021-29514",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-rocm",
        "advisory": "Tensorflow-rocm 2.5.0, 2.4.2, 2.3.3, 2.2.3, and 2.1.4 include a fix for CVE-2021-29572: The implementation of `tf.raw_ops.SdcaOptimizer` triggers undefined behavior due to dereferencing a null pointer. The implementation (https://github.com/tensorflow/tensorflow/blob/60a45c8b6192a4699f2e2709a2645a751d435cc3/tensorflow/core/kernels/sdca_internal.cc) does not validate that the user supplied arguments satisfy all constraints expected by the op(https://www.tensorflow.org/api_docs/python/tf/raw_ops/SdcaOptimizer).",
        "cve": "CVE-2021-29572",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-rocm",
        "advisory": "Tensorflow-rocm 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29571: The implementation of 'tf.raw_ops.MaxPoolGradWithArgmax' can cause reads outside of bounds of heap allocated data if attacker supplies specially crafted inputs. The implementation (https://github.com/tensorflow/tensorflow/blob/31bd5026304677faa8a0b77602c6154171b9aec1/tensorflow/core/kernels/image/draw_bounding_box_op.cc#L116-L130) assumes that the last element of 'boxes' input is 4, as required by the op (https://www.tensorflow.org/api_docs/python/tf/raw_ops/DrawBoundingBoxesV2). Since this is not checked attackers passing values less than 4 can write outside of bounds of heap allocated objects and cause memory corruption. If the last dimension in 'boxes' is less than 4, accesses similar to 'tboxes(b, bb, 3)' will access data outside of bounds. Further during code execution there are also writes to these indices.",
        "cve": "CVE-2021-29571",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-rocm",
        "advisory": "Tensorflow-rocm version 2.3.4, 2.4.3, 2.5.1, 2.6.0 and 2.7.0 include a fix for CVE-2021-37678:\nIn affected versions, TensorFlow and Keras can be tricked to perform arbitrary code execution when deserializing a Keras model from YAML format. The implementation(https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/python/keras/saving/model_config.py#L66-L104) uses \"yaml.unsafe_load\" which can perform arbitrary code execution on the input. Given that YAML format support requires a significant amount of work, the Tensorflow team has removed it for now. The Tensorflow team has patched the issue in GitHub commit 23d6383eb6c14084a8fc3bdf164043b974818012.\nhttps://github.com/tensorflow/tensorflow/security/advisories/GHSA-r6jx-9g48-2r5r\nhttps://github.com/tensorflow/tensorflow/commit/23d6383eb6c14084a8fc3bdf164043b974818012",
        "cve": "CVE-2021-37678",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-rocm",
        "advisory": "Tensorflow-rocm is an Open Source Machine Learning Framework. The TFG dialect of TensorFlow (MLIR) makes several assumptions about the incoming `GraphDef` before converting it to the MLIR-based dialect. If an attacker changes the `SavedModel` format on disk to invalidate these assumptions and the `GraphDef` is then converted to MLIR-based IR then they can cause a crash in the Python interpreter. Under certain scenarios, heap OOB read/writes are possible. These issues have been discovered via fuzzing and it is possible that more weaknesses exist. We will patch them as they are discovered.",
        "cve": "CVE-2022-23594",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-rocm-enhanced",
        "advisory": "Tensorflow-rocm-enhanced versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15207: In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, to mimic Python's indexing with negative values, TFLite uses 'ResolveAxis' to convert negative values to positive indices. However, the only check that the converted index is now valid is only present in debug builds. If the 'DCHECK' does not trigger, then code execution moves ahead with a negative index. This, in turn, results in accessing data out of bounds which results in segfaults and/or data corruption.\nhttps://github.com/tensorflow/tensorflow/security/advisories/GHSA-q4qf-3fc6-8x34",
        "cve": "CVE-2020-15207",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-rocm-enhanced",
        "advisory": "Tensorflow-rocm-enhanced versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2 and 2.4.0 includes a fix for CVE-2020-26268: In affected versions, the tf.raw_ops.ImmutableConst operation returns a constant tensor created from a memory mapped file which is assumed immutable. However, if the type of the tensor is not an integral type, the operation crashes the Python interpreter as it tries to write to the memory area. If the file is too small, TensorFlow properly returns an error as the memory area has fewer bytes than what is needed for the tensor it creates. However, as soon as there are enough bytes, the above snippet causes a segmentation fault. This is because the allocator used to return the buffer data is not marked as returning an opaque handle since the needed virtual method is not overridden.",
        "cve": "CVE-2020-26268",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-rocm-enhanced",
        "advisory": "Tensorflow-rocm-enhanced 2.4.2, 2.3.3, 2.2.3 and 2.1.4 include a fix for CVE-2021-29548: An attacker can cause a runtime division by zero error and denial of service in `tf.raw_ops.QuantizedBatchNormWithGlobalNormalization`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/55a97caa9e99c7f37a0bbbeb414dc55553d3ae7f/tensorflow/core/kernels/quantized_batch_norm_op.cc) does not validate all constraints specified in the op's contract (https://www.tensorflow.org/api_docs/python/tf/raw_ops/QuantizedBatchNormWithGlobalNormalization).",
        "cve": "CVE-2021-29548",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-rocm-enhanced",
        "advisory": "Tensorflow-rocm-enhanced versions 2.1.4, 2.2.3, 2.3.3 and 2.4.2 include a fix for CVE-2021-29567: Due to lack of validation in 'tf.raw_ops.SparseDenseCwiseMul', an attacker can trigger denial of service via 'CHECK'-fails or accesses to outside the bounds of heap allocated data. Since the implementation (https://github.com/tensorflow/tensorflow/blob/38178a2f7a681a7835bb0912702a134bfe3b4d84/tensorflow/core/kernels/sparse_dense_binary_op_shared.cc#L68-L80), it only validates the rank of the input arguments but no constraints between dimensions (https://www.tensorflow.org/api_docs/python/tf/raw_ops/SparseDenseCwiseMul) and an attacker can abuse them to trigger internal 'CHECK' assertions (and cause program termination, denial of service) or to write to memory outside of bounds of heap allocated tensor buffers.",
        "cve": "CVE-2021-29567",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-rocm-enhanced",
        "advisory": "Tensorflow-rocm-enhanced 2.1.4, 2.2.3, 2.3.3 and 2.4.2 include a fix for CVE-2021-29513: Calling TF operations with tensors of non-numeric types when the operations expect numeric tensors result in null pointer dereferences. The conversion from Python array to C++ array (https://github.com/tensorflow/tensorflow/blob/ff70c47a396ef1e3cb73c90513da4f5cb71bebba/tensorflow/python/lib/core/ndarray_tensor.cc#L113-L169) is vulnerable to a type confusion.",
        "cve": "CVE-2021-29513",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-rocm-enhanced",
        "advisory": "Tensorflow-rocm-enhanced 2.1.4, 2.2.3, 2.3.3 and 2.4.2 include a fix for CVE-2021-29539: TensorFlow is an end-to-end open source platform for machine learning. Calling `tf.raw_ops.ImmutableConst`(https://www.tensorflow.org/api_docs/python/tf/raw_ops/ImmutableConst) with a `dtype` of `tf.resource` or `tf.variant` results in a segfault in the implementation as code assumes that the tensor contents are pure scalars. We have patched the issue in 4f663d4b8f0bec1b48da6fa091a7d29609980fa4 and will release TensorFlow 2.5.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved. If using `tf.raw_ops.ImmutableConst` in code, you can prevent the segfault by inserting a filter for the `dtype` argument.",
        "cve": "CVE-2021-29539",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-rocm-enhanced",
        "advisory": "Tensorflow-rocm-enhanced versions 2.2.1 and 2.3.1 include a fix for CVE-2020-15193: In Tensorflow before versions 2.2.1 and 2.3.1, the implementation of \"dlpack.to_dlpack\" can be made to use uninitialized memory resulting in further memory corruption. This is because the pybind11 glue code assumes that the argument is a tensor. However, there is nothing stopping users from passing in a Python object instead of a tensor. The uninitialized memory address is due to a \"reinterpret_cast\". Since the \"PyObject\" is a Python object, not a Tensorflow tensor, the cast to \"EagerTensor\" fails. The issue was patched in commit 22e07fb204386768e5bcbea563641ea11f96ceb8\nhttps://github.com/tensorflow/tensorflow/security/advisories/GHSA-rjjg-hgv6-h69v",
        "cve": "CVE-2020-15193",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-rocm-enhanced",
        "advisory": "Tensorflow-rocm-enhanced versions 2.1.4, 2.2.3, 2.3.3 and 2.4.2 include a fix for CVE-2021-29512: If the 'splits' argument of 'RaggedBincount' does not specify a valid 'SparseTensor' (https://www.tensorflow.org/api_docs/python/tf/sparse/SparseTensor), then an attacker can trigger a heap buffer overflow. This will cause a read from outside the bounds of the 'splits' tensor buffer in the implementation of the 'RaggedBincount' op (https://github.com/tensorflow/tensorflow/blob/8b677d79167799f71c42fd3fa074476e0295413a/tensorflow/core/kernels/bincount_op.cc#L430-L433). Before the 'for' loop, 'batch_idx' is set to 0. The user controls the 'splits' array, making it contain only one element, 0. Thus, the code in the 'while' loop would increment 'batch_idx' and then try to read 'splits(1)', which is outside of bounds.",
        "cve": "CVE-2021-29512",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-rocm-enhanced",
        "advisory": "Tensorflow-rocm-enhanced 2.1.4, 2.2.3, 2.3.3 and 2.4.2 include a fix for CVE-2021-29514: If the 'splits' argument of 'RaggedBincount' does not specify a valid 'SparseTensor' (https://www.tensorflow.org/api_docs/python/tf/sparse/SparseTensor), then an attacker can trigger a heap buffer overflow. This will cause a read from outside the bounds of the 'splits' tensor buffer in the implementation of the 'RaggedBincount' op (https://github.com/tensorflow/tensorflow/blob/8b677d79167799f71c42fd3fa074476e0295413a/tensorflow/core/kernels/bincount_op.cc#L430-L446). Before the 'for' loop, 'batch_idx' is set to 0. The attacker sets 'splits(0)' to be 7, hence the 'while' loop does not execute and 'batch_idx' remains 0. This then results in writing to 'out(-1, bin)', which is before the heap allocated buffer for the output tensor.",
        "cve": "CVE-2021-29514",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-rocm-enhanced",
        "advisory": "Tensorflow-rocm-enhanced 2.1.4, 2.2.3, 2.3.3 and 2.4.2 include a fix for CVE-2021-29571: The implementation of 'tf.raw_ops.MaxPoolGradWithArgmax' can cause reads outside of bounds of heap allocated data if attacker supplies specially crafted inputs. The implementation (https://github.com/tensorflow/tensorflow/blob/31bd5026304677faa8a0b77602c6154171b9aec1/tensorflow/core/kernels/image/draw_bounding_box_op.cc#L116-L130) assumes that the last element of 'boxes' input is 4, as required by the op (https://www.tensorflow.org/api_docs/python/tf/raw_ops/DrawBoundingBoxesV2). Since this is not checked attackers passing values less than 4 can write outside of bounds of heap allocated objects and cause memory corruption. If the last dimension in 'boxes' is less than 4, accesses similar to 'tboxes(b, bb, 3)' will access data outside of bounds. Further during code execution there are also writes to these indices.",
        "cve": "CVE-2021-29571",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-rocm-enhanced",
        "advisory": "Tensorflow-rocm-enhanced 2.5.0, 2.4.2, 2.3.3, 2.2.3, and 2.1.4 include a fix for CVE-2021-29572: The implementation of `tf.raw_ops.SdcaOptimizer` triggers undefined behavior due to dereferencing a null pointer. The implementation (https://github.com/tensorflow/tensorflow/blob/60a45c8b6192a4699f2e2709a2645a751d435cc3/tensorflow/core/kernels/sdca_internal.cc) does not validate that the user supplied arguments satisfy all constraints expected by the op(https://www.tensorflow.org/api_docs/python/tf/raw_ops/SdcaOptimizer).",
        "cve": "CVE-2021-29572",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-rocm-enhanced",
        "advisory": "Tensorflow-rocm-enhanced 2.4.2, 2.3.3, 2.2.3, and 2.1.4 include a fix for CVE-2021-29614: The implementation of 'tf.io.decode_raw' produces incorrect results and crashes the Python interpreter when combining 'fixed_length' and wider datatypes. The implementation of the padded version (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc) is buggy due to a confusion about pointer arithmetic rules. First, the code computes (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L61) the width of each output element by dividing the 'fixed_length' value to the size of the type argument. The 'fixed_length' argument is also used to determine the size needed for the output tensor (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L63-L79). This is followed by reencoding code (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L85-L94). The erroneous code is the last line above: it is moving the 'out_data' pointer by 'fixed_length * sizeof (T)' bytes whereas it only copied at most 'fixed_length' bytes from the input. This results in parts of the input not being decoded into the output. Furthermore, because the pointer advance is far wider than desired, this quickly leads to writing to outside the bounds of the backing data. This OOB write leads to interpreter crash in the reproducer mentioned here, but more severe attacks can be mounted too, given that this gadget allows writing to periodically placed locations in memory.",
        "cve": "CVE-2021-29614",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tensorflow-rocm-enhanced",
        "advisory": "Tensorflow-rocm-enhanced version 2.3.4, 2.4.3, 2.5.1, 2.6.0 and 2.7.0 include a fix for CVE-2021-37678:\nIn affected versions, TensorFlow and Keras can be tricked to perform arbitrary code execution when deserializing a Keras model from YAML format. The implementation(https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/python/keras/saving/model_config.py#L66-L104) uses \"yaml.unsafe_load\" which can perform arbitrary code execution on the input. Given that YAML format support requires a significant amount of work, the Tensorflow team has removed it for now. The Tensorflow team has patched the issue in GitHub commit 23d6383eb6c14084a8fc3bdf164043b974818012.\nhttps://github.com/tensorflow/tensorflow/security/advisories/GHSA-r6jx-9g48-2r5r\nhttps://github.com/tensorflow/tensorflow/commit/23d6383eb6c14084a8fc3bdf164043b974818012",
        "cve": "CVE-2021-37678",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tequests",
        "advisory": "Tequests is a malicious package, typosquatting the popular Python 'requests' library. It embeds source code that retrieves a Golang-based ransomware binary from a remote server.\r\nhttps://thehackernews.com/2022/12/malware-strains-targeting-python-and.html",
        "cve": "PVE-2023-52906",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "testinfra-bdd",
        "advisory": "Testinfra-bdd 2.2.4 updates its dependency 'GitPython' to v3.1.30 to include a security fix.",
        "cve": "CVE-2022-24439",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "testing-pip-confusion",
        "advisory": "Testing-pip-confusion is a malicious package, typosquatting.\r\nhttps://blog.sonatype.com/trojanized-pypi-package-imitates-a-popular-python-server-library",
        "cve": "PVE-2022-47821",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tftpy",
        "advisory": "Affected versions of the Python TFTP library, tftpy, are susceptible to a Directory Traversal vulnerability that allows unauthorized access beyond the tftproot directory. This occurs due to the library's inability to detect instances where sibling files or directories exist alongside tftproot, sharing a common prefix with it.",
        "cve": "PVE-2024-99843",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "thefuck",
        "advisory": "The thefuck (aka The Fuck) package before 3.31 for Python allows Path Traversal that leads to arbitrary file deletion via the \"undo archive operation\" feature.\r\nhttps://github.com/nvbn/thefuck/commit/e343c577cd7da4d304b837d4a07ab4df1e023092",
        "cve": "CVE-2021-34363",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "thera-py",
        "advisory": "Thera-py 0.3.10 and 0.5.0.dev0 update its dependency 'ipython' to include a security fix.",
        "cve": "CVE-2023-24816",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "thrift",
        "advisory": "Thrift (Python bindings for Thrift) 0.11.0 is based in a version of Thrift-core that improves SSL security by adding cross client checks to make sure SSLv3 protocol cannot be negotiated - see: https://issues.apache.org/jira/browse/THRIFT-4084",
        "cve": "PVE-2021-37644",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "thrift",
        "advisory": "Thrift (python bindings) 0.9 is based on a version of thrift-core that fixes a denial of Service attack in TBinaryProtocol.readString - see: https://issues.apache.org/jira/browse/THRIFT-2272",
        "cve": "PVE-2021-37646",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "thrift",
        "advisory": "Thrift (Python bindings for Thrift) 0.9.3 is based in a version of Thrift-core that changes unsafe connection defaults.\r\nhttps://issues.apache.org/jira/browse/THRIFT-3164",
        "cve": "PVE-2022-48389",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "thrift",
        "advisory": "Thrift (Python bindings for Thrift) 0.9.3 is based in a version of Thrift-core that fixes a C++ TSSLSocket shutdown delay/vulnerability.\r\nhttps://issues.apache.org/jira/browse/THRIFT-3061",
        "cve": "PVE-2021-37645",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "thrift",
        "advisory": "Thrift (Python bindings for Thrift) 0.9.3 is based in a version of Thrift-core that changes unsafe connection defaults.\r\nhttps://issues.apache.org/jira/browse/THRIFT-3164",
        "cve": "PVE-2022-48390",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "thrift",
        "advisory": "Thrift (Python bindings for Thrift) version 0.13.0 is based in a version of Thrift core that includes a fix for CVE-2018-1320.",
        "cve": "CVE-2018-1320",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "timeit",
        "advisory": "Timeit is a typosquatting package. It shows a malicious behavior, for example, it may leak your sensitive data and/or gain unauthorized persistence in your system.\r\nhttps://www.zdnet.com/article/twelve-malicious-python-libraries-found-and-removed-from-pypi/",
        "cve": "PVE-2022-45419",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tksvg",
        "advisory": "Tksvg 0.6 applies security patches for DoS vulnerabilities.\r\nhttps://github.com/TkinterEP/python-tksvg/commit/92c23d7c3a01ab4ba225815d32bc1b8eff16df00",
        "cve": "PVE-2021-39839",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tlslite",
        "advisory": "The tlslite library before 0.4.9 for Python allows remote attackers to trigger a denial of service (runtime exception and process crash).",
        "cve": "CVE-2015-3220",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tlslite-ng",
        "advisory": "Tlslite-ng versions 0.7.6 and 0.8.0-alpha39 include a fix for CVE-2020-26263: Tlslite-ng is an open source python library that implements SSL and TLS cryptographic protocols. In tlslite-ng before versions 0.7.6 and 0.8.0-alpha39, the code that performs decryption and padding check in RSA PKCS#1 v1.5 decryption is data dependent. In particular, the code has multiple ways in which it leaks information about the decrypted ciphertext. It aborts as soon as the plaintext doesn't start with 0x00, 0x02. All TLS servers that enable RSA key exchange as well as applications that use the RSA decryption API directly are vulnerable. \r\nNote: the patches depend on Python processing the individual bytes in side-channel free manner, this is known to not the case (see reference). As such, users that require side-channel resistance are recommended to use different TLS implementations, as stated in the security policy of tlslite-ng.\r\nhttps://github.com/tlsfuzzer/tlslite-ng/security/advisories/GHSA-wvcv-832q-fjg7\r\nhttps://github.com/tlsfuzzer/tlslite-ng/commit/c28d6d387bba59d8bd5cb3ba15edc42edf54b368\r\nhttps://github.com/tlsfuzzer/tlslite-ng/pull/438\r\nhttps://github.com/tlsfuzzer/tlslite-ng/pull/439\r\nhttps://securitypitfalls.wordpress.com/2018/08/03/constant-time-compare-in-python/",
        "cve": "CVE-2020-26263",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tomcatmanager",
        "advisory": "Tomcatmanager 5.0.0 removed support for Python 3.6, which will not receive more security updates after 2021-12-23.",
        "cve": "CVE-2020-10735",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "toodledo",
        "advisory": "Toodledo 1.5.0 adds a 'clear' keyword argument to TaskCache initialization. Setting 'clear' to True during initialization will clear and reload the cache.\r\nhttps://github.com/jikamens/toodledo-python/commit/2e84231eb58e7cba46e590aa43a4f0d2e7030449",
        "cve": "PVE-2024-63215",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "toodledo",
        "advisory": "Toodledo 1.5.0 addresses an edge-case bug in the logic surrounding caching rescheduled tasks. Previously, if a task was rescheduled after being cached, the cache would not reflect this change, leading to potential inconsistencies. This release fixes this issue, ensuring that rescheduled tasks are correctly updated in the cache.\r\nhttps://github.com/jikamens/toodledo-python/commit/207f97a75f273ff6a8b8c36c7e8829b735201062",
        "cve": "PVE-2024-63213",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "torbot",
        "advisory": "Torbot 4.0.0 includes a fix for CVE-2023-45813: In affected versions the 'torbot.modules.validators.validate_link function' uses the python-validators URL validation regex. This particular regular expression has an exponential complexity which allows an attacker to cause an application crash using a well-crafted argument. An attacker can use a well-crafted URL argument to exploit the vulnerability in the regular expression and cause a Denial of Service on the system. The validators file has been removed in version 4.0.0.\r\nhttps://github.com/DedSecInside/TorBot/security/advisories/GHSA-72qw-p7hh-m3ff",
        "cve": "CVE-2023-45813",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "torch",
        "advisory": "A vulnerability in the PyTorch's torch.distributed.rpc framework, specifically in versions prior to 2.2.2, allows for remote code execution (RCE). The framework, which is used in distributed training scenarios, does not properly verify the functions being called during RPC (Remote Procedure Call) operations. This oversight permits attackers to execute arbitrary commands by leveraging built-in Python functions such as eval during multi-cpu RPC communication. The vulnerability arises from the lack of restriction on function calls when a worker node serializes and sends a PythonUDF (User Defined Function) to the master node, which then deserializes and executes the function without validation. This flaw can be exploited to compromise master nodes initiating distributed training, potentially leading to the theft of sensitive AI-related data.",
        "cve": "CVE-2024-5480",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tornado",
        "advisory": "Summary: Tornado's interpretation of symbols `-`, `+`, and `_` within chunk lengths and 'Content-Length' values contradicts the HTTP RFCs stipulations, potentially creating an avenue for request smuggling. This issue is generally found when Tornado operates behind specific proxies that understand these non-standard characters diversely, mostly observed in earlier versions of 'haproxy'; however, the latest version remains unaffected.\r\n\r\nDetails: Tornado utilizes the 'int' constructor to decipher the 'Content-Length' headers and chunk lengths in the locations mentioned below:\r\n\r\n`tornado/http1connection.py:445`\r\nPython3 code: self._expected_content_remaining = int(headers[\"Content-Length\"])\r\n\r\n`tornado/http1connection.py:621`\r\nPython3 code: content_length = int(headers[\"Content-Length\"])\r\n\r\n`tornado/http1connection.py:671`\r\nPython3 code: chunk_len = int(chunk_len_str.strip(), 16)\r\n\r\nNotably, though the equation `int(\"0_0\")` equates to `int(\"+0\")`, `int(\"-0\")`, and `int(\"0\")`, using the 'int' constructor as a strategy for validating and parsing strings containing ASCII digits only is proven inadequate.",
        "cve": "PVE-2023-99925",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tqdm",
        "advisory": "Tqdm version 4.66.3 addresses CVE-2024-34062, a vulnerability where optional non-boolean CLI arguments like `--delim`, `--buf-size`, and `--manpath` were passed through Python's `eval`, allowing for arbitrary code execution. This security risk, only locally exploitable, has been mitigated in this release. Users are advised to upgrade to version 4.66.3 immediately as there are no workarounds for this issue.",
        "cve": "CVE-2024-34062",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "transmute-core",
        "advisory": "Transmute-core 1.13.5 includes a fix for CVE-2023-47204: Unsafe YAML deserialization in yaml.Loader in transmute-core before 1.13.5 allows attackers to execute arbitrary Python code.\r\nhttps://github.com/toumorokoshi/transmute-core/pull/58",
        "cve": "CVE-2023-47204",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "trex",
        "advisory": "Trex 0.1.7 updates its dependency 'gitpython' to version '3.1.30' to include a security fix.\r\nhttps://github.com/berrysauce/trex/commit/08c9630caaf81f1dc6f0dd549f88084eca5236ac",
        "cve": "CVE-2022-24439",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "trrfab",
        "advisory": "Trrfab is a malicious package, typosquatting.  It steals Discord access tokens, passwords, and even stage dependency confusion attacks.\r\nhttps://thehackernews.com/2021/11/11-malicious-pypi-python-libraries.html",
        "cve": "PVE-2022-45460",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tryton",
        "advisory": "model/modelstorage.py in the Tryton application framework (trytond) before 2.4.0 for Python does not properly restrict access to the Many2Many field in the relation model, which allows remote authenticated users to modify the privileges of arbitrary users via a (1) create, (2) write, (3) delete, or (4) copy rpc call.",
        "cve": "CVE-2012-0215",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "trytond",
        "advisory": "model/modelstorage.py in the Tryton application framework (trytond) before 2.4.0 for Python does not properly restrict access to the Many2Many field in the relation model, which allows remote authenticated users to modify the privileges of arbitrary users via a (1) create, (2) write, (3) delete, or (4) copy rpc call.",
        "cve": "CVE-2012-0215",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ttrv",
        "advisory": "Ttrv 1.12.1 fixes a security vulnerability where malicious URLs could inject python code.",
        "cve": "PVE-2021-38370",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ttrv",
        "advisory": "Some versions of Tilde Terminal Reddit Viewer (ttrv) are susceptible to arbitrary code injection, where malicious URLs can inject Python code. This vulnerability threatens the security of the application by allowing unauthorized code execution through specially crafted links.",
        "cve": "PVE-2024-99837",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tuf",
        "advisory": "Tuf 0.12.0 includes a fix for CVE-2020-15163: Python TUF reference implementation before version 0.12 incorrectly trusts previously downloaded root metadata files which failed verification at download time. This allows an attacker who is able to serve multiple new versions of root metadata (i.e. by a person-in-the-middle attack) culminating in a version which has not been correctly signed to control the trust chain for future updates.\r\nhttps://github.com/theupdateframework/python-tuf/security/advisories/GHSA-f8mr-jv2c-v8mg",
        "cve": "CVE-2020-15163",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tuf",
        "advisory": "Tuf version 0.19 includes a fix for CVE-2021-41131: In both clients ('tuf/client' and 'tuf/ngclient'), there is a path traversal vulnerability that in the worst case can overwrite files ending in '.json' anywhere on the client system on a call to 'get_one_valid_targetinfo()'. It occurs because the rolename is used to form the filename, and may contain path traversal characters (ie '../../name.json'). The impact is mitigated by a few facts: \r\n- It only affects implementations that allow arbitrary rolename selection for delegated targets metadata.\r\n- The attack requires the ability to A) insert new metadata for the path-traversing role and B) get the role delegated by an existing targets metadata.\r\n- The written file content is heavily restricted since it needs to be a valid, signed targets file. \r\n- The file extension is always .json. \r\nThere are no workarounds that do not require code changes. Clients can restrict the allowed character set for rolenames, or they can store metadata in files named in a way that is not vulnerable: neither of these approaches is possible without modifying python-tuf.\r\nhttps://github.com/theupdateframework/python-tuf/security/advisories/GHSA-wjw6-2cqr-j4qr\r\nhttps://github.com/theupdateframework/python-tuf/commit/4ad7ae48fda594b640139c3b7eae21ed5155a102\r\nhttps://github.com/theupdateframework/python-tuf/issues/1527",
        "cve": "CVE-2021-41131",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "tweepy",
        "advisory": "Tweepy does not verify that the server hostname matches a domain name in the subject's Common Name (CN) or subjectAltName field of the X.509 certificate, which allows man-in-the-middle attackers to spoof SSL servers via an arbitrary valid certificate, related to use of the Python httplib library.",
        "cve": "CVE-2012-5825",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "twirp",
        "advisory": "A security vulnerability was discovered in twirp before 5.5.1 in the 'requirements.txt' file that is used to test Python-generated code, and could be used as sub-dependency checks for Python projects using Twirp.",
        "cve": "PVE-2021-39334",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "typed-ast",
        "advisory": "Typed_ast 1.3.0 and 1.3.1 have an ast_for_arguments out-of-bounds read. An attacker with the ability to cause a Python interpreter to parse Python source (but not necessarily execute it) may be able to crash the interpreter process. This could be a concern, for example, in a web-based service that parses (but does not execute) Python code. (This issue also affected certain Python 3.8.0-alpha prereleases.) See: CVE-2019-19275.",
        "cve": "CVE-2019-19275",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "typed-ast",
        "advisory": "Typed_ast 1.3.0 and 1.3.1 have a handle_keywordonly_args out-of-bounds read. An attacker with the ability to cause a Python interpreter to parse Python source (but not necessarily execute it) may be able to crash the interpreter process. This could be a concern, for example, in a web-based service that parses (but does not execute) Python code. (This issue also affected certain Python 3.8.0-alpha prereleases.) See: CVE-2019-19274.",
        "cve": "CVE-2019-19274",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "typedb-driver",
        "advisory": "Typedb-driver 2.1.1 includes a fix for an unsafe defaults vulnerability: SSL is now required for connections to TypeDB cluster.\r\nhttps://github.com/vaticle/typedb-driver-python/pull/225",
        "cve": "PVE-2023-61485",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ua-parser",
        "advisory": "Certain versions of ua_parser, a Python library for parsing browser user agents, are susceptible to arbitrary code execution attacks due to the use of the insecure YAML.load() function.",
        "cve": "PVE-2024-99835",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "ujson",
        "advisory": "Ujson 5.4.0 includes a fix for CVE-2022-31117: In versions prior to 5.4.0 an error occurring while reallocating a buffer for string decoding can cause the buffer to get freed twice. Due to how UltraJSON uses the internal decoder, this double free is impossible to trigger from Python.\r\nhttps://github.com/ultrajson/ultrajson/security/advisories/GHSA-fm67-cv37-96ff",
        "cve": "CVE-2022-31117",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "unicorn-binance-local-depth-cache",
        "advisory": "Unicorn-binance-local-depth-cache version 2.0.0 updates its `cryptography` dependency due to CVE-2023-38325, which has a high severity score of 7.5. This vulnerability affects versions prior to 41.0.2 of the cryptography package for Python and involves mishandling SSH certificates with critical options.",
        "cve": "CVE-2023-38325",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "urlgrabber",
        "advisory": "Urlgrabber 4.0.0 includes a fix for CVE-2022-31255: An Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') vulnerability in spacewalk/Uyuni of SUSE Linux Enterprise Module for SUSE Manager Server 4.2, SUSE Linux Enterprise Module for SUSE Manager Server 4.3, SUSE Manager Server 4.2 allows remote attackers to read files available to the user running the process, typically tomcat. This issue affects: SUSE Linux Enterprise Module for SUSE Manager Server 4.2 hub-xmlrpc-api-0.7-150300.3.9.2, inter-server-sync-0.2.4-150300.8.25.2, locale-formula-0.3-150300.3.3.2, py27-compat-salt-3000.3-150300.7.7.26.2, python-urlgrabber-3.10.2.1py2_3-150300.3.3.2, spacecmd-4.2.20-150300.4.30.2, spacewalk-backend-4.2.25-150300.4.32.4, spacewalk-client-tools-4.2.21-150300.4.27.3, spacewalk-java-4.2.43-150300.3.48.2, spacewalk-utils-4.2.18-150300.3.21.2, spacewalk-web-4.2.30-150300.3.30.3, susemanager-4.2.38-150300.3.44.3, susemanager-doc-indexes-4.2-150300.12.36.3, susemanager-docs_en-4.2-150300.12.36.2, susemanager-schema-4.2.25-150300.3.30.3, susemanager-sls versions prior to 4.2.28. SUSE Linux Enterprise Module for SUSE Manager Server 4.3 spacewalk-java versions prior to 4.3.39. SUSE Manager Server 4.2 release-notes-susemanager versions prior to 4.2.10.",
        "cve": "CVE-2022-31255",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "urlgrabber",
        "advisory": "Urlgrabber 4.0.0 includes a fix for CVE-2022-43753: A Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') vulnerability in spacewalk/Uyuni of SUSE Linux Enterprise Module for SUSE Manager Server 4.2, SUSE Linux Enterprise Module for SUSE Manager Server 4.3, SUSE Manager Server 4.2 allows remote attackers to read files available to the user running the process, typically tomcat. This issue affects: SUSE Linux Enterprise Module for SUSE Manager Server 4.2 hub-xmlrpc-api-0.7-150300.3.9.2, inter-server-sync-0.2.4-150300.8.25.2, locale-formula-0.3-150300.3.3.2, py27-compat-salt-3000.3-150300.7.7.26.2, python-urlgrabber-3.10.2.1py2_3-150300.3.3.2, spacecmd-4.2.20-150300.4.30.2, spacewalk-backend-4.2.25-150300.4.32.4, spacewalk-client-tools-4.2.21-150300.4.27.3, spacewalk-java-4.2.43-150300.3.48.2, spacewalk-utils-4.2.18-150300.3.21.2, spacewalk-web-4.2.30-150300.3.30.3, susemanager-4.2.38-150300.3.44.3, susemanager-doc-indexes-4.2-150300.12.36.3, susemanager-docs_en-4.2-150300.12.36.2, susemanager-schema-4.2.25-150300.3.30.3, susemanager-sls versions prior to 4.2.28. SUSE Linux Enterprise Module for SUSE Manager Server 4.3 spacewalk-java versions prior to 4.3.39. SUSE Manager Server 4.2 release-notes-susemanager versions prior to 4.2.10.",
        "cve": "CVE-2022-43753",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "urlgrabber",
        "advisory": "Urlgrabber 4.0.0 includes a fix for CVE-2022-43754: An Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') vulnerability in spacewalk/Uyuni of SUSE Linux Enterprise Module for SUSE Manager Server 4.2, SUSE Linux Enterprise Module for SUSE Manager Server 4.3, SUSE Manager Server 4.2 allows remote attackers to embed Javascript code via /rhn/audit/scap/Search.do This issue affects: SUSE Linux Enterprise Module for SUSE Manager Server 4.2 hub-xmlrpc-api-0.7-150300.3.9.2, inter-server-sync-0.2.4-150300.8.25.2, locale-formula-0.3-150300.3.3.2, py27-compat-salt-3000.3-150300.7.7.26.2, python-urlgrabber-3.10.2.1py2_3-150300.3.3.2, spacecmd-4.2.20-150300.4.30.2, spacewalk-backend-4.2.25-150300.4.32.4, spacewalk-client-tools-4.2.21-150300.4.27.3, spacewalk-java-4.2.43-150300.3.48.2, spacewalk-utils-4.2.18-150300.3.21.2, spacewalk-web-4.2.30-150300.3.30.3, susemanager-4.2.38-150300.3.44.3, susemanager-doc-indexes-4.2-150300.12.36.3, susemanager-docs_en-4.2-150300.12.36.2, susemanager-schema-4.2.25-150300.3.30.3, susemanager-sls versions prior to 4.2.28. SUSE Linux Enterprise Module for SUSE Manager Server 4.3 spacewalk-java versions prior to 4.3.39. SUSE Manager Server 4.2 release-notes-susemanager versions prior to 4.2.10.",
        "cve": "CVE-2022-43754",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "urllib3",
        "advisory": "Urllib3 1.25.9 includes a fix for CVE-2020-26137: Urllib3 before 1.25.9 allows CRLF injection if the attacker controls the HTTP request method, as demonstrated by inserting CR and LF control characters in the first argument of putrequest(). NOTE: this is similar to CVE-2020-26116.\r\nhttps://github.com/python/cpython/issues/83784\r\nhttps://github.com/urllib3/urllib3/pull/1800",
        "cve": "CVE-2020-26137",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "urllib3",
        "advisory": "Urllib3 version 1.18.1 includes a fix for CVE-2016-9015: Versions 1.17 and 1.18 of the Python urllib3 library suffer from a vulnerability that can cause them, in certain configurations, to not correctly validate TLS certificates. This places users of the library with those configurations at risk of man-in-the-middle and information leakage attacks. This vulnerability affects users using versions 1.17 and 1.18 of the urllib3 library, who are using the optional PyOpenSSL support for TLS instead of the regular standard library TLS backend, and who are using OpenSSL 1.1.0 via PyOpenSSL. This is an extremely uncommon configuration, so the security impact of this vulnerability is low.\r\nhttps://www.openwall.com/lists/oss-security/2016/10/27/6",
        "cve": "CVE-2016-9015",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "urllib3",
        "advisory": "The _encode_invalid_chars function in util/url.py in the urllib3 library 1.25.2 through 1.25.7 for Python allows a denial of service (CPU consumption) because of an inefficient algorithm. The percent_encodings array contains all matches of percent encodings. It is not deduplicated. For a URL of length N, the size of percent_encodings may be up to O(N). The next step (normalize existing percent-encoded bytes) also takes up to O(N) for each step, so the total time is O(N^2). If percent_encodings were deduplicated, the time to compute _encode_invalid_chars would be O(kN), where k is at most 484 ((10+6*2)^2). See: CVE-2020-7212.",
        "cve": "CVE-2020-7212",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "urllib3",
        "advisory": "Urllib3 1.26.4 includes a fix for CVE-2021-28363: The urllib3 library 1.26.x before 1.26.4 for Python omits SSL certificate validation in some cases involving HTTPS to HTTPS proxies. The initial connection to the HTTPS proxy (if an SSLContext isn't given via proxy_config) doesn't verify the hostname of the certificate. This means certificates for different servers that still validate properly with the default urllib3 SSLContext will be silently accepted.",
        "cve": "CVE-2021-28363",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "validators",
        "advisory": "Validators 0.21.0 includes a fix for CVE-2023-45813: Inefficient Regular Expression Complexity in validate_link.\r\nhttps://github.com/DedSecInside/TorBot/security/advisories/GHSA-72qw-p7hh-m3ff\r\nhttps://github.com/python-validators/validators/pull/243",
        "cve": "CVE-2023-45813",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "validators",
        "advisory": "The validators package 0.12.2 through 0.12.5 for Python enters an infinite loop when validators.domain is called with a crafted domain string. This is fixed in 0.12.6. See: CVE-2019-19588.",
        "cve": "CVE-2019-19588",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "vanna",
        "advisory": "Vanna uses a prompt function to present the user with visualized results, it is possible to alter the prompt using prompt injection and run arbitrary Python code instead of the intended visualization code. Specifically - allowing external input to the library\u2019s \u201cask\u201d method with \"visualize\" set to True (default behavior) leads to remote code execution.",
        "cve": "CVE-2024-5565",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "vanna",
        "advisory": "vanna-ai/vanna version affected versions are vulnerable to SQL injection in some file-critical functions such as `pg_read_file()`. This vulnerability allows unauthenticated remote users to read arbitrary local files on the victim server, including sensitive files like `/etc/passwd`, by exploiting the exposed SQL queries via a Python Flask API.",
        "cve": "CVE-2024-5753",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "vault-cli",
        "advisory": "Vault-cli 3.0.0 includes a fix for CVE-2021-43837: In versions before 3.0.0 vault-cli features the ability for rendering templated values. When a secret starts with the prefix '!template!', vault-cli interprets the rest of the contents of the secret as a Jinja2 template. Jinja2 is a powerful templating engine and is not designed to safely render arbitrary templates. An attacker controlling a jinja2 template rendered on a machine can trigger arbitrary code, making this a Remote Code Execution (RCE) risk. If the content of the vault can be completely trusted, then this is not a problem. Otherwise, if your threat model includes cases where an attacker can manipulate a secret value read from the vault using vault-cli, then this vulnerability may impact you. In 3.0.0, the code related to interpreting vault templated secrets has been removed entirely. Users are advised to upgrade as soon as possible. For users unable to upgrade a workaround does exist. Using the environment variable 'VAULT_CLI_RENDER=false' or the flag '--no-render' (placed between 'vault-cli' and the subcommand, e.g. 'vault-cli --no-render get-all') or adding 'render: false' to the vault-cli configuration yaml file disables rendering and removes the vulnerability. Using the python library, you can use: 'vault_cli.get_client(render=False)' when creating your client to get a client that will not render templated secrets and thus operates securely.\r\nhttps://github.com/peopledoc/vault-cli/security/advisories/GHSA-q34h-97wf-8r8j",
        "cve": "CVE-2021-43837",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "vermin",
        "advisory": "Vermin 1.5.2 updates its dependency 'GitPython' to version '3.1.30' to include a security fix.\r\nhttps://github.com/netromdk/vermin/pull/157",
        "cve": "CVE-2022-24439",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "vhcalc",
        "advisory": "Vhcalc 0.2.5 updates Dockerfile to \"python:3.9-slim-buster\" to include security fixes.",
        "cve": "CVE-2022-1664",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "vhcalc",
        "advisory": "Vhcalc 0.2.5 updates Dockerfile to \"python:3.9-slim-buster\" to include security fixes.",
        "cve": "CVE-2022-0563",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "vhcalc",
        "advisory": "Vhcalc 0.2.5 updates Dockerfile to \"python:3.9-slim-buster\" to include security fixes.",
        "cve": "CVE-2022-1586",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "vhcalc",
        "advisory": "Vhcalc 0.2.5 updates Dockerfile to \"python:3.9-slim-buster\" to include security fixes.",
        "cve": "CVE-2022-1587",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "vhcalc",
        "advisory": "Vhcalc 0.2.5 updates Dockerfile to \"python:3.9-slim-buster\" to include security fixes.",
        "cve": "CVE-2022-1292",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "virtool-core",
        "advisory": "Virtool-core 2.39.1 includes a fix for CVE-2007-4559: Directory traversal vulnerability in the (1) extract and (2) extractall functions in the tarfile module in Python allows user-assisted remote attackers to overwrite arbitrary files via a .. (dot dot) sequence in filenames in a TAR archive, a related issue to CVE-2001-1267.",
        "cve": "CVE-2007-4559",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "virustotal-python",
        "advisory": "Virustotal-python 0.0.3 updates its dependency 'urllib3' to v1.24.2 to include a security fix.",
        "cve": "CVE-2019-11236",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "virustotal-python",
        "advisory": "Virustotal-python 0.0.8 updates its dependency 'bleach' to v3.1.1 to include a security fix.",
        "cve": "CVE-2020-6802",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "virustotal-python",
        "advisory": "Virustotal-python 0.0.9 updates its dependency 'bleach' to v3.1.4 to include security fixes.",
        "cve": "CVE-2020-6816",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "virustotal-python",
        "advisory": "Virustotal-python 0.0.9 updates its dependency 'bleach' to v3.1.4 to include security fixes.",
        "cve": "CVE-2020-6817",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "virustotal-python",
        "advisory": "Virustotal-python 0.1.2 updates its dependency 'urllib3' to v1.26.4 to include a security fix.",
        "cve": "CVE-2021-28363",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "virustotal-python",
        "advisory": "Virustotal-python 0.1.3 updates its dependency 'urllib3' to v1.26.5 to include a security fix.",
        "cve": "CVE-2021-33503",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "vmware-aria-operations-integration-sdk",
        "advisory": "Vmware-aria-operations-integration-sdk 1.0.1 updates it dependency 'gitpython' to v3.1.34 to include a security fix.",
        "cve": "CVE-2023-40590",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "volcengine",
        "advisory": "Volcengine 1.0.62 updates APIs to prevent injection attacks.\r\nhttps://github.com/volcengine/volc-sdk-python/commit/7f00052c6687ba31dca771c27b36bda8c676e847",
        "cve": "PVE-2022-51829",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "vvspy",
        "advisory": "Vvspy version 2.1.0 has dropped support for Python 3.6 and 3.7 to address the vulnerability CVE-2024-35195 in its `requests` dependency. This update ensures that the package remains secure by leveraging the improvements and fixes available in later versions of Python and the `requests` library.",
        "cve": "CVE-2024-35195",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "vyper",
        "advisory": "Vyper is a pythonic Smart Contract Language for the Ethereum virtual machine. Prior to version 0.3.0, default functions don't respect nonreentrancy keys and the lock isn't emitted. No vulnerable production contracts were found. Additionally, using a lock on a `default` function is a very sparsely used pattern. As such, the impact is low. Version 0.3.0 contains a patch for the issue. See CVE-2024-32648.",
        "cve": "CVE-2024-32648",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "vyper",
        "advisory": "Vyper is a pythonic Smart Contract Language for the Ethereum virtual machine. In versions 0.3.10 and prior, using the `sqrt` builtin can result in double eval vulnerability when the argument has side-effects. It can be seen that the `build_IR` function of the `sqrt` builtin doesn't cache the argument to the stack. As such, it can be evaluated multiple times (instead of retrieving the value from the stack). No vulnerable production contracts were found. Additionally, double evaluation of side-effects should be easily discoverable in client tests. As such, the impact is low. As of time of publication, no fixed versions are available. See CVE-2024-32649.",
        "cve": "CVE-2024-32649",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "vyper",
        "advisory": "Vyper is a pythonic Smart Contract Language for the Ethereum virtual machine. In versions 0.3.10 and prior, incorrect values can be logged when `raw_log` builtin is called with memory or storage arguments to be used as topics. A contract search was performed and no vulnerable contracts were found in production. The `build_IR` function of the `RawLog` class fails to properly unwrap the variables provided as topics. Consequently, incorrect values are logged as topics. As of time of publication, no fixed version is available. See CVE-2024-32645.",
        "cve": "CVE-2024-32645",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "vyper",
        "advisory": "Vyper is a pythonic Smart Contract Language for the ethereum virtual machine. If an excessively large value is specified as the starting index for an array in `_abi_decode`, it can cause the read position to overflow. This results in the decoding of values outside the intended array bounds, potentially leading to exploitations in contracts that use arrays within `_abi_decode`. This vulnerability affects 0.3.10 and earlier versions. See CVE-2024-26149.",
        "cve": "CVE-2024-26149",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "vyper",
        "advisory": "A vulnerability involving insufficient validation has been identified in specific versions of Vyper, a Pythonic Smart Contract Language for the Ethereum Virtual Machine (EVM). This issue arises when users make assumptions about the return values of certain interface types, potentially leading to unexpected behavior or exploitation. The exploit maturity for this vulnerability is currently classified as unproven.",
        "cve": "PVE-2024-99830",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "vyper",
        "advisory": "Vyper is a Pythonic Smart Contract Language for the Ethereum Virtual Machine. Arrays can be keyed by a signed integer, while they are defined for unsigned integers only. The typechecker doesn't throw when spotting the usage of an `int` as an index for an array. The typechecker allows the usage of signed integers to be used as indexes to arrays. The vulnerability is present in different forms in all versions, including `0.3.10`. For ints, the 2's complement representation is used. Because the array was declared very large, the bounds checking will pass Negative values will simply be represented as very large numbers. As of time of publication, a fixed version does not exist.\r\nThere are three potential vulnerability classes: unpredictable behavior, accessing inaccessible elements and denial of service. Class 1: If it is possible to index an array with a negative integer without reverting, this is most likely not anticipated by the developer and such accesses can cause unpredictable behavior for the contract. Class 2: If a contract has an invariant in the form `assert index < x`, the developer will suppose that no elements on indexes `y | y >= x` are accessible. However, by using negative indexes, this can be bypassed. Class 3: If the index is dependent on the state of the contract, this poses a risk of denial of service. If the state of the contract can be manipulated in such way that the index will be forced to be negative, the array access can always revert (because most likely the array won't be declared extremely large). However, all these the scenarios are highly unlikely. Most likely behavior is a revert on the bounds check.",
        "cve": "CVE-2024-24563",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "vyper",
        "advisory": "Vyper is a Pythonic Smart Contract Language for the Ethereum Virtual Machine. When calls to external contracts are made, we write the input buffer starting at byte 28, and allocate the return buffer to start at byte 0 (overlapping with the input buffer). When checking RETURNDATASIZE for dynamic types, the size is compared only to the minimum allowed size for that type, and not to the returned value's length. As a result, malformed return data can cause the contract to mistake data from the input buffer for returndata. When the called contract returns invalid ABIv2 encoded data, the calling contract can read different invalid data (from the dirty buffer) than the called contract returned. See CVE-2024-24560.",
        "cve": "CVE-2024-24560",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "vyper",
        "advisory": "Vyper is a pythonic Smart Contract Language for the ethereum virtual machine. In versions 0.3.10 and earlier, the bounds check for slices does not account for the ability for start + length to overflow when the values aren't literals. If a slice() function uses a non-literal argument for the start or length variable, this creates the ability for an attacker to overflow the bounds check. This issue can be used to do OOB access to storage, memory or calldata addresses. It can also be used to corrupt the length slot of the respective array. See CVE-2024-24561.",
        "cve": "CVE-2024-24561",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "vyper",
        "advisory": "Vyper is a pythonic Smart Contract Language for the ethereum virtual machine. When using the built-in `extract32(b, start)`, if the `start` index provided has for side effect to update `b`, the byte array to extract `32` bytes from, it could be that some dirty memory is read and returned by `extract32`. This vulnerability affects 0.3.10 and earlier versions. See CVE-2024-24564.",
        "cve": "CVE-2024-24564",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "vyper",
        "advisory": "Vyper is a pythonic Smart Contract Language for the Ethereum virtual machine. In versions 0.3.10 and prior, using the `create_from_blueprint` builtin can result in a double eval vulnerability when `raw_args=True` and the `args` argument has side-effects. It can be seen that the `_build_create_IR` function of the `create_from_blueprint` builtin doesn't cache the mentioned `args` argument to the stack. As such, it can be evaluated multiple times (instead of retrieving the value from the stack). No vulnerable production contracts were found. Additionally, double evaluation of side-effects should be easily discoverable in client tests. As such, the impact is low. As of time of publication, no fixed versions exist. See CVE-2024-32647.",
        "cve": "CVE-2024-32647",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "vyper",
        "advisory": "Vyper is a Pythonic Smart Contract Language for the EVM. There is an error in the stack management when compiling the `IR` for `sha3_64`. Concretely, the `height` variable is miscalculated. The vulnerability can't be triggered without writing the `IR` by hand (that is, it cannot be triggered from regular vyper code). `sha3_64` is used for retrieval in mappings. No flow that would cache the `key` was found so the issue shouldn't be possible to trigger when compiling the compiler-generated `IR`. This issue isn't triggered during normal compilation of vyper code so the impact is low. At the time of publication there is no patch available. See CVE-2024-24559.",
        "cve": "CVE-2024-24559",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "vyper",
        "advisory": "Vyper is a pythonic Smart Contract Language for the Ethereum virtual machine. In versions 0.3.10 and prior, using the `slice` builtin can result in a double eval vulnerability when the buffer argument is either `msg.data`, `self.code` or `<address>.code` and either the `start` or `length` arguments have side-effects. It can be easily triggered only with the versions `<0.3.4` as `0.3.4` introduced the unique symbol fence. No vulnerable production contracts were found. Additionally, double evaluation of side-effects should be easily discoverable in client tests. As such, the impact is low. As of time of publication, no fixed versions are available. See CVE-2024-32646.",
        "cve": "CVE-2024-32646",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "vyper",
        "advisory": "Vyper is a pythonic Smart Contract Language for the ethereum virtual machine. Vyper compiler allows passing a value in builtin raw_call even if the call is a delegatecall or a staticcall. But in the context of delegatecall and staticcall the handling of value is not possible due to the semantics of the respective opcodes, and vyper will silently ignore the value= argument. If the semantics of the EVM are unknown to the developer, he could suspect that by specifying the `value` kwarg, exactly the given amount will be sent along to the target. This vulnerability affects 0.3.10 and earlier versions. See CVE-2024-24567.",
        "cve": "CVE-2024-24567",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "vyper",
        "advisory": "Vyper, a Pythonic language for Ethereum Virtual Machine (EVM) smart contracts, had an issue where contracts with large arrays might underallocate the number of slots they need by one. This issue was addressed in version 0.3.8, which corrected a calculation that could produce a rounding error. The calculation, math.ceil(type_.size_in_bytes / 32), could overestimate or underestimate the number of slots needed. The bug is referenced as CVE-2023-46247.\r\nhttps://github.com/vyperlang/vyper/security/advisories/GHSA-6m97-7527-mh74",
        "cve": "CVE-2023-46247",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "vyper",
        "advisory": "Vyper is a pythonic Smart Contract Language for the Ethereum virtual machine. Starting in version 0.3.8 and prior to version 0.4.0b1, when looping over a `range` of the form `range(start, start + N)`, if `start` is negative, the execution will always revert. This issue is caused by an incorrect assertion inserted by the code generation of the range `stmt.parse_For_range()`. The issue arises when `start` is signed, instead of using `sle`, `le` is used and `start` is interpreted as an unsigned integer for the comparison. If it is a negative number, its 255th bit is set to `1` and is hence interpreted as a very large unsigned integer making the assertion always fail. Any contract having a `range(start, start + N)` where `start` is a signed integer with the possibility for `start` to be negative is affected. If a call goes through the loop while supplying a negative `start` the execution will revert. Version 0.4.0b1 fixes the issue. See CVE-2024-32481.",
        "cve": "CVE-2024-32481",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "vyper",
        "advisory": "Versions susceptible to a vulnerability within Vyper, a Pythonic Smart Contract Language for the Ethereum Virtual Machine (EVM), are exposed to memory corruption. This issue specifically affects instances where forwarder-style proxies are deployed utilizing Vyper's create_forwarder_to function, without employing EIP-1167 style forwarders. For memory corruption to occur, a unique set of conditions must be met: the deployment of a forwarder-style proxy via the create_forwarder_to function, the presence of a function returning data exceeding 4096 bytes, and the absence of data sanitation mechanisms for the returned values.",
        "cve": "PVE-2024-99832",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "vyper",
        "advisory": "A reentrancy attack vulnerability exists in some versions of Vyper, specifically through the Crowdfund.refund() function, in the context of Pythonic smart contract language for the Ethereum Virtual Machine (EVM).",
        "cve": "PVE-2024-99831",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "waifu2x-ncnn-vulkan-python",
        "advisory": "Waifu2x-ncnn-vulkan-python 1.0.4 and prior releases ship with a version of C library 'libwebp' which is affected by a high risk vulnerability.\r\nhttps://inspector.pypi.io/project/waifu2x-ncnn-vulkan-python/1.0.4/packages/42/28/a5ed9e1e843732709d07a0e1c8d50a71a1933a923883905aa4d11191b297/waifu2x-ncnn-vulkan-python-1.0.4.tar.gz/waifu2x-ncnn-vulkan-python-1.0.4/waifu2x_ncnn_vulkan_python/waifu2x-ncnn-vulkan/src/libwebp/ChangeLog",
        "cve": "CVE-2023-4863",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "waitress",
        "advisory": "Waitress 2.1.1 includes a fix for CVE-2022-24761: When using Waitress versions 2.1.0 and prior behind a proxy that does not properly validate the incoming HTTP request matches the RFC7230 standard, Waitress and the frontend proxy may disagree on where one request starts and where it ends. This would allow requests to be smuggled via the front-end proxy to waitress and later behavior. There are two classes of vulnerability that may lead to request smuggling that are addressed by this advisory: The use of Python's 'int()' to parse strings into integers, leading to '+10' to be parsed as '10'', or '0x01' to be parsed as '1', where as the standard specifies that the string should contain only digits or hex digits; and Waitress does not support chunk extensions, however it was discarding them without validating that they did not contain illegal characters. A workaround is available. When deploying a proxy in front of waitress, turning on functionality to make sure that the request matches the RFC7230 standard. Certain proxy servers may not have this functionality.\r\nhttps://github.com/Pylons/waitress/security/advisories/GHSA-4f7p-27jc-3c36",
        "cve": "CVE-2022-24761",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "wasmtime",
        "advisory": "Wasmtime 0.27.0 (Python bindings) downloads a new precompiled version of Wastime core that includes security fixes.",
        "cve": "CVE-2021-32629",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "wasmtime",
        "advisory": "Wasmtime version 0.30.0 (Python bindings) downloads a new precompiled version of Wastime core that includes security fixes.",
        "cve": "CVE-2021-39219",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "wasmtime",
        "advisory": "Wasmtime 0.35.0 (Python bindings) downloads a new precompiled version of Wastime core that includes security fixes.",
        "cve": "CVE-2022-23636",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "wasmtime",
        "advisory": "Wasmtime 0.36.0 (Python bindings) downloads a new precompiled version of Wastime core that includes security fixes.",
        "cve": "CVE-2022-24791",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "wasmtime",
        "advisory": "Wasmtime 0.39.1 and 0.38.3 (Python bindings) download a new precompiled version of Wastime core that includes security fixes.",
        "cve": "CVE-2022-31146",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "wasmtime",
        "advisory": "Wasmtime 0.39.1 (Python bindings) downloads a new precompiled version of Wastime core that includes security fixes.",
        "cve": "CVE-2022-31169",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "wasmtime",
        "advisory": "Wasmtime 15.0.1 (Python bindings) downloads a precompiled version of Wasmtime core (15.0.1) that includes a security fix for the CVE-2022-31104.\r\nhttps://github.com/bytecodealliance/wasmtime/pull/4317\r\nhttps://github.com/bytecodealliance/wasmtime/commit/8bb07523e22df1ab3cbd265c77e836bf84186eb7",
        "cve": "CVE-2022-31104",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "wasmtime",
        "advisory": "Wasmtime 3.0.0 (Python bindings) downloads a precompiled version of Wastime core that includes security fixes.\r\nhttps://github.com/bytecodealliance/wasmtime-py/commit/18a742a3457d6edfab7e96af466721e19d2e12cd",
        "cve": "CVE-2022-39394",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "wasmtime",
        "advisory": "Wasmtime 3.0.0 (Python bindings) downloads a precompiled version of Wastime core that includes security fixes.\r\nhttps://github.com/bytecodealliance/wasmtime-py/commit/18a742a3457d6edfab7e96af466721e19d2e12cd",
        "cve": "CVE-2022-39393",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "wasmtime",
        "advisory": "Wasmtime 3.0.0 (Python bindings) downloads a precompiled version of Wastime core that includes security fixes.\r\nhttps://github.com/bytecodealliance/wasmtime-py/commit/18a742a3457d6edfab7e96af466721e19d2e12cd",
        "cve": "CVE-2022-39392",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "wasmtime",
        "advisory": "Wasmtime (Python bindings) 7.0.0 downloads a precompiled version of Wasmtime core that includes security fixes.\r\nhttps://github.com/bytecodealliance/wasmtime-py/commit/4a52ebbe0a7e577721a30a38170b7472aa153329",
        "cve": "CVE-2023-26489",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "wasmtime",
        "advisory": "Wasmtime (Python bindings) 7.0.0 downloads a precompiled version of Wastime core that includes security fixes.\r\nhttps://github.com/bytecodealliance/wasmtime-py/commit/4a52ebbe0a7e577721a30a38170b7472aa153329",
        "cve": "CVE-2023-27477",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "wasmtime",
        "advisory": "Wasmtime 9.0.0 (Python bindings) downloads a precompiled version of Wasmtime core (9.0.0) that includes a security fix.\r\nhttps://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-ch89-5g45-qwc7",
        "cve": "CVE-2023-30624",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "wasmtime",
        "advisory": "Wasmtime 0.30.0 (Python bindings) downloads a new precompiled version of Wastime core that includes security fixes.",
        "cve": "CVE-2021-39216",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "wasmtime",
        "advisory": "Wastime 0.30.0 (Python bindings) downloads a new precompiled version of Wastime core that includes security fixes.",
        "cve": "CVE-2021-39218",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "wasmtime",
        "advisory": "Wasmtime 13.0.0 (Python bindings) downloads a precompiled version of Wasmtime core (13.0.0) that includes a security fix.\r\nhttps://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-gw5p-q8mj-p7gh",
        "cve": "CVE-2023-41880",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "weixin-python",
        "advisory": "Weixin-python 0.5.5 includes a fix for CVE-2018-25082: This issue affects the function validate/to_xml. The manipulation leads to xml external entity reference. The attack may be initiated remotely.",
        "cve": "CVE-2018-25082",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "werkzeug",
        "advisory": "Werkzeug 2.2.3 includes a fix for CVE-2023-25577: Prior to version 2.2.3, Werkzeug's multipart form data parser will parse an unlimited number of parts, including file parts. Parts can be a small amount of bytes, but each requires CPU time to parse and may use more memory as Python data. If a request can be made to an endpoint that accesses 'request.data', 'request.form', 'request.files', or 'request.get_data(parse_form_data=False)', it can cause unexpectedly high resource usage. This allows an attacker to cause a denial of service by sending crafted multipart data to an endpoint that will parse it. The amount of CPU time required can block worker processes from handling legitimate requests. The amount of RAM required can trigger an out of memory kill of the process. Unlimited file parts can use up memory and file handles. If many concurrent requests are sent continuously, this can exhaust or kill all available workers.\r\nhttps://github.com/pallets/werkzeug/security/advisories/GHSA-xg9f-g7g7-2323",
        "cve": "CVE-2023-25577",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "wheel",
        "advisory": "Wheel 0.38.1 includes a fix for CVE-2022-40898: An issue discovered in Python Packaging Authority (PyPA) Wheel 0.37.1 and earlier allows remote attackers to cause a denial of service via attacker controlled input to wheel cli.\r\nhttps://pyup.io/posts/pyup-discovers-redos-vulnerabilities-in-top-python-packages",
        "cve": "CVE-2022-40898",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "whoogle-search",
        "advisory": "Whoogle-search 0.7.2 updates its Python image to python:3.11.0a5-alpine to include a security fix.",
        "cve": "CVE-2022-23990",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "wiremock",
        "advisory": "Wiremock 2.5.0 updates 'wiremock-standalone.jar' to version 2.35.0 to include a fix for a path traversal vulnerability.\r\nhttps://github.com/wiremock/python-wiremock/pull/48\r\nhttps://github.com/wiremock/wiremock/pull/1930",
        "cve": "PVE-2023-59418",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "wtforms",
        "advisory": "Specific versions of WTForms, a Python web development library, are vulnerable to Cross-site Scripting (XSS) attacks because label names are not escaped. This vulnerability exposes applications to potential malicious scripting through improperly sanitized label fields in forms.",
        "cve": "PVE-2024-99824",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "xaitk-saliency",
        "advisory": "Xaitk-saliency 0.5.0 updates its dependency 'ipython' to v7.31.1 to include a security fix.",
        "cve": "CVE-2022-21699",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "xdg",
        "advisory": "A code injection issue was discovered in PyXDG before 0.26 via crafted Python code in a Category element of a Menu XML document in a .menu file. XDG_CONFIG_DIRS must be set up to trigger xdg.Menu.parse parsing within the directory containing this file. This is due to a lack of sanitization in xdg/Menu.py before an eval call. See: CVE-2019-12761.",
        "cve": "CVE-2019-12761",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "xdg",
        "advisory": "Race condition in the xdg.BaseDirectory.get_runtime_dir function in python-xdg 0.25 allows local users to overwrite arbitrary files by pre-creating /tmp/pyxdg-runtime-dir-fallback-victim to point to a victim-owned location, then replacing it with a symlink to an attacker-controlled location once the get_runtime_dir function is called.",
        "cve": "CVE-2014-1624",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "yamale",
        "advisory": "Yamale 3.0.8 includes a fix for CVE-2021-38305: 23andMe Yamale before 3.0.8 allows remote attackers to execute arbitrary code via a crafted schema file. The schema parser uses eval as part of its processing, and tries to protect from malicious expressions by limiting the builtins that are passed to the eval. When processing the schema, each line is run through Python's eval function to make the validator available. A well-constructed string within the schema rules can execute system commands; thus, by exploiting the vulnerability, an attacker can run arbitrary code on the image that invokes Yamale.\r\nhttps://github.com/23andMe/Yamale/pull/165\r\nhttps://github.com/23andMe/Yamale/releases/tag/3.0.8",
        "cve": "CVE-2021-38305",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "yandex-yt",
        "advisory": "Yandex-yt is a malicious package, typosquatting.  It steals Discord access tokens, passwords, and even stage dependency confusion attacks.\r\nhttps://thehackernews.com/2021/11/11-malicious-pypi-python-libraries.html",
        "cve": "PVE-2022-45463",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "yara-mail",
        "advisory": "Yara-mail 2.0.14 updates its dependency \"yara-python\" requirement to \">=4.2.3\" to include a security fix.",
        "cve": "PVE-2022-50813",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "yara-python",
        "advisory": "Yara-python 4.2.3 includes a fix for an arbitrary code execution vulnerability.\r\nhttps://github.com/VirusTotal/yara/commit/b77e4f45b4662af320c999d4ee559e1f3bc61226",
        "cve": "PVE-2022-50813",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "yaybu",
        "advisory": "Select versions of Yaybu, a Python tool for server deployment and configuration management, are susceptible to Information Exposure. This vulnerability arises because file permissions are applied after the file content is written, creating an opportunity for attackers to intercept the file's contents.",
        "cve": "PVE-2024-99821",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "yfpy",
        "advisory": "Yfpy 4.0.0 removes support for Python 3.5, which doesn't receive security updates anymore.",
        "cve": "CVE-2020-27619",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "yiffparty",
        "advisory": "Yiffparty is a malicious package, typosquatting.  It steals Discord access tokens, passwords, and even stage dependency confusion attacks.\r\nhttps://thehackernews.com/2021/11/11-malicious-pypi-python-libraries.html",
        "cve": "PVE-2022-45464",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "yt",
        "advisory": "Yt 4.1.2 includes a fix for CVE-2007-4559: Directory traversal vulnerability in the (1) extract and (2) extractall functions in the tarfile module in Python allows user-assisted remote attackers to overwrite arbitrary files via a .. (dot dot) sequence in filenames in a TAR archive, a related issue to CVE-2001-1267.",
        "cve": "CVE-2007-4559",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "zanshin-sdk-python",
        "advisory": "Zanshin-sdk-python version 1.2.5 has upgraded its httpx library to version 0.23.0 to address the security vulnerability detailed in CVE-2021-41945.",
        "cve": "CVE-2021-41945",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "zbar",
        "advisory": "Zbar (python bindings) 0.10 and prior releases require a version of the ZBar Bar Code Reader which is affected by CVE-2023-40889: A heap-based buffer overflow exists in the qr_reader_match_centers function of ZBar 0.23.90. Specially crafted QR codes may lead to information disclosure and/or arbitrary code execution. To trigger this vulnerability, an attacker can digitally input the malicious QR code, or prepare it to be physically scanned by the vulnerable scanner.\r\nhttps://hackmd.io/@cspl/B1ZkFZv23",
        "cve": "CVE-2023-40889",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "zbar",
        "advisory": "Zbar (python bindings) 0.10 and prior releases require a version of the ZBar Bar Code Reader which is affected by CVE-2023-40890: A stack-based buffer overflow vulnerability exists in the lookup_sequence function of ZBar 0.23.90. Specially crafted QR codes may lead to information disclosure and/or arbitrary code execution. To trigger this vulnerability, an attacker can digitally input the malicious QR code, or prepare it to be physically scanned by the vulnerable scanner.\r\nhttps://lists.debian.org/debian-lts-announce/2023/12/msg00001.html",
        "cve": "CVE-2023-40890",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "zenml",
        "advisory": "ZenML Server in the ZenML package before 0.46.7 for Python allows remote privilege escalation because the /api/v1/users/{user_name_or_id}/activate REST API endpoint allows access on the basis of a valid username along with a new password in the request body. These are also patched versions: 0.44.4, 0.43.1, and 0.42.2. See CVE-2024-25723.",
        "cve": "CVE-2024-25723",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "zenml",
        "advisory": "Zenml version 0.56.3 updates its python-multipart dependency from \"~0.0.5\" to \"~0.0.9\" in response to GHSA-qf9m-vfgh-m389. This change addresses a vulnerability in python-multipart that impacts its use with FastAPI.",
        "cve": "PVE-2024-67582",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "zipp",
        "advisory": "A Denial of Service (DoS) vulnerability exists in the jaraco/zipp library. The vulnerability is triggered when processing a specially crafted zip file that leads to an infinite loop. This issue also impacts the zipfile module of CPython, as features from the third-party zipp library are later merged into CPython, and the affected code is identical in both projects. The infinite loop can be initiated through the use of functions affecting the `Path` module in both zipp and zipfile, such as `joinpath`, the overloaded division operator, and `iterdir`. Although the infinite loop is not resource exhaustive, it prevents the application from responding.",
        "cve": "CVE-2024-5569",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "zodb",
        "advisory": "Unspecified vulnerability in Zope Object Database (ZODB) before 3.8.2, when certain Zope Enterprise Objects (ZEO) database sharing is enabled, allows remote attackers to execute arbitrary Python code via vectors involving the ZEO network protocol.",
        "cve": "CVE-2009-0668",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "zodb3",
        "advisory": "Zodb3 3.8.2 includes a  fix for CVE-2009-0668: Arbitrary Python code execution in ZODB ZEO storage servers.\r\nhttps://github.com/zopefoundation/ZODB/commit/74888d16158655661b87aa25fa272293b704f9fa",
        "cve": "CVE-2009-0668",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "zope",
        "advisory": "Zope 4.6 and 5.2 includes a fix for CVE-2021-32633: Zope is an open-source web application server. In Zope versions prior to 4.6 and 5.2, users can access untrusted modules indirectly through Python modules that are available for direct use. By default, only users with the Manager role can add or edit Zope Page Templates through the web, but sites that allow untrusted users to add/edit Zope Page Templates through the web are at risk from this vulnerability. The problem has been fixed in Zope 5.2 and 4.6. As a workaround, a site administrator can restrict adding/editing Zope Page Templates through the web using the standard Zope user/role permission mechanisms. Untrusted users should not be assigned the Zope Manager role and adding/editing Zope Page Templates through the web should be restricted to trusted users only.\r\nhttps://github.com/zopefoundation/Zope/security/advisories/GHSA-5pr9-v234-jw36",
        "cve": "CVE-2021-32633",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "zope",
        "advisory": "Zope updates its dependency 'RestrictedPython' to '6.2' in master branch to include a security fix.\r\nhttps://github.com/zopefoundation/Zope/commit/c31b1c635e85a1766f2666cb0bd117337ae5fa67",
        "cve": "CVE-2023-41039",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "zope",
        "advisory": "Zope 4.6.3 and 5.3.0 include a fix for CVE-2021-32811: Zope versions prior to versions 4.6.3 and 5.3 have a remote code execution security issue. In order to be affected, one must use Python 3 for one's Zope deployment, run Zope 4 below version 4.6.3 or Zope 5 below version 5.3, and have the optional 'Products.PythonScripts' add-on package installed. By default, one must have the admin-level Zope \"Manager\" role to add or edit Script (Python) objects through the web. Only sites that allow untrusted users to add/edit these scripts through the web are at risk. Zope releases 4.6.3 and 5.3 are not vulnerable. As a workaround, a site administrator can restrict adding/editing Script (Python) objects through the web using the standard Zope user/role permission mechanisms. Untrusted users should not be assigned the Zope Manager role and adding/editing these scripts through the web should be restricted to trusted users only. This is the default configuration in Zope.\r\nhttps://github.com/zopefoundation/Zope/security/advisories/GHSA-g4gq-j4p2-j8fr",
        "cve": "CVE-2021-32811",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "zope2",
        "advisory": "PythonScripts in Zope2 2.11.2 and earlier, as used in Conga and other products, allows remote authenticated users to cause a denial of service (resource consumption or application halt) via certain (1) raise or (2) import statements.",
        "cve": "CVE-2008-5102",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "zope2",
        "advisory": "Unspecified vulnerability in Zope 2.12.x and 2.13.x, as used in Plone 4.0.x through 4.0.9, 4.1, and 4.2 through 4.2a2, allows remote attackers to execute arbitrary commands via vectors related to the p_ class in OFS/misc_.py and the use of Python modules.",
        "cve": "CVE-2011-3587",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "zotero2readwise",
        "advisory": "Zotero2readwise 0.2.4 updates its dependency 'ipython' to v7.32.0 to include a security fix.",
        "cve": "CVE-2022-21699",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "zstd",
        "advisory": "The python-zstd version 1.5.5.1 has upgraded its dependency Zstd from version 1.5.4 to 1.5.5. This upgrade includes a fix for a vulnerability discovered in zstd version 1.4.10. The vulnerability allows an attacker to supply an empty string as an argument to the command line tool, which could lead to a buffer overrun.\r\nhttps://github.com/facebook/zstd/pull/3220/commits/e1873ad576cb478fff0e6e44ad99599cd5fd2846\r\nhttps://github.com/sergey-dryabzhinsky/python-zstd/commit/4bf2a020aaa5055ff4a61fd11de3afe195b1c3d7",
        "cve": "CVE-2022-4899",
        "more_info": "https://pyup.io"
    },
    {
        "source": "SafetyDB",
        "package": "zulip-botserver",
        "advisory": "Zulip-botserver 0.5.0 validates tokens before accepting messages to avoid impersonation.\r\nhttps://github.com/zulip/python-zulip-api/pull/408/commits/ec866400e5ab1b978f6805656c7cba13d00df6ac",
        "cve": "PVE-2022-51836",
        "more_info": "https://pyup.io"
    },
    {
        "source": "NVD-CVE",
        "cve_id": "CVE-2024-20286",
        "description": "A vulnerability in the Python interpreter of Cisco NX-OS Software could allow an authenticated, low-privileged, local attacker to escape the Python sandbox and gain unauthorized access to the underlying operating system of the device.\r\n\r\nThe vulnerability is due to insufficient validation of user-supplied input. An attacker could exploit this vulnerability by manipulating specific functions within the Python interpreter. A successful exploit could allow an attacker to escape the Python sandbox and execute arbitrary commands on the underlying operating system with the privileges of the authenticated user.&nbsp;\r\nNote: An attacker must be authenticated with Python execution privileges to exploit these vulnerabilities. For more information regarding Python execution privileges, see product-specific documentation, such as the  section of the Cisco Nexus 9000 Series NX-OS Programmability Guide.",
        "references": [
            "https://sec.cloudapps.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-nxos-psbe-ce-YvbTn5du",
            "https://www.cisco.com/c/en/us/td/docs/dcn/nx-os/nexus9000/105x/programmability/cisco-nexus-9000-series-nx-os-programmability-guide-105x/m-n9k-python-api-101x.html?bookSearch=true#concept_A2CFF094ADCB414C983EA06AD8E9A410"
        ]
    },
    {
        "source": "NVD-CVE",
        "cve_id": "CVE-2024-20285",
        "description": "A vulnerability in the Python interpreter of Cisco NX-OS Software could allow an authenticated, low-privileged, local attacker to escape the Python sandbox and gain unauthorized access to the underlying operating system of the device.\r\n\r\nThe vulnerability is due to insufficient validation of user-supplied input. An attacker could exploit this vulnerability by manipulating specific functions within the Python interpreter. A successful exploit could allow an attacker to escape the Python sandbox and execute arbitrary commands on the underlying operating system with the privileges of the authenticated user.&nbsp;\r\nNote: An attacker must be authenticated with Python execution privileges to exploit these vulnerabilities. For more information regarding Python execution privileges, see product-specific documentation, such as the  section of the Cisco Nexus 9000 Series NX-OS Programmability Guide.",
        "references": [
            "https://sec.cloudapps.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-nxos-psbe-ce-YvbTn5du",
            "https://www.cisco.com/c/en/us/td/docs/dcn/nx-os/nexus9000/105x/programmability/cisco-nexus-9000-series-nx-os-programmability-guide-105x/m-n9k-python-api-101x.html?bookSearch=true#concept_A2CFF094ADCB414C983EA06AD8E9A410"
        ]
    },
    {
        "source": "NVD-CVE",
        "cve_id": "CVE-2024-20284",
        "description": "A vulnerability in the Python interpreter of Cisco NX-OS Software could allow an authenticated, low-privileged, local attacker to escape the Python sandbox and gain unauthorized access to the underlying operating system of the device.\r\n\r\nThe vulnerability is due to insufficient validation of user-supplied input. An attacker could exploit this vulnerability by manipulating specific functions within the Python interpreter. A successful exploit could allow an attacker to escape the Python sandbox and execute arbitrary commands on the underlying operating system with the privileges of the authenticated user.&nbsp;\r\nNote: An attacker must be authenticated with Python execution privileges to exploit these vulnerabilities. For more information regarding Python execution privileges, see product-specific documentation, such as the  section of the Cisco Nexus 9000 Series NX-OS Programmability Guide.",
        "references": [
            "https://sec.cloudapps.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-nxos-psbe-ce-YvbTn5du",
            "https://www.cisco.com/c/en/us/td/docs/dcn/nx-os/nexus9000/105x/programmability/cisco-nexus-9000-series-nx-os-programmability-guide-105x/m-n9k-python-api-101x.html?bookSearch=true#concept_A2CFF094ADCB414C983EA06AD8E9A410"
        ]
    },
    {
        "source": "NVD-CVE",
        "cve_id": "CVE-2024-8088",
        "description": "There is a HIGH severity vulnerability affecting the CPython \"zipfile\"\nmodule affecting \"zipfile.Path\". Note that the more common API \"zipfile.ZipFile\" class is unaffected.\n\n\n\n\n\nWhen iterating over names of entries in a zip archive (for example, methods\nof \"zipfile.Path\" like \"namelist()\", \"iterdir()\", etc)\nthe process can be put into an infinite loop with a maliciously crafted\nzip archive. This defect applies when reading only metadata or extracting\nthe contents of the zip archive. Programs that are not handling\nuser-controlled zip archives are not affected.",
        "references": [
            "https://mail.python.org/archives/list/security-announce@python.org/thread/GNFCKVI4TCATKQLALJ5SN4L4CSPSMILU/",
            "https://github.com/python/cpython/pull/122906",
            "https://github.com/python/cpython/issues/122905",
            "https://github.com/python/cpython/commit/795f2597a4be988e2bb19b69ff9958e981cb894e",
            "https://github.com/python/cpython/commit/8c7348939d8a3ecd79d630075f6be1b0c5b41f64",
            "https://github.com/python/cpython/commit/dcc5182f27c1500006a1ef78e10613bb45788dea",
            "https://github.com/python/cpython/commit/e0264a61119d551658d9445af38323ba94fc16db",
            "https://github.com/python/cpython/issues/123270"
        ]
    },
    {
        "source": "NVD-CVE",
        "cve_id": "CVE-2024-43404",
        "description": "MEGABOT is a fully customized Discord bot for learning and fun. The `/math` command and functionality of MEGABOT versions < 1.5.0 contains a remote code execution vulnerability due to a Python `eval()`. The vulnerability allows an attacker to inject Python code into the `expression` parameter when using `/math` in any Discord channel. This vulnerability impacts any discord guild utilizing MEGABOT. This vulnerability was fixed in  release version 1.5.0.",
        "references": [
            "https://github.com/NicPWNs/MEGABOT/security/advisories/GHSA-vhxp-4hwq-w3p2",
            "https://github.com/NicPWNs/MEGABOT/issues/137",
            "https://github.com/NicPWNs/MEGABOT/pull/138",
            "https://github.com/NicPWNs/MEGABOT/commit/71e79e5581ea36313700385b112d863053fb7ed6",
            "https://github.com/NicPWNs/MEGABOT/releases/tag/v1.5.0"
        ]
    },
    {
        "source": "NVD-CVE",
        "cve_id": "CVE-2024-39705",
        "description": "NLTK through 3.8.1 allows remote code execution if untrusted packages have pickled Python code, and the integrated data package download functionality is used. This affects, for example, averaged_perceptron_tagger and punkt.",
        "references": [
            "https://github.com/nltk/nltk/issues/3266",
            "https://github.com/nltk/nltk/issues/2522",
            "https://www.vicarius.io/vsociety/posts/rce-in-python-nltk-cve-2024-39705-39706"
        ]
    },
    {
        "source": "NVD-CVE",
        "cve_id": "CVE-2024-4032",
        "description": "The \u201cipaddress\u201d module contained incorrect information about whether certain IPv4 and IPv6 addresses were designated as \u201cglobally reachable\u201d or \u201cprivate\u201d. This affected the is_private and is_global properties of the ipaddress.IPv4Address, ipaddress.IPv4Network, ipaddress.IPv6Address, and ipaddress.IPv6Network classes, where values wouldn\u2019t be returned in accordance with the latest information from the IANA Special-Purpose Address Registries.\n\nCPython 3.12.4 and 3.13.0a6 contain updated information from these registries and thus have the intended behavior.",
        "references": [
            "https://github.com/python/cpython/issues/113171",
            "https://github.com/python/cpython/pull/113179",
            "https://www.iana.org/assignments/iana-ipv4-special-registry/iana-ipv4-special-registry.xhtml",
            "https://www.iana.org/assignments/iana-ipv6-special-registry/iana-ipv6-special-registry.xhtml",
            "https://mail.python.org/archives/list/security-announce@python.org/thread/NRUHDUS2IV2USIZM2CVMSFL6SCKU3RZA/",
            "https://github.com/python/cpython/commit/22adf29da8d99933ffed8647d3e0726edd16f7f8",
            "https://github.com/python/cpython/commit/40d75c2b7f5c67e254d0a025e0f2e2c7ada7f69f",
            "https://github.com/python/cpython/commit/895f7e2ac23eff4743143beef0f0c5ac71ea27d3",
            "https://github.com/python/cpython/commit/ba431579efdcbaed7a96f2ac4ea0775879a332fb",
            "https://github.com/python/cpython/commit/c62c9e518b784fe44432a3f4fc265fb95b651906",
            "https://github.com/python/cpython/commit/f86b17ac511e68192ba71f27e752321a3252cee3",
            "http://www.openwall.com/lists/oss-security/2024/06/17/3",
            "https://security.netapp.com/advisory/ntap-20240726-0004/"
        ]
    },
    {
        "source": "NVD-CVE",
        "cve_id": "CVE-2023-29483",
        "description": "eventlet before 0.35.2, as used in dnspython before 2.6.0, allows remote attackers to interfere with DNS name resolution by quickly sending an invalid packet from the expected IP address and source port, aka a \"TuDoor\" attack. In other words, dnspython does not have the preferred behavior in which the DNS name resolution algorithm would proceed, within the full time window, in order to wait for a valid packet. NOTE: dnspython 2.6.0 is unusable for a different reason that was addressed in 2.6.1.",
        "references": [
            "https://www.dnspython.org/",
            "https://github.com/rthalley/dnspython/releases/tag/v2.6.0",
            "https://github.com/rthalley/dnspython/issues/1045",
            "https://security.snyk.io/vuln/SNYK-PYTHON-DNSPYTHON-6241713",
            "https://github.com/eventlet/eventlet/issues/913",
            "https://github.com/eventlet/eventlet/releases/tag/v0.35.2",
            "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/VOHJOO3OM65UIUUUVDEXMCTXNM6LXZEH/",
            "https://security.netapp.com/advisory/ntap-20240510-0001/",
            "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/NLRKR57IFVKQC2GCXZBFLCLBAWBWL3F6/",
            "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/X3BNSIK5NFYSAP53Y45GOCMOQHHDLGIF/"
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2022-7",
        "summary": "CVE-2021-3737: urllib HTTP client possible infinite loop on a 100 Continue response",
        "details": "A flaw was found in python. An improperly handled HTTP response in the HTTP client code of python may allow a remote attacker, who controls the HTTP server, to make the client script enter an infinite loop, consuming CPU time. The highest threat from this vulnerability is to system availability.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "078b146f062d212919d0ba25e34e658a8234aa63"
                            },
                            {
                                "fixed": "47895e31b6f626bc6ce47d175fe9d43c1098909d"
                            },
                            {
                                "fixed": "60ba0b68470a584103e28958d91e93a6db37ec92"
                            },
                            {
                                "fixed": "ea9327036680acc92d9f89eaf6f6a54d2f8d78d9"
                            },
                            {
                                "fixed": "f396864ddfe914531b5856d7bf852808ebfc01ae"
                            },
                            {
                                "fixed": "f68d2d69f1da56c2aea1293ecf93ab69a6010ad7"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "https://access.redhat.com/security/cve/CVE-2021-3737"
            },
            {
                "type": "ADVISORY",
                "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1995162"
            },
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue44022"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2017-2",
        "summary": "Zlib 1.2.11",
        "details": "inftrees.c in zlib 1.2.8 might allow context-dependent attackers to have unspecified impact by leveraging improper pointer arithmetic.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "34e7e2ecb1741850190e78f42875480693d3537b"
                            },
                            {
                                "fixed": "80b24a9354c60f6b800d462c941c6d4cde3cf783"
                            },
                            {
                                "fixed": "d0e61bded5256e775e470e2c0da22367a1a81970"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue29169"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2012-1",
        "summary": "SimpleHTTPServer UTF-7",
        "details": "The list_directory function in Lib/SimpleHTTPServer.py in SimpleHTTPServer in Python before 2.5.6c1, 2.6.x before 2.6.7 rc2, and 2.7.x before 2.7.2 does not place a charset parameter in the Content-Type HTTP header, which makes it easier for remote attackers to conduct cross-site scripting (XSS) attacks against Internet Explorer 7 via UTF-7 encoding.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "3853586e0caa0d5c4342ac8bd7e78cb5766fa8cc"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue11442"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2008-6",
        "summary": "Multiple integer overflows (Apple)",
        "details": "Multiple buffer overflows in Python 2.5.2 and earlier on 32bit platforms allow context-dependent attackers to cause a denial of service (crash) or have unspecified other impact via a long string that leads to incorrect memory allocation during Unicode string processing, related to the unicode_resize function and the PyMem_RESIZE macro.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "3ce5d9207e66d61d4b0502cf47ed2d2bcdd2212f"
                            },
                            {
                                "fixed": "e7d8be80ba634fa15ece6f503c33592e0d333361"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "https://lists.apple.com/archives/security-announce/2009/Feb/msg00000.html"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2023-3",
        "summary": "",
        "details": "CPython v3.12.0 alpha 7 was discovered to contain a heap use-after-free via the function ascii_decode at /Objects/unicodeobject.c.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "1ef61cf71a218c71860ff6aecf0fd51edb8b65dc"
                            },
                            {
                                "fixed": "d5a97074d24cd14cb2a35a2b1ad3074863cde264"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": []
    },
    {
        "source": "PSF",
        "id": "PSF-2016-6",
        "summary": "Expat 2.2 (Expat bug #537)",
        "details": "The overflow protection in Expat is removed by compilers with certain optimization settings, which allows remote attackers to cause a denial of service (crash) or possibly execute arbitrary code via crafted XML data.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2015-1283 and CVE-2015-2716.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "0e4571a68a7f48e8469ef05b04ba3463d3fd82c0"
                            },
                            {
                                "fixed": "23ec4b57e1359f9c539b8defc317542173ae087e"
                            },
                            {
                                "fixed": "71572bbe82aa0836c036d44d41c8269ba6a321be"
                            },
                            {
                                "fixed": "86b95370c45dedb8a56c9894372a43681de47a73"
                            },
                            {
                                "fixed": "8c797ed8a0fea5e3162b9415f13e270d4d5d9549"
                            },
                            {
                                "fixed": "ab90986600ba7dea2aa41e5c1773791070725453"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue29591"
            },
            {
                "type": "WEB",
                "url": "https://bugs.python.org/issue30610"
            },
            {
                "type": "WEB",
                "url": "https://sourceforge.net/p/expat/bugs/537/"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2018-7",
        "summary": "xml package does not obey ignore_environment",
        "details": "On two occasions, the xml package uses environment variables to override\nparser / DOM implementations: ``xml.sax package`` and ``xml.dom.domreg``\nmodule. On both occasions, the code should not use env vars to override\nmodule names, when the interpreter is started with flags like ``-E``\nor ``-I``.\n",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "223e501fb9c2b6ae21b96054e20c4c31d94a5d96"
                            },
                            {
                                "fixed": "2546ac8eeb56fc146adea9a03158440a9271714e"
                            },
                            {
                                "fixed": "5e808f92ea4eb238b17757526b99f97debf7dd57"
                            },
                            {
                                "fixed": "765d333512e9b58da4a4431595a0e81517ef0443"
                            },
                            {
                                "fixed": "7cd08cf62086a8a2d84fd825dfcd8bfe33bf1986"
                            },
                            {
                                "fixed": "c119d5948f941d2f528dda3f099e196bd6383000"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue34791"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2024-1",
        "summary": "",
        "details": "An issue was found in the CPython `tempfile.TemporaryDirectory` class affecting versions 3.12.1, 3.11.7, 3.10.13, 3.9.18, and 3.8.18 and prior.\n\nThe tempfile.TemporaryDirectory class would dereference symlinks during cleanup of permissions-related errors. This means users which can run privileged programs are potentially able to modify permissions of files referenced by symlinks in some circumstances.\n",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "81c16cd94ec38d61aa478b9a452436dc3b1b524d"
                            },
                            {
                                "fixed": "6ceb8aeda504b079fef7a57b8d81472f15cdd9a5"
                            },
                            {
                                "fixed": "5585334d772b253a01a6730e8202ffb1607c3d25"
                            },
                            {
                                "fixed": "8eaeefe49d179ca4908d052745e3bb8b6f238f82"
                            },
                            {
                                "fixed": "d54e22a669ae6e987199bb5d2c69bb5a46b0083b"
                            },
                            {
                                "fixed": "02a9259c717738dfe6b463c44d7e17f2b6d2cb3a"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/81c16cd94ec38d61aa478b9a452436dc3b1b524d"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/6ceb8aeda504b079fef7a57b8d81472f15cdd9a5"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/5585334d772b253a01a6730e8202ffb1607c3d25"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/8eaeefe49d179ca4908d052745e3bb8b6f238f82"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/d54e22a669ae6e987199bb5d2c69bb5a46b0083b"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/02a9259c717738dfe6b463c44d7e17f2b6d2cb3a"
            },
            {
                "type": "REPORT",
                "url": "https://github.com/python/cpython/issues/91133"
            },
            {
                "type": "ADVISORY",
                "url": "https://mail.python.org/archives/list/security-announce@python.org/thread/Q5C6ATFC67K53XFV4KE45325S7NS62LD/"
            },
            {
                "type": "WEB",
                "url": "https://lists.debian.org/debian-lts-announce/2024/03/msg00025.html"
            },
            {
                "type": "WEB",
                "url": "http://www.openwall.com/lists/oss-security/2024/03/20/5"
            },
            {
                "type": "WEB",
                "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/T3IGRX54M7RNCQOXVQO5KQKTGWCOABIM/"
            },
            {
                "type": "WEB",
                "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/U5VHWS52HGD743C47UMCSAK2A773M2YE/"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2020-6",
        "summary": "CJK codecs tests call eval() on content retrieved via HTTP",
        "details": "In Python 3 through 3.9.0, the Lib/test/multibytecodec_support.py CJK codec tests call eval() on content retrieved via HTTP.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "2ef5caa58febc8968e670e39e3d37cf8eef3cab8"
                            },
                            {
                                "fixed": "43e523103886af66d6c27cd72431b5d9d14cd2a9"
                            },
                            {
                                "fixed": "6c6c256df3636ff6f6136820afaefa5a10a3ac33"
                            },
                            {
                                "fixed": "b664a1df4ee71d3760ab937653b10997081b1794"
                            },
                            {
                                "fixed": "e912e945f2960029d039d3390ea08835ad39374b"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "https://access.redhat.com/security/cve/CVE-2020-27619"
            },
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue41944"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2019-3",
        "summary": "urlsplit does not handle NFKC normalization (second fix)",
        "details": "A security regression of CVE-2019-9636 was discovered in python since commit d537ab0ff9767ef024f26246899728f0116b1ec3 affecting versions 2.7, 3.5, 3.6, 3.7 and from v3.8.0a4 through v3.8.0b1, which still allows an attacker to exploit CVE-2019-9636 by abusing the user and password parts of a URL. When an application parses user-supplied URLs to store cookies, authentication credentials, or other kind of information, it is possible for an attacker to provide specially crafted URLs to make the application locate host-related information (e.g. cookies, authentication data) and send them to a different host than where it should, unlike if the URLs had been correctly parsed. The result of an attack may vary based on the application.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "250b62acc59921d399f0db47db3b462cd6037e09"
                            },
                            {
                                "fixed": "4655d576141ee56a69d2052431c636858fcb916a"
                            },
                            {
                                "fixed": "8d0ef0b5edeae52960c7ed05ae8a12388324f87e"
                            },
                            {
                                "fixed": "f61599b050c621386a3fc6bc480359e2d3bb93de"
                            },
                            {
                                "fixed": "fd1771dbdd28709716bd531580c40ae5ed814468"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue36742"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2019-10",
        "summary": "HTTP Header Injection (follow-up of CVE-2016-5699)",
        "details": "An issue was discovered in urllib2 in Python 2.x through 2.7.16 and urllib in Python 3.x through 3.7.3. CRLF injection is possible if the attacker controls a url parameter, as demonstrated by the first argument to urllib.request.urlopen with \\r\\n (specifically in the query string after a ? character) followed by an HTTP header or a Redis command. This is fixed in: v2.7.17, v2.7.17rc1, v2.7.18, v2.7.18rc1; v3.5.10, v3.5.10rc1, v3.5.8, v3.5.8rc1, v3.5.8rc2, v3.5.9; v3.6.10, v3.6.10rc1, v3.6.11, v3.6.11rc1, v3.6.12, v3.6.9, v3.6.9rc1; v3.7.4, v3.7.4rc1, v3.7.4rc2, v3.7.5, v3.7.5rc1, v3.7.6, v3.7.6rc1, v3.7.7, v3.7.7rc1, v3.7.8, v3.7.8rc1, v3.7.9.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "7e200e0763f5b71c199aaf98bd5588f291585619"
                            },
                            {
                                "fixed": "afe3a4975cf93c97e5d6eb8800e48f368011d37a"
                            },
                            {
                                "fixed": "bb8071a4cae5ab3fe321481dd3d73662ffb26052"
                            },
                            {
                                "fixed": "c4e671eec20dfcb29b18596a89ef075f826c9f96"
                            },
                            {
                                "fixed": "c50d437e942d4c4c45c8cd76329b05340c02eb31"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue30458"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2014-7",
        "summary": "Validate TLS certificate",
        "details": "The HTTP clients in the (1) httplib, (2) urllib, (3) urllib2, and (4) xmlrpclib libraries in CPython (aka Python) 2.x before 2.7.9 and 3.x before 3.4.3, when accessing an HTTPS URL, do not (a) check the certificate against a trust store or verify that the server hostname matches a domain name in the subject's (b) Common Name or (c) subjectAltName field of the X.509 certificate, which allows man-in-the-middle attackers to spoof SSL servers via an arbitrary valid certificate.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "4ffb0752710f0c0720d4f2af0c4b7ce1ebb9d2bd"
                            },
                            {
                                "fixed": "e3e7d40514e5dd0c3847682a719577efcfae1d8f"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue22417"
            },
            {
                "type": "WEB",
                "url": "https://www.python.org/dev/peps/pep-0476/"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2021-2",
        "summary": "ipaddress leading zeros in IPv4 address",
        "details": "In Python before 3,9,5, the ipaddress library mishandles leading zero characters in the octets of an IP address string. This (in some situations) allows attackers to bypass access control that is based on IP addresses.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "03dd89d62413c4a92831ed1b36e2ae8983bcb2d4"
                            },
                            {
                                "fixed": "5374fbc31446364bf5f12e5ab88c5493c35eaf04"
                            },
                            {
                                "fixed": "60ce8f0be6354ad565393ab449d8de5d713f35bc"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "WEB",
                "url": "https://sick.codes/sick-2021-014"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2021-3",
        "summary": "ctypes: Buffer overflow in PyCArg_repr",
        "details": "Python 3.x through 3.9.1 has a buffer overflow in PyCArg_repr in _ctypes/callproc.c, which may lead to remote code execution in certain Python applications that accept floating-point numbers as untrusted input, as demonstrated by a 1e300 argument to c_double.from_param. This occurs because sprintf is used unsafely.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "34df10a9a16b38d54421eeeaf73ec89828563be7"
                            },
                            {
                                "fixed": "916610ef90a0d0761f08747f7b0905541f0977c7"
                            },
                            {
                                "fixed": "c347cbe694743cee120457aa6626712f7799a932"
                            },
                            {
                                "fixed": "d9b8f138b7df3b455b54653ca59f491b4840d6fa"
                            },
                            {
                                "fixed": "ece5dfd403dac211f8d3c72701fe7ba7b7aa5b5f"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "https://access.redhat.com/security/cve/cve-2021-3177"
            },
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue42938"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2019-11",
        "summary": "HTTP Header Injection (follow-up of CVE-2016-5699)",
        "details": "An issue was discovered in urllib2 in Python 2.x through 2.7.16 and urllib in Python 3.x through 3.7.3. CRLF injection is possible if the attacker controls a url parameter, as demonstrated by the first argument to urllib.request.urlopen with \\r\\n (specifically in the path component of a URL that lacks a ? character) followed by an HTTP header or a Redis command. This is similar to the CVE-2019-9740 query string issue. This is fixed in: v2.7.17, v2.7.17rc1, v2.7.18, v2.7.18rc1; v3.5.10, v3.5.10rc1, v3.5.8, v3.5.8rc1, v3.5.8rc2, v3.5.9; v3.6.10, v3.6.10rc1, v3.6.11, v3.6.11rc1, v3.6.12, v3.6.9, v3.6.9rc1; v3.7.4, v3.7.4rc1, v3.7.4rc2, v3.7.5, v3.7.5rc1, v3.7.6, v3.7.6rc1, v3.7.7, v3.7.7rc1, v3.7.8, v3.7.8rc1, v3.7.9.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "7e200e0763f5b71c199aaf98bd5588f291585619"
                            },
                            {
                                "fixed": "afe3a4975cf93c97e5d6eb8800e48f368011d37a"
                            },
                            {
                                "fixed": "bb8071a4cae5ab3fe321481dd3d73662ffb26052"
                            },
                            {
                                "fixed": "c4e671eec20dfcb29b18596a89ef075f826c9f96"
                            },
                            {
                                "fixed": "c50d437e942d4c4c45c8cd76329b05340c02eb31"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue30458"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2007-2",
        "summary": "Directory path traversal in extract() and extractall() tarfile functions via '..' (dot dot) sequences",
        "details": "Directory traversal vulnerability in the (1) extract and (2) extractall functions in the tarfile module in Python allows user-assisted remote attackers to overwrite arbitrary files via a .. (dot dot) sequence in filenames in a TAR archive, a related issue to CVE-2001-1267.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "79e63e528795c700a8bd198c15f3322ee25ea786"
                            },
                            {
                                "fixed": "98016f7c92aa4c1232c68bac1ed6646db31782ec"
                            },
                            {
                                "fixed": "425065bb002b9cbf9c12f61a6f3102f2ce2b8d14"
                            },
                            {
                                "fixed": "af530469954e8ad49f1e071ef31c844b9bfda414"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "http://mail.python.org/pipermail/python-dev/2007-August/074290.html"
            },
            {
                "type": "REPORT",
                "url": "https://github.com/python/cpython/issues/102950"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/pull/102953"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2014-6",
        "summary": "buffer() integer overflows",
        "details": "Integer overflow in bufferobject.c in Python before 2.7.8 allows context-dependent attackers to obtain sensitive information from process memory via a large size and offset in a \"buffer\" function.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "550b945fd66f1c6837a53fbf29dc8e524297b8c3"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue21831"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2023-12",
        "summary": "Groups not dropped before running subprocess when using empty 'extra_groups' parameter",
        "details": "An issue was found in CPython 3.12.0 `subprocess` module on POSIX platforms. The issue was fixed in CPython 3.12.1 and does not affect other stable releases.\n\nWhen using the `extra_groups=` parameter with an empty list as a value (ie `extra_groups=[]`) the logic regressed to not call `setgroups(0, NULL)` before calling `exec()`, thus not dropping the original processes' groups before starting the new process. There is no issue when the parameter isn't used or when any value is used besides an empty list.\n\nThis issue only impacts CPython processes run with sufficient privilege to make the `setgroups` system call (typically `root`).\n\n",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "124af17b6e49f0f22fbe646fb57800393235d704"
                            },
                            {
                                "fixed": "9fe7655c6ce0b8e9adc229daf681b6d30e6b1610"
                            },
                            {
                                "fixed": "10e9bb13b8dcaa414645b9bd10718d8f7179e82b"
                            },
                            {
                                "fixed": "85bbfa8a4bbdbb61a3a84fbd7cb29a4096ab8a06"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://github.com/python/cpython/issues/112334"
            },
            {
                "type": "ADVISORY",
                "url": "https://mail.python.org/archives/list/security-announce@python.org/thread/AUL7QFHBLILGISS7U63B47AYSSGJJQZD/"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/9fe7655c6ce0b8e9adc229daf681b6d30e6b1610"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/10e9bb13b8dcaa414645b9bd10718d8f7179e82b"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/85bbfa8a4bbdbb61a3a84fbd7cb29a4096ab8a06"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2010-1",
        "summary": "rgbimg and imageop overflows",
        "details": "Buffer underflow in the rgbimg module in Python 2.5 allows remote attackers to cause a denial of service (application crash) via a large ZSIZE value in a black-and-white (aka B/W) RGB image that triggers an invalid pointer dereference.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "4df1b6d478020ac51c84467f47e42083f53adbad"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue1179"
            },
            {
                "type": "WEB",
                "url": "http://bugs.python.org/issue8678"
            },
            {
                "type": "WEB",
                "url": "http://seclists.org/fulldisclosure/2007/Sep/279"
            },
            {
                "type": "WEB",
                "url": "https://bugzilla.redhat.com/show_bug.cgi?id=541698"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2019-2",
        "summary": "HTTPoxy attack",
        "details": "The CGIHandler class in Python before 2.7.12 does not protect against the HTTP_PROXY variable name clash in a CGI script, which could allow a remote attacker to redirect HTTP requests.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "4cbb23f8f278fd1f71dcd5968aa0b3f0b4f3bd5d"
                            },
                            {
                                "fixed": "75d7b615ba70fc5759d16dee95bbd8f0474d8a9c"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "https://access.redhat.com/security/cve/cve-2016-1000110"
            },
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue27568"
            },
            {
                "type": "WEB",
                "url": "https://httpoxy.org/"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2020-7",
        "summary": "CVE-2020-8315: Unsafe DLL loading in getpathp.c on Windows 7",
        "details": "In Python (CPython) 3.6 through 3.6.10, 3.7 through 3.7.6, and 3.8 through 3.8.1, an insecure dependency load upon launch on Windows 7 may result in an attacker's copy of api-ms-win-core-path-l1-1-0.dll being loaded and used instead of the system's copy. Windows 8 and later are unaffected.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "51332c467ed2e07a191f903d554d0c54248e4d88"
                            },
                            {
                                "fixed": "561c59777c8426fde0ef48b57cf02eddaeb2a5b8"
                            },
                            {
                                "fixed": "6a65eba44bfd82ccc8bed4b5c6dd6637549955d5"
                            },
                            {
                                "fixed": "ad4a20b87d79a619ffbdea3f26848780899494e5"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue39401"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2018-6",
        "summary": "pickle.load denial of service",
        "details": "Modules/_pickle.c in Python before 3.7.1 has an integer overflow via a large LONG_BINPUT value that is mishandled during a \"resize to twice the size\" attempt. This issue might cause memory exhaustion, but is only relevant if the pickle format is used for serializing tens or hundreds of gigabytes of data. This issue is fixed in: v3.4.10, v3.4.10rc1; v3.5.10, v3.5.10rc1, v3.5.7, v3.5.7rc1, v3.5.8, v3.5.8rc1, v3.5.8rc2, v3.5.9; v3.6.10, v3.6.10rc1, v3.6.11, v3.6.11rc1, v3.6.12, v3.6.7, v3.6.7rc1, v3.6.7rc2, v3.6.8, v3.6.8rc1, v3.6.9, v3.6.9rc1; v3.7.1, v3.7.1rc1, v3.7.1rc2, v3.7.2, v3.7.2rc1, v3.7.3, v3.7.3rc1, v3.7.4, v3.7.4rc1, v3.7.4rc2, v3.7.5, v3.7.5rc1, v3.7.6, v3.7.6rc1, v3.7.7, v3.7.7rc1, v3.7.8, v3.7.8rc1, v3.7.9.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "4b42d575bf0fb01192b3ec54b7e224b238691527"
                            },
                            {
                                "fixed": "71a9c65e74a70b6ed39adc4ba81d311ac1aa2acc"
                            },
                            {
                                "fixed": "a4ae828ee416a66d8c7bf5ee71d653c2cc6a26dd"
                            },
                            {
                                "fixed": "ef33dd6036aafbd3f06c1d56e2b1a81dae3da63c"
                            },
                            {
                                "fixed": "ef4306b24c9034d6b37bb034e2ebe82e745d4b77"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue34656"
            },
            {
                "type": "WEB",
                "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1664511"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2016-7",
        "summary": "zipimporter overflow",
        "details": "Integer overflow in the get_data function in zipimport.c in CPython (aka Python) before 2.7.12, 3.x before 3.4.5, and 3.5.x before 3.5.2 allows remote attackers to have unspecified impact via a negative data size value, which triggers a heap-based buffer overflow.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "64ea192b73e39e877d8b39ce6584fa580eb0e9b4"
                            },
                            {
                                "fixed": "d751040b1a4e35fd3b01fc919cd8f9374ed714fd"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue26171"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2023-2",
        "summary": "Parsing errors in email/_parseaddr.py lead to incorrect value in email address part of tuple",
        "details": "The email module of Python through 3.11.3 incorrectly parses e-mail addresses that contain a special character. The wrong portion of an RFC2822 header is identified as the value of the addr-spec. In some applications, an attacker can bypass a protection mechanism in which application access is granted only after verifying receipt of e-mail to a specific domain (e.g., only @company.example.com addresses may be used for signup). This occurs in email/_parseaddr.py in recent versions of Python.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "4a153a1d3b18803a684cd1bcc2cdf3ede3dbae19"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://github.com/python/cpython/issues/102988"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2008-7",
        "summary": "Multiple integer overflows (Google)",
        "details": "Multiple integer overflows in Python before 2.5.2 might allow context-dependent attackers to have an unknown impact via vectors related to (1) Include/pymem.h; (2) _csv.c, (3) _struct.c, (4) arraymodule.c, (5) audioop.c, (6) binascii.c, (7) cPickle.c, (8) cStringIO.c, (9) cjkcodecs/multibytecodec.c, (10) datetimemodule.c, (11) md5.c, (12) rgbimgmodule.c, and (13) stropmodule.c in Modules/; (14) bufferobject.c, (15) listobject.c, and (16) obmalloc.c in Objects/; (17) Parser/node.c; and (18) asdl.c, (19) ast.c, (20) bltinmodule.c, and (21) compile.c in Python/, as addressed by \"checks for integer overflows, contributed by Google.\"",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "83ac0144fa3041556aa4f3952ebd979e0189a19c"
                            },
                            {
                                "fixed": "d492ad80c872d264ed46bec71e31a00f174ac819"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue2620"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2008-10",
        "summary": "expandtab() integer overflow",
        "details": "Multiple integer overflows in Python 2.2.3 through 2.5.1, and 2.6, allow context-dependent attackers to have an unknown impact via a large integer value in the tabsize argument to the expandtabs method, as implemented by (1) the string_expandtabs function in Objects/stringobject.c and (2) the unicode_expandtabs function in Objects/unicodeobject.c.  NOTE: this vulnerability reportedly exists because of an incomplete fix for CVE-2008-2315.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "44a93e54f4b0f90634d16d53c437fabb6946ea9d"
                            },
                            {
                                "fixed": "dd15f6c315f20c1a9a540dd757cd63e27dbe9f3c"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "http://scary.beasts.org/security/CESA-2008-008.html"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2017-3",
        "summary": "Zlib 1.2.11",
        "details": "inffast.c in zlib 1.2.8 might allow context-dependent attackers to have unspecified impact by leveraging improper pointer arithmetic.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "34e7e2ecb1741850190e78f42875480693d3537b"
                            },
                            {
                                "fixed": "80b24a9354c60f6b800d462c941c6d4cde3cf783"
                            },
                            {
                                "fixed": "d0e61bded5256e775e470e2c0da22367a1a81970"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue29169"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2022-6",
        "summary": "CVE-2021-3733: ReDoS in urllib.request",
        "details": "There's a flaw in urllib's AbstractBasicAuthHandler class. An attacker who controls a malicious HTTP server that an HTTP client (such as web browser) connects to, could trigger a Regular Expression Denial of Service (ReDOS) during an authentication request with a specially crafted payload that is sent by the server to the client. The greatest threat that this flaw poses is to application availability.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "3fbe96123aeb66664fa547a8f6022efa2dc8788f"
                            },
                            {
                                "fixed": "7215d1ae25525c92b026166f9d5cac85fb1defe1"
                            },
                            {
                                "fixed": "a21d4fbd549ec9685068a113660553d7f80d9b09"
                            },
                            {
                                "fixed": "ada14995870abddc277addf57dd690a2af04c2da"
                            },
                            {
                                "fixed": "e7654b6046090914a8323931ed759a94a5f85d60"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "https://access.redhat.com/security/cve/cve-2021-3733"
            },
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue43075"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2013-3",
        "summary": "CGI directory traversal (URL parsing)",
        "details": "An error in separating the path and filename of the CGI script to run in\n``http.server.CGIHTTPRequestHandler`` allows running arbitrary executables\nin the directory under which the server was started.\n",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "04e9de40f380b2695f955d68f2721d57cecbf858"
                            },
                            {
                                "fixed": "1ef959ac3ddc4d96dfa1a613db5cb206cdaeb662"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue19435"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2022-1",
        "summary": "mailcap shell command injection ",
        "details": "In Python (aka CPython) up to 3.10.8, the mailcap module does not add escape characters into commands discovered in the system mailcap file. This may allow attackers to inject shell commands into applications that call mailcap.findmatch with untrusted input (if they lack validation of user-provided filenames or arguments). The fix is also back-ported to 3.7, 3.8, 3.9",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "0a4f650347fdcfd82d094ab2134ca89584f4e877"
                            },
                            {
                                "fixed": "6e8e9e7c030b6236ff220362944cba1b93c84bc4"
                            },
                            {
                                "fixed": "96739bccf220689a54ef33341f431eda19c287fa"
                            },
                            {
                                "fixed": "c59a16e2c7495a90e6d23a48ec98623f3fb1e176"
                            },
                            {
                                "fixed": "fae93ab16377db23ba6abc10480b04a58db62bdd"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue24778"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2017-4",
        "summary": "Zlib 1.2.11",
        "details": "The inflateMark function in inflate.c in zlib 1.2.8 might allow context-dependent attackers to have unspecified impact via vectors involving left shifts of negative integers.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "34e7e2ecb1741850190e78f42875480693d3537b"
                            },
                            {
                                "fixed": "80b24a9354c60f6b800d462c941c6d4cde3cf783"
                            },
                            {
                                "fixed": "d0e61bded5256e775e470e2c0da22367a1a81970"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue29169"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2023-5",
        "summary": "XML External Entity issue in plistlib module",
        "details": "An XML External Entity (XXE) issue was discovered in Python through 3.9.1. The plistlib module no longer accepts entity declarations in XML plist files to avoid XML vulnerabilities.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "05ee790f4d1cd8725a90b54268fc1dfe5b4d1fa2"
                            },
                            {
                                "fixed": "479553c7c11306a09ce34edb6ef208133b7b95fe"
                            },
                            {
                                "fixed": "65894cac0835cb8f469f649e20aa1be8bf89f5ae"
                            },
                            {
                                "fixed": "e512bc799e3864fe3b1351757261762d63471efc"
                            },
                            {
                                "fixed": "a158fb9c5138db94adf24fbc5690467cda811163"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "https://nvd.nist.gov/vuln/detail/CVE-2022-48565"
            },
            {
                "type": "WEB",
                "url": "https://bugs.python.org/issue42051"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2011-2",
        "summary": "urllib redirect",
        "details": "The urllib and urllib2 modules in Python 2.x before 2.7.2 and 3.x before 3.2.1 process Location headers that specify redirection to file: URLs, which makes it easier for remote attackers to obtain sensitive information or cause a denial of service (resource consumption) via a crafted URL, as demonstrated by the file:///etc/passwd and file:///dev/zero URLs.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "60a4a90c8dd2972eb4bb977e70835be9593cbbac"
                            },
                            {
                                "fixed": "a119df91f33724f64e6bc1ecb484eeaa30ace014"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue11662"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2018-1",
        "summary": "Expat 2.2.1",
        "details": "An integer overflow during the parsing of XML using the Expat library. This vulnerability affects Firefox < 50.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "2ada64d2a073f85f135461833952dbe8d656810d"
                            },
                            {
                                "fixed": "5ff7132313eb651107b179d20218dfe5d4e47f13"
                            },
                            {
                                "fixed": "71572bbe82aa0836c036d44d41c8269ba6a321be"
                            },
                            {
                                "fixed": "91d171be45942d37a973b0675521b5159a96be31"
                            },
                            {
                                "fixed": "ab90986600ba7dea2aa41e5c1773791070725453"
                            },
                            {
                                "fixed": "ea1ab803ddc14ab02ffed50ecc5089897f259623"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "https://libexpat.github.io/doc/cve-2017-9233/"
            },
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue30694"
            },
            {
                "type": "WEB",
                "url": "https://github.com/libexpat/libexpat/blob/R_2_2_1/expat/Changes"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2024-7",
        "summary": "",
        "details": "There is a MEDIUM severity vulnerability affecting CPython.\n\nThe\n \u201csocket\u201d module provides a pure-Python fallback to the \nsocket.socketpair() function for platforms that don\u2019t support AF_UNIX, \nsuch as Windows. This pure-Python implementation uses AF_INET or \nAF_INET6 to create a local connected pair of sockets. The connection \nbetween the two sockets was not verified before passing the two sockets \nback to the user, which leaves the server socket vulnerable to a \nconnection race from a malicious local peer.\n\nPlatforms that support AF_UNIX such as Linux and macOS are not affected by this vulnerability. Versions prior to CPython 3.5 are not affected due to the vulnerable API not being included.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "06fa244666ec6335a3b9bf2367e31b42b9a89b20"
                            },
                            {
                                "fixed": "0b65c8bf5367625673eafb92f85046a1b31259f2"
                            },
                            {
                                "fixed": "220e31adeaaa8436c9ff234cba1398bc49e2bb6c"
                            },
                            {
                                "fixed": "5f90abaa786f994db3907fc31e2ee00ea2cf0929"
                            },
                            {
                                "fixed": "b252317956b7fc035bb3774ef6a177e227f9fc54"
                            },
                            {
                                "fixed": "2621a8a40ba4b2c68ca564671b7daa5da80a4508"
                            },
                            {
                                "fixed": "5df322e91a40909e6904bbdbc0c3a6b6a9eead39"
                            },
                            {
                                "fixed": "c21a36112a0028d7ac3cf8f480e0dc88dba5922c"
                            },
                            {
                                "fixed": "f071f01b7b7e19d7d6b3a4b0ec62f820ecb14660"
                            },
                            {
                                "fixed": "31302f5fc24eecd693f0c8aaba7c2840b09b594d"
                            },
                            {
                                "fixed": "3f5d9d12c74787fbf3f5891835c85cc15526c86d"
                            },
                            {
                                "fixed": "c5655aa6ad120d2ed7f255bebd6e8b71a9c07dde"
                            },
                            {
                                "fixed": "e319f774f9e766a2b92949444a2d46081df3363a"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "WEB",
                "url": "https://github.com/python/cpython/pull/122134"
            },
            {
                "type": "REPORT",
                "url": "https://github.com/python/cpython/issues/122133"
            },
            {
                "type": "ADVISORY",
                "url": "https://mail.python.org/archives/list/security-announce@python.org/thread/WYKDQWIERRE2ICIYMSVRZJO33GSCWU2B/"
            },
            {
                "type": "WEB",
                "url": "http://www.openwall.com/lists/oss-security/2024/07/29/3"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/06fa244666ec6335a3b9bf2367e31b42b9a89b20"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/0b65c8bf5367625673eafb92f85046a1b31259f2"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/220e31adeaaa8436c9ff234cba1398bc49e2bb6c"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/5f90abaa786f994db3907fc31e2ee00ea2cf0929"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/b252317956b7fc035bb3774ef6a177e227f9fc54"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/2621a8a40ba4b2c68ca564671b7daa5da80a4508"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/5df322e91a40909e6904bbdbc0c3a6b6a9eead39"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/c21a36112a0028d7ac3cf8f480e0dc88dba5922c"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/f071f01b7b7e19d7d6b3a4b0ec62f820ecb14660"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/31302f5fc24eecd693f0c8aaba7c2840b09b594d"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/3f5d9d12c74787fbf3f5891835c85cc15526c86d"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/c5655aa6ad120d2ed7f255bebd6e8b71a9c07dde"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/e319f774f9e766a2b92949444a2d46081df3363a"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2019-5",
        "summary": "email.utils.parseaddr mistakenly parse an email",
        "details": "An issue was discovered in Python through 2.7.16, 3.x through 3.5.7, 3.6.x through 3.6.9, and 3.7.x through 3.7.4. The email module wrongly parses email addresses that contain multiple @ characters. An application that uses the email module and implements some kind of checks on the From/To headers of a message could be tricked into accepting an email address that should be denied. An attack may be the same as in CVE-2019-11340; however, this CVE applies to Python more generally.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "063eba280a11d3c9a5dd9ee5abe4de640907951b"
                            },
                            {
                                "fixed": "13a19139b5e76175bc95294d54afc9425e4f36c9"
                            },
                            {
                                "fixed": "217077440a6938a0b428f67cfef6e053c4f8673c"
                            },
                            {
                                "fixed": "4cbcd2f8c4e12b912e4d21fd892eedf7a3813d8e"
                            },
                            {
                                "fixed": "8cb65d1381b027f0b09ee36bfed7f35bb4dec9a9"
                            },
                            {
                                "fixed": "c48d606adcef395e59fd555496c42203b01dd3e8"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue34155"
            },
            {
                "type": "WEB",
                "url": "https://medium.com/@fs0c131y/tchap-the-super-not-secure-app-of-the-french-government-84b31517d144"
            },
            {
                "type": "WEB",
                "url": "https://twitter.com/fs0c131y/status/1119143946687434753"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2010-6",
        "summary": "smtpd accept bug and race condition",
        "details": "The asyncore module in Python before 3.2 does not properly handle unsuccessful calls to the accept function, and does not have accompanying documentation describing how daemon applications should handle unsuccessful calls to the accept function, which makes it easier for remote attackers to conduct denial of service attacks that terminate these applications via network connections.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "19e9fefc660d623ce7c31fb008cde1157ae12aba"
                            },
                            {
                                "fixed": "5ea3d0f95b51009fa1c3409e7dd1c12006427ccc"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue6706"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2019-16",
        "summary": "Email header injection in Address objects",
        "details": "It is possible to inject email headers using CR or LF character.\n\nThe fix disallows CR and LF characters in ``email.headerregistry.Address``\narguments to guard against header injection attacks.\n",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "614f17211c5fc0e5b828be1d3320661d1038fe8f"
                            },
                            {
                                "fixed": "75635c6095bcfbb9fccc239115d3d03ae20a307f"
                            },
                            {
                                "fixed": "7df32f844efed33ca781a016017eab7050263b90"
                            },
                            {
                                "fixed": "a93bf82980d7c02217a088bafa193f32a4d13abb"
                            },
                            {
                                "fixed": "f91a0b6df14d6c5133fe3d5889fad7d84fc0c046"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue39073"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2014-1",
        "summary": "CVE-2013-0340 Billion Laughs fixed in Expat 2.4.0",
        "details": "expat 2.1.0 and earlier does not properly handle entities expansion unless an application developer uses the XML_SetEntityDeclHandler function, which allows remote attackers to cause a denial of service (resource consumption), send HTTP requests to intranet servers, or read arbitrary files via a crafted XML document, aka an XML External Entity (XXE) issue.  NOTE: it could be argued that because expat already provides the ability to disable external entity expansion, the responsibility for resolving this issue lies with application developers; according to this argument, this entry should be REJECTed, and each affected application would need its own CVE.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "007221a43e566db08c0c5c00756d80dfd9dccafe"
                            },
                            {
                                "fixed": "270678564c16452614a8acd93763bdf64fb4d286"
                            },
                            {
                                "fixed": "3fc5d84046ddbd66abac5b598956ea34605a4e5d"
                            },
                            {
                                "fixed": "79101b890ee021a901a8b6837a3a320d57adb725"
                            },
                            {
                                "fixed": "910886a6448e4bf1edf49eeace4aa240b6403772"
                            },
                            {
                                "fixed": "c9c2a0bc9820f93f1020f3498f6893a3544c9b76"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue44394"
            },
            {
                "type": "WEB",
                "url": "https://blog.hartwork.org/posts/cve-2013-0340-billion-laughs-fixed-in-expat-2-4-0/"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2021-4",
        "summary": "Information disclosure via pydoc getfile",
        "details": "There's a flaw in Python 3's pydoc. A local or adjacent attacker who discovers or is able to convince another local or adjacent user to start a pydoc server could access the server and use it to disclose sensitive information belonging to the other user that they would not normally be able to access. The highest risk of this flaw is to data confidentiality. This flaw affects Python versions before 3.8.9, Python versions before 3.9.3 and Python versions before 3.10.0a7.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "5b1e50256b6532667b6d31debc350f6c7d3f30aa"
                            },
                            {
                                "fixed": "7c2284f97d140c4e4a85382bfb3a42440be2464d"
                            },
                            {
                                "fixed": "7e38d3309e0a5a7b9e23ef933aef0079c6e317f7"
                            },
                            {
                                "fixed": "9b999479c0022edfc9835a8a1f06e046f3881048"
                            },
                            {
                                "fixed": "ed753d94856213ae9fc028195f670e66a24e2334"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1917807"
            },
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue42988"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2017-8",
        "summary": "Environment variables injection in subprocess on Windows",
        "details": "On Windows, prevent passing invalid environment variables and command\narguments to subprocess.Popen.\n\nIt is possible to inject an environment variable in subprocess on Windows\nif a user data is passed to a subprocess via environment variable.\n\nCheck for invalid environment (variable names containing '=') and command\narguments (containing '\\0').\n",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "9dda2caca8edc7ff1285f6b0d1c5279b51854b7d"
                            },
                            {
                                "fixed": "a7c0264735f46afab13771be4218d8eab0d7dc91"
                            },
                            {
                                "fixed": "a9b16cff35811f88cdfeb4f50758140dfff36ebc"
                            },
                            {
                                "fixed": "d174d24a5d37d1516b885dc7c82f71ecd5930700"
                            },
                            {
                                "fixed": "e46f1c19642ea1882f427d8246987ba49351a97d"
                            },
                            {
                                "fixed": "fe82c46327effc124ff166e1fa1e611579e1176b"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue30730"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2023-9",
        "summary": "os.path.normpath() truncates on null bytes",
        "details": "Passing a path with null bytes to the `os.path.normpath()` function causes the returned path to be unexpectedly truncated at the first occurrence of null bytes within the path. Python versions before 3.11.0 didn\u2019t truncate the path on null bytes.\n\nIf allowlisting is applied before a call to `os.path.normpath()` is used later in the program, the allowlisting can be circumvented if the path containing null bytes is constructed to pass the allowlist but then change to the targeted resource after truncation.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "7c12e4835ebe52287acd200a2e76b533413b15d0"
                            },
                            {
                                "fixed": "09322724319d4c23195300b222a1c0ea720af56b"
                            },
                            {
                                "fixed": "ede98958810b76694cf756d305b564cd6adc1a48"
                            },
                            {
                                "fixed": "ccf81e1088c25a9f4464e478dc3b5c03ed7ee63b"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "https://mail.python.org/archives/list/security-announce@python.org/thread/D6CDW3ZZC5D444YGL3VQUY6D4ECMCQLD/"
            },
            {
                "type": "WEB",
                "url": "https://github.com/python/cpython/issues/106242"
            },
            {
                "type": "WEB",
                "url": "https://github.com/python/cpython/pull/106816"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2019-9",
        "summary": "urlsplit does not handle NFKC normalization",
        "details": "Python 2.7.x through 2.7.16 and 3.x through 3.7.2 is affected by: Improper Handling of Unicode Encoding (with an incorrect netloc) during NFKC normalization. The impact is: Information disclosure (credentials, cookies, etc. that are cached against a given hostname). The components are: urllib.parse.urlsplit, urllib.parse.urlparse. The attack vector is: A specially crafted URL could be incorrectly parsed to locate cookies or authentication data and send that information to a different host than when parsed correctly. This is fixed in: v2.7.17, v2.7.17rc1, v2.7.18, v2.7.18rc1; v3.5.10, v3.5.10rc1, v3.5.7, v3.5.8, v3.5.8rc1, v3.5.8rc2, v3.5.9; v3.6.10, v3.6.10rc1, v3.6.11, v3.6.11rc1, v3.6.12, v3.6.9, v3.6.9rc1; v3.7.3, v3.7.3rc1, v3.7.4, v3.7.4rc1, v3.7.4rc2, v3.7.5, v3.7.5rc1, v3.7.6, v3.7.6rc1, v3.7.7, v3.7.7rc1, v3.7.8, v3.7.8rc1, v3.7.9.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "16e6f7dee7f02bb81aa6b385b982dcdda5b99286"
                            },
                            {
                                "fixed": "23fc0416454c4ad5b9b23d520fbe6d89be3efc24"
                            },
                            {
                                "fixed": "c0d95113b070799679bcb9dc49d4960d82e8bb08"
                            },
                            {
                                "fixed": "daad2c482c91de32d8305abbccc76a5de8b3a8be"
                            },
                            {
                                "fixed": "e37ef41289b77e0f0bb9a6aedb0360664c55bdd5"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue36216"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2019-8",
        "summary": "TALOS-2018-0758 SSL CRL distribution points Denial of Service",
        "details": "An exploitable denial-of-service vulnerability exists in the X509 certificate parser of Python.org Python 2.7.11 / 3.6.6. A specially crafted X509 certificate can cause a NULL pointer dereference, resulting in a denial of service. An attacker can initiate or accept TLS connections using crafted certificates to trigger this vulnerability.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "06b15424b0dcacb1c551b2a36e739fffa8d0c595"
                            },
                            {
                                "fixed": "216a4d83c3b72f4fdcd81b588dc3f42cc461739a"
                            },
                            {
                                "fixed": "6c655ce34ae54adb8eef22b73108e22cc381cb8d"
                            },
                            {
                                "fixed": "a37f52436f9aa4b9292878b72f3ff1480e2606c3"
                            },
                            {
                                "fixed": "be5de958e9052e322b0087c6dba81cdad0c3e031"
                            },
                            {
                                "fixed": "efec7631edf3b9480dc3988c97ffef94df8800da"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue35746"
            },
            {
                "type": "WEB",
                "url": "https://blog.talosintelligence.com/2019/01/vulnerability-spotlight-pythonorg.html"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2023-8",
        "summary": "Bypass TLS handshake on closed sockets",
        "details": "Instances of `ssl.SSLSocket` are vulnerable to a bypass of the TLS handshake and included protections (like certificate verification) and treating sent unencrypted data as if it were post-handshake TLS encrypted data.\n\nThe vulnerability is caused when a socket is connected, data is sent by the malicious peer and stored in a buffer, and then the malicious peer closes the socket within a small timing window before the other peers\u2019 TLS handshake can begin. After this sequence of events the closed socket will not immediately attempt a TLS handshake due to not being connected but will also allow the buffered data to be read as if a successful TLS handshake had occurred.\n\n### Affected usages\n\nThis vulnerability **primarily affects** HTTPS servers and other server-side protocols using TLS client authentication due to requiring reading data immediately after the handshake to be vulnerable. Operations which would fail on a closed socket (like sending data) immediately after the handshake **are not affected by this vulnerability.**\n\nBecause disconnecting the socket is a necessary step to trigger the vulnerability **there is no risk of data exfiltration or data leakage directly from the malicious TLS connection**, however the vulnerability does carry risk for modifying or deleting resources which are authenticated using only TLS client certificates.\n\nThis vulnerability **affects** clients who are reading and processing data from the server after a TLS handshake without sending any data first. Our team is unaware of a protocol that uses TLS that fits this usage pattern.\n\nThis vulnerability **does not affect** client-side HTTPS connections like pip or requests as an HTTP request must be sent before an HTTP response is read meaning the connection would already be closed by the time the client is sending an HTTP request, leading to an error.\n\nThis vulnerability **affects, but has no impact** on servers that aren\u2019t using TLS client certificate authentication as traffic to a non-authenticating TLS server loses nothing from a bypassed handshake to inject a query and close the connection as the same action could be taken by a peer using a TLS connection with a proper handshake.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "b4bcc06a9cfe13d96d5270809d963f8ba278f89b"
                            },
                            {
                                "fixed": "264b1dacc67346efa0933d1e63f622676e0ed96b"
                            },
                            {
                                "fixed": "37d7180cb647f0bed0c1caab0037f3bc82e2af96"
                            },
                            {
                                "fixed": "75a875e0df0530b75b1470d797942f90f4a718d3"
                            },
                            {
                                "fixed": "256586ab8776e4526ca594b4866b9a3492e628f1"
                            },
                            {
                                "fixed": "0cb0c238d520a8718e313b52cffc356a5a7561bf"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "https://mail.python.org/archives/list/security-announce@python.org/thread/PEPLII27KYHLF4AK3ZQGKYNCRERG4YXY/"
            },
            {
                "type": "WEB",
                "url": "https://github.com/python/cpython/issues/108310"
            },
            {
                "type": "WEB",
                "url": "https://github.com/python/cpython/pull/108315"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2017-9",
        "summary": "bpo-30500: urllib connects to a wrong host",
        "details": "The urllib module doesn't parse correctly password containing the ``#``\ncharacter.\n",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "052f9d6860c48c5abcff8e16212e77cf4249d66c"
                            },
                            {
                                "fixed": "4899d847ed3f56b2a712799f896aa1f28540a5c0"
                            },
                            {
                                "fixed": "90e01e50ef8a9e6c91f30d965563c378a4ad26de"
                            },
                            {
                                "fixed": "b0fba8874a4bd6bf4773e6efdbd8fa762e9f05bd"
                            },
                            {
                                "fixed": "cc54c1c0d2d05fe7404ba64c53df4b1352ed2262"
                            },
                            {
                                "fixed": "d4324baca4c03eb8d55446cd1b74b32ec5633af5"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue30500"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2021-5",
        "summary": "ftplib should not use the host from the PASV response",
        "details": "The IPv4 address value returned from the server in response to the PASV\ncommand should not be trusted. This prevents a malicious FTP server from\nusing the response to probe IPv4 address and port combinations on the\nclient network.\n\nInstead of using the returned address, we use the IP address we're already\nconnected to. This is the strategy other ftp clients adopted, and matches\nthe only strategy available for the modern IPv6 EPSV command where the\nserver response must return a port number and nothing else.\n",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "0ab152c6b5d95caa2dc1a30fa96e10258b5f188e"
                            },
                            {
                                "fixed": "4134f154ae2f621f25c5d698cc0f1748035a1b88"
                            },
                            {
                                "fixed": "664d1d16274b47eea6ec92572e1ebf3939a6fa0c"
                            },
                            {
                                "fixed": "79373951b3eab585d42e0f0ab83718cbe1d0ee33"
                            },
                            {
                                "fixed": "7dcb4baa4f0fde3aef5122a8e9f6a41853ec9335"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "https://hackerone.com/reports/1040166"
            },
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue43285"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2024-10",
        "summary": "",
        "details": "There is a HIGH severity vulnerability affecting the CPython \"zipfile\"\nmodule affecting \"zipfile.Path\". Note that the more common API \"zipfile.ZipFile\" class is unaffected.\n\n\n\n\n\nWhen iterating over names of entries in a zip archive (for example, methods\nof \"zipfile.Path\" like \"namelist()\", \"iterdir()\", etc)\nthe process can be put into an infinite loop with a maliciously crafted\nzip archive. This defect applies when reading only metadata or extracting\nthe contents of the zip archive. Programs that are not handling\nuser-controlled zip archives are not affected.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "795f2597a4be988e2bb19b69ff9958e981cb894e"
                            },
                            {
                                "fixed": "8c7348939d8a3ecd79d630075f6be1b0c5b41f64"
                            },
                            {
                                "fixed": "dcc5182f27c1500006a1ef78e10613bb45788dea"
                            },
                            {
                                "fixed": "e0264a61119d551658d9445af38323ba94fc16db"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "https://mail.python.org/archives/list/security-announce@python.org/thread/GNFCKVI4TCATKQLALJ5SN4L4CSPSMILU/"
            },
            {
                "type": "WEB",
                "url": "https://github.com/python/cpython/pull/122906"
            },
            {
                "type": "REPORT",
                "url": "https://github.com/python/cpython/issues/122905"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/795f2597a4be988e2bb19b69ff9958e981cb894e"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/8c7348939d8a3ecd79d630075f6be1b0c5b41f64"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/dcc5182f27c1500006a1ef78e10613bb45788dea"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/e0264a61119d551658d9445af38323ba94fc16db"
            },
            {
                "type": "REPORT",
                "url": "https://github.com/python/cpython/issues/123270"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2019-17",
        "summary": "http.cookiejar: Incorrect validation of path",
        "details": "Cookies of ``example.com`` with ``path=/any`` were sent to\n``example.com/anybad/`` while using a cookiejar with\n`http.cookiejar.DefaultCookiePolicy` policy. The code did not check for\nthe first non-matching character in prefix match to be a slash.\n",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "0e1f1f01058bd4a9b98cfe443214adecc019a38c"
                            },
                            {
                                "fixed": "382981b25092b5e9285f1e4894142af1e8f2ca86"
                            },
                            {
                                "fixed": "5565b1db6f37f244890369e0d68a3e906aca28b9"
                            },
                            {
                                "fixed": "97c7d78fda49e03fc773c171ce0c736d02bb73f5"
                            },
                            {
                                "fixed": "e260f092cd0d8975c777e73ca6fb549d59b5d452"
                            },
                            {
                                "fixed": "ee15aa2b8501718cb77e339381f72409a416f801"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue35647"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2019-4",
        "summary": "Windows: vulnerable bzip2 1.0.6",
        "details": "BZ2_decompress in decompress.c in bzip2 through 1.0.6 has an out-of-bounds write when there are many selectors.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "4a3c610cd635f14747cf02c77908e80620aae6ea"
                            },
                            {
                                "fixed": "58d576a43cb1800dd68f06a429d7d41f746a8c01"
                            },
                            {
                                "fixed": "6649519e67841b1aa12672f1d9b5cb24494f6196"
                            },
                            {
                                "fixed": "e1639f361ee0dfbf08bb8538839d3d557c1a995c"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "https://access.redhat.com/security/cve/cve-2016-3189"
            },
            {
                "type": "ADVISORY",
                "url": "https://access.redhat.com/security/cve/cve-2019-12900"
            },
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue44549"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2010-7",
        "summary": "smtpd accept bug and race condition",
        "details": "Multiple race conditions in smtpd.py in the smtpd module in Python 2.6, 2.7, 3.1, and 3.2 alpha allow remote attackers to cause a denial of service (daemon outage) by establishing and then immediately closing a TCP connection, leading to the accept function having an unexpected return value of None, an unexpected value of None for the address, or an ECONNABORTED, EAGAIN, or EWOULDBLOCK error, or the getpeername function having an ENOTCONN error, a related issue to CVE-2010-3492.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "19e9fefc660d623ce7c31fb008cde1157ae12aba"
                            },
                            {
                                "fixed": "5ea3d0f95b51009fa1c3409e7dd1c12006427ccc"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue6706"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2020-1",
        "summary": "xmlrpc gzip unlimited read",
        "details": "The gzip_decode function in the xmlrpc client library in Python 3.4 and earlier allows remote attackers to cause a denial of service (memory consumption) via a crafted HTTP request.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "4e9cefaf86035f8014e09049328d197b6506532f"
                            },
                            {
                                "fixed": "9e8f523c5b1c354097753084054eadf14d33238d"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "https://access.redhat.com/security/cve/cve-2013-1753"
            },
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue16043"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2024-6",
        "summary": "",
        "details": "CPython 3.9 and earlier doesn't disallow configuring an empty list (\"[]\") for SSLContext.set_npn_protocols() which is an invalid value for the underlying OpenSSL API. This results in a buffer over-read when NPN is used (see CVE-2024-5535 for OpenSSL). This vulnerability is of low severity due to NPN being not widely used and specifying an empty list likely being uncommon in-practice (typically a protocol name would be configured).",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "39258d3595300bc7b952854c915f63ae2d4b9c3e"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "WEB",
                "url": "https://jbp.io/2024/06/27/cve-2024-5535-openssl-memory-safety.html"
            },
            {
                "type": "WEB",
                "url": "https://github.com/python/cpython/pull/23014"
            },
            {
                "type": "ADVISORY",
                "url": "https://mail.python.org/archives/list/security-announce@python.org/thread/PLP2JI3PJY33YG6P5BZYSSNU66HASXBQ/"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/39258d3595300bc7b952854c915f63ae2d4b9c3e"
            },
            {
                "type": "WEB",
                "url": "http://www.openwall.com/lists/oss-security/2024/06/28/4"
            },
            {
                "type": "REPORT",
                "url": "https://github.com/python/cpython/issues/121227"
            },
            {
                "type": "WEB",
                "url": "https://security.netapp.com/advisory/ntap-20240726-0005/"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2011-3",
        "summary": "ssl CBC IV attack",
        "details": "The SSL protocol, as used in certain configurations in Microsoft Windows and Microsoft Internet Explorer, Mozilla Firefox, Google Chrome, Opera, and other products, encrypts data by using CBC mode with chained initialization vectors, which allows man-in-the-middle attackers to obtain plaintext HTTP headers via a blockwise chosen-boundary attack (BCBA) on an HTTPS session, in conjunction with JavaScript code that uses (1) the HTML5 WebSocket API, (2) the Java URLConnection API, or (3) the Silverlight WebClient API, aka a \"BEAST\" attack.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "d358e0554bc520768041652676ec8e6076f221a9"
                            },
                            {
                                "fixed": "f2bf8a6ac51530e14d798a03c8e950dd934d85cd"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue13885"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2016-1",
        "summary": "ssl.match_hostname() IDNA issue",
        "details": "The ssl.match_hostname function in CPython (aka Python) before 2.7.9 and 3.x before 3.3.3 does not properly handle wildcards in hostnames, which might allow man-in-the-middle attackers to spoof servers via a crafted certificate.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "72c98d3a761457a4f2b8054458b19f051dfb5886"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue17997"
            },
            {
                "type": "WEB",
                "url": "https://tools.ietf.org/html/rfc6125"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2023-4",
        "summary": "",
        "details": "The legacy email.utils.parseaddr function in Python through 3.11.4 allows attackers to trigger \"RecursionError: maximum recursion depth exceeded while calling a Python object\" via a crafted argument. This argument is plausibly an untrusted value from an application's input data that was supposed to contain a name and an e-mail address. NOTE: email.utils.parseaddr is categorized as a Legacy API in the documentation of the Python email package. Applications should instead use the email.parser.BytesParser or email.parser.Parser class. NOTE: the vendor's perspective is that this is neither a vulnerability nor a bug. The email package is intended to have size limits and to throw an exception when limits are exceeded; they were exceeded by the example demonstration code.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": []
    },
    {
        "source": "PSF",
        "id": "PSF-2012-6",
        "summary": "Vulnerability in the utf-16 decoder after error handling",
        "details": "The utf-16 decoder in Python 3.1 through 3.3 does not update the aligned_end variable after calling the unicode_decode_call_errorhandler function, which allows remote attackers to obtain sensitive information (process memory) or cause a denial of service (memory corruption and crash) via unspecified vectors.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "715a63b78349952ccc0fb3dd3139e2d822006d35"
                            },
                            {
                                "fixed": "b4bbee25b1e3f4bccac222f806b3138fb72439d6"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue14579"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2008-1",
        "summary": "Multiple integer overflows (Apple)",
        "details": "Multiple integer overflows in imageop.c in Python before 2.5.3 allow context-dependent attackers to cause a denial of service (crash) and possibly execute arbitrary code via crafted images that trigger heap-based buffer overflows.  NOTE: this issue is due to an incomplete fix for CVE-2007-4965.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "3ce5d9207e66d61d4b0502cf47ed2d2bcdd2212f"
                            },
                            {
                                "fixed": "e7d8be80ba634fa15ece6f503c33592e0d333361"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "https://lists.apple.com/archives/security-announce/2009/Feb/msg00000.html"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2017-5",
        "summary": "Zlib 1.2.11",
        "details": "The crc32_big function in crc32.c in zlib 1.2.8 might allow context-dependent attackers to have unspecified impact via vectors involving big-endian CRC calculation.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "34e7e2ecb1741850190e78f42875480693d3537b"
                            },
                            {
                                "fixed": "80b24a9354c60f6b800d462c941c6d4cde3cf783"
                            },
                            {
                                "fixed": "d0e61bded5256e775e470e2c0da22367a1a81970"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue29169"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2013-2",
        "summary": "ssl: NULL in subjectAltNames",
        "details": "The ssl.match_hostname function in the SSL module in Python 2.6 through 3.4 does not properly handle a '\\0' character in a domain name in the Subject Alternative Name field of an X.509 certificate, which allows man-in-the-middle attackers to spoof arbitrary SSL servers via a crafted certificate issued by a legitimate Certification Authority, a related issue to CVE-2009-2408.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "82f88283171933127f20f866a7f98694b29cca56"
                            },
                            {
                                "fixed": "ec3c103520a5061e657581b388e2b8ba6f74602a"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue18709"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2014-3",
        "summary": "zipfile DoS using invalid file size",
        "details": "Python before 3.3.4 RC1 allows remote attackers to cause a denial of service (infinite loop and CPU consumption) via a file size value larger than the size of the zip file to the (1) ZipExtFile.read, (2) ZipExtFile.read(n), (3) ZipExtFile.readlines, (4) ZipFile.extract, or (5) ZipFile.extractall function.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "5ce3f10aeea711bb912e948fa5d9f63736df1327"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue20078"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2019-14",
        "summary": "Regular Expression Denial of Service in http.cookiejar",
        "details": "The regex ``http.cookiejar.LOOSE_HTTP_DATE_RE`` is vulnerable to regular\nexpression denial of service (\"REDoS\"). ``LOOSE_HTTP_DATE_RE.match()`` is\ncalled when using ``http.cookiejar.CookieJar`` to parse ``Set-Cookie``\nheaders returned by a HTTP server. Processing a response from a malicious\nHTTP server can lead to extreme CPU usage and execution will be blocked\nfor a long time.\n",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "0716056c49e9505041e30386dad9b2e788f67aaf"
                            },
                            {
                                "fixed": "1b779bfb8593739b11cbb988ef82a883ec9d077e"
                            },
                            {
                                "fixed": "55a6a16a46239a71b635584e532feb8b17ae7fdf"
                            },
                            {
                                "fixed": "a1e1be4c4969c7c20c8c958e5ab5279ae6a66a16"
                            },
                            {
                                "fixed": "cb6085138a845f8324adc011b65754acc2086cc0"
                            },
                            {
                                "fixed": "e6499033032d5b647e43a3b49da0c1c64b151743"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "https://access.redhat.com/security/cve/CVE-2019-16935"
            },
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue38804"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2010-4",
        "summary": "audioop integer overflows",
        "details": "Multiple integer overflows in audioop.c in the audioop module in Python 2.6, 2.7, 3.1, and 3.2 allow context-dependent attackers to cause a denial of service (application crash) via a large fragment, as demonstrated by a call to audioop.lin2lin with a long string in the first argument, leading to a buffer overflow.  NOTE: this vulnerability exists because of an incorrect fix for CVE-2008-3143.5.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "7ceb497ae6f554274399bd9916ea5a21de443208"
                            },
                            {
                                "fixed": "ee289e6cd5c009e641ee970cfc67996d8f871221"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue8674"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2019-7",
        "summary": "CVE-2019-18348: CRLF injection via the host part of the url passed to urlopen()",
        "details": "An issue was discovered in urllib2 in Python 2.x through 2.7.17 and urllib in Python 3.x through 3.8.0. CRLF injection is possible if the attacker controls a url parameter, as demonstrated by the first argument to urllib.request.urlopen with \\r\\n (specifically in the host component of a URL) followed by an HTTP header. This is similar to the CVE-2019-9740 query string issue and the CVE-2019-9947 path string issue. (This is not exploitable when glibc has CVE-2016-10739 fixed.). This is fixed in: v2.7.18, v2.7.18rc1; v3.5.10, v3.5.10rc1; v3.6.11, v3.6.11rc1, v3.6.12; v3.7.8, v3.7.8rc1, v3.7.9; v3.8.3, v3.8.3rc1, v3.8.4, v3.8.4rc1, v3.8.5, v3.8.6, v3.8.6rc1.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "09d8172837b6985c4ad90ee025f6b5a554a9f0ac"
                            },
                            {
                                "fixed": "34f85af3229f86c004a954c3f261ceea1f5e9f95"
                            },
                            {
                                "fixed": "83fc70159b24f5b11a5ef87c9b05c2cf4c7faeba"
                            },
                            {
                                "fixed": "9165addc22d05e776a54319a8531ebd0b2fe01ef"
                            },
                            {
                                "fixed": "e176e0c105786e9f476758eb5438c57223b65e7f"
                            },
                            {
                                "fixed": "ff69c9d12c1b06af58e5eae5db4630cedd94740e"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue38576"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2020-2",
        "summary": "Infinite loop in tarfile module while opening a crafted file",
        "details": "In Lib/tarfile.py in Python through 3.8.3, an attacker is able to craft a TAR archive leading to an infinite loop when opened by tarfile.open, because _proc_pax lacks header validation.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "47a2955589bdb1a114d271496ff803ad73f954b8"
                            },
                            {
                                "fixed": "5a8d121a1f3ef5ad7c105ee378cc79a3eac0c7d4"
                            },
                            {
                                "fixed": "79c6b602efc9a906c8496f3d5f4d54c54b48fa06"
                            },
                            {
                                "fixed": "c55479556db015f48fc8bbca17f64d3e65598559"
                            },
                            {
                                "fixed": "cac9ca8ed99bd98f4c0dcd1913a146192bf5ee84"
                            },
                            {
                                "fixed": "f3232294ee695492f43d424cc6969d018d49861d"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue39017"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2024-5",
        "summary": "",
        "details": "The \u201cipaddress\u201d module contained incorrect information about whether certain IPv4 and IPv6 addresses were designated as \u201cglobally reachable\u201d or \u201cprivate\u201d. This affected the is_private and is_global properties of the ipaddress.IPv4Address, ipaddress.IPv4Network, ipaddress.IPv6Address, and ipaddress.IPv6Network classes, where values wouldn\u2019t be returned in accordance with the latest information from the IANA Special-Purpose Address Registries.\n\nCPython 3.12.4 and 3.13.0a6 contain updated information from these registries and thus have the intended behavior.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "22adf29da8d99933ffed8647d3e0726edd16f7f8"
                            },
                            {
                                "fixed": "40d75c2b7f5c67e254d0a025e0f2e2c7ada7f69f"
                            },
                            {
                                "fixed": "895f7e2ac23eff4743143beef0f0c5ac71ea27d3"
                            },
                            {
                                "fixed": "ba431579efdcbaed7a96f2ac4ea0775879a332fb"
                            },
                            {
                                "fixed": "c62c9e518b784fe44432a3f4fc265fb95b651906"
                            },
                            {
                                "fixed": "f86b17ac511e68192ba71f27e752321a3252cee3"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://github.com/python/cpython/issues/113171"
            },
            {
                "type": "WEB",
                "url": "https://github.com/python/cpython/pull/113179"
            },
            {
                "type": "WEB",
                "url": "https://www.iana.org/assignments/iana-ipv4-special-registry/iana-ipv4-special-registry.xhtml"
            },
            {
                "type": "WEB",
                "url": "https://www.iana.org/assignments/iana-ipv6-special-registry/iana-ipv6-special-registry.xhtml"
            },
            {
                "type": "ADVISORY",
                "url": "https://mail.python.org/archives/list/security-announce@python.org/thread/NRUHDUS2IV2USIZM2CVMSFL6SCKU3RZA/"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/22adf29da8d99933ffed8647d3e0726edd16f7f8"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/40d75c2b7f5c67e254d0a025e0f2e2c7ada7f69f"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/895f7e2ac23eff4743143beef0f0c5ac71ea27d3"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/ba431579efdcbaed7a96f2ac4ea0775879a332fb"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/c62c9e518b784fe44432a3f4fc265fb95b651906"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/f86b17ac511e68192ba71f27e752321a3252cee3"
            },
            {
                "type": "WEB",
                "url": "http://www.openwall.com/lists/oss-security/2024/06/17/3"
            },
            {
                "type": "WEB",
                "url": "https://security.netapp.com/advisory/ntap-20240726-0004/"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2018-3",
        "summary": "difflib and poplib catastrophic backtracking",
        "details": "python before versions 2.7.15, 3.4.9, 3.5.6rc1, 3.6.5rc1 and 3.7.0 is vulnerable to catastrophic backtracking in pop3lib's apop() method. An attacker could use this flaw to cause denial of service.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "0902a2d6b2d1d9dbde36aeaaccf1788ceaa97143"
                            },
                            {
                                "fixed": "0e6c8ee2358a2e23117501826c008842acb835ac"
                            },
                            {
                                "fixed": "937ac1fe069a4dc8471dff205f553d82e724015b"
                            },
                            {
                                "fixed": "942cc04ae44825ea120e3a19a80c9b348b8194d0"
                            },
                            {
                                "fixed": "c9516754067d71fd7429a25ccfcb2141fc583523"
                            },
                            {
                                "fixed": "e052d40cea15f582b50947f7d906b39744dc62a2"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue32981"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2016-2",
        "summary": "Expat 2.2 (Expat bug #537)",
        "details": "Expat allows context-dependent attackers to cause a denial of service (crash) or possibly execute arbitrary code via a malformed input document, which triggers a buffer overflow.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "0e4571a68a7f48e8469ef05b04ba3463d3fd82c0"
                            },
                            {
                                "fixed": "23ec4b57e1359f9c539b8defc317542173ae087e"
                            },
                            {
                                "fixed": "2ada64d2a073f85f135461833952dbe8d656810d"
                            },
                            {
                                "fixed": "5ff7132313eb651107b179d20218dfe5d4e47f13"
                            },
                            {
                                "fixed": "71572bbe82aa0836c036d44d41c8269ba6a321be"
                            },
                            {
                                "fixed": "86b95370c45dedb8a56c9894372a43681de47a73"
                            },
                            {
                                "fixed": "8c797ed8a0fea5e3162b9415f13e270d4d5d9549"
                            },
                            {
                                "fixed": "91d171be45942d37a973b0675521b5159a96be31"
                            },
                            {
                                "fixed": "ab90986600ba7dea2aa41e5c1773791070725453"
                            },
                            {
                                "fixed": "ea1ab803ddc14ab02ffed50ecc5089897f259623"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "https://libexpat.github.io/doc/cve-2017-9233/"
            },
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue29591"
            },
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue30694"
            },
            {
                "type": "WEB",
                "url": "https://bugs.python.org/issue30610"
            },
            {
                "type": "WEB",
                "url": "https://github.com/libexpat/libexpat/blob/R_2_2_1/expat/Changes"
            },
            {
                "type": "WEB",
                "url": "https://sourceforge.net/p/expat/bugs/537/"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2023-7",
        "summary": "Reference count issue in _asyncio._swap_current_task()",
        "details": "An issue in Python CPython 3.12.0b1 allows an attacker to obtain sensitive information via the _asyncio._swap_current_task() component.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "a474e04388c2ef6aca75c26cb70a1b6200235feb"
                            },
                            {
                                "fixed": "d2cbb6e918d9ea39f0dd44acb53270f2dac07454"
                            },
                            {
                                "fixed": "9e6f8d46150c1a0af09d68ce63c603cf321994aa"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "https://nvd.nist.gov/vuln/detail/CVE-2023-38898"
            },
            {
                "type": "WEB",
                "url": "https://github.com/python/cpython/issues/105987"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2008-2",
        "summary": "Multiple integer overflows (Apple)",
        "details": "Integer signedness error in the zlib extension module in Python 2.5.2 and earlier allows remote attackers to execute arbitrary code via a negative signed integer, which triggers insufficient memory allocation and a buffer overflow.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "3ce5d9207e66d61d4b0502cf47ed2d2bcdd2212f"
                            },
                            {
                                "fixed": "e7d8be80ba634fa15ece6f503c33592e0d333361"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "https://lists.apple.com/archives/security-announce/2009/Feb/msg00000.html"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2012-5",
        "summary": "Hash DoS",
        "details": "Python before 2.6.8, 2.7.x before 2.7.3, 3.x before 3.1.5, and 3.2.x before 3.2.3 computes hash values without restricting the ability to trigger hash collisions predictably, which allows context-dependent attackers to cause a denial of service (CPU consumption) via crafted input to an application that maintains a hash table.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "1e13eb084f72d5993cbb726e45b36bdb69c83a24"
                            },
                            {
                                "fixed": "2daf6ae2495c862adf8bc717bfe9964081ea0b10"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "http://www.ocert.org/advisories/ocert-2011-003.html"
            },
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue13703"
            },
            {
                "type": "WEB",
                "url": "https://events.ccc.de/congress/2011/Fahrplan/events/4680.en.html"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2017-6",
        "summary": "PyString_DecodeEscape integer overflow",
        "details": "CPython (aka Python) up to 2.7.13 is vulnerable to an integer overflow in the PyString_DecodeEscape function in stringobject.c, resulting in heap-based buffer overflow (and possible arbitrary code execution)",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "6c004b40f9d51872d848981ef1a18bb08c2dfc42"
                            },
                            {
                                "fixed": "c3c9db89273fabc62ea1b48389d9a3000c1c03ae"
                            },
                            {
                                "fixed": "fd8614c5c5466a14a945db5b059c10c0fb8f76d9"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue30657"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2022-3",
        "summary": "Windows: vulnerable zlib 1.2.11",
        "details": "zlib before 1.2.12 allows memory corruption when deflating (i.e., when compressing) if the input has many distant matches.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "0f0f85e9d8088eb789cda35477900df32adff546"
                            },
                            {
                                "fixed": "16a809ffb7af14898ce9ec8165960d96cbcd4ec3"
                            },
                            {
                                "fixed": "387f93c156288c170ff0016a75af06e109d48ee1"
                            },
                            {
                                "fixed": "7ccdec3d1d837b910cd4fc5525ecde71a1326202"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "https://access.redhat.com/security/cve/cve-2018-25032"
            },
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue47194"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2013-1",
        "summary": "ssl.match_hostname() wildcard DoS",
        "details": "Algorithmic complexity vulnerability in the ssl.match_hostname function in Python 3.2.x, 3.3.x, and earlier, and unspecified versions of python-backports-ssl_match_hostname as used for older Python versions, allows remote attackers to cause a denial of service (CPU consumption) via multiple wildcard characters in the common name in a certificate.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "86d53caddad11808ca332ab93ec35508b602a0dd"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue17980"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2017-10",
        "summary": "urllib FTP protocol stream injection",
        "details": "FTP protocol stream injection via malicious URLs.\n",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "19b2890014d3098147d16475c492a47a43893768"
                            },
                            {
                                "fixed": "2a5a26c87e82c7d9a348792891feccd1b5e9a769"
                            },
                            {
                                "fixed": "2b1e6e9696cb433c0e0da11145157d54275d119f"
                            },
                            {
                                "fixed": "8c2d4cf092c5f0335e7982392a33927579c4d512"
                            },
                            {
                                "fixed": "a4e774f86224cd8c997deaa4e71312cf1a7b023c"
                            },
                            {
                                "fixed": "e5eae474c431af2880a68f6329840b9288fc4bc1"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue30119"
            },
            {
                "type": "WEB",
                "url": "http://blog.blindspotsecurity.com/2017/02/advisory-javapython-ftp-injections.html"
            },
            {
                "type": "WEB",
                "url": "http://www.openwall.com/lists/oss-security/2017/02/20/1"
            },
            {
                "type": "WEB",
                "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1478916"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2024-9",
        "summary": "",
        "details": "There is a LOW severity vulnerability affecting CPython, specifically the\n'http.cookies' standard library module.\n\n\nWhen parsing cookies that contained backslashes for quoted characters in\nthe cookie value, the parser would use an algorithm with quadratic\ncomplexity, resulting in excess CPU resources being used while parsing the\nvalue.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "WEB",
                "url": "https://github.com/python/cpython/pull/123075"
            },
            {
                "type": "REPORT",
                "url": "https://github.com/python/cpython/issues/123067"
            },
            {
                "type": "ADVISORY",
                "url": "https://mail.python.org/archives/list/security-announce@python.org/thread/HXJAAAALNUNGCQUS2W7WR6GFIZIHFOOK/"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2016-10",
        "summary": "gettext.c2py()",
        "details": "Arbitrary code execution in ``gettext.c2py()``.\n",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "07bcf05fcf3fd1d4001e8e3489162e6d67638285"
                            },
                            {
                                "fixed": "a8760275bd59fb8d8be1f1bf05313fed31c08321"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue28563"
            },
            {
                "type": "WEB",
                "url": "https://www.xil.se/post/is-eval-safe-yet-rspkt/"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2024-8",
        "summary": "",
        "details": "There is a MEDIUM severity vulnerability affecting CPython.\n\nThe \nemail module didn\u2019t properly quote newlines for email headers when \nserializing an email message allowing for header injection when an email\n is serialized.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "4766d1200fdf8b6728137aa2927a297e224d5fa7"
                            },
                            {
                                "fixed": "4aaa4259b5a6e664b7316a4d60bdec7ee0f124d0"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "WEB",
                "url": "https://github.com/python/cpython/pull/122233"
            },
            {
                "type": "REPORT",
                "url": "https://github.com/python/cpython/issues/121650"
            },
            {
                "type": "ADVISORY",
                "url": "https://mail.python.org/archives/list/security-announce@python.org/thread/QH3BUOE2DYQBWP7NAQ7UNHPPOELKISRW/"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/4766d1200fdf8b6728137aa2927a297e224d5fa7"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/4aaa4259b5a6e664b7316a4d60bdec7ee0f124d0"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2017-11",
        "summary": "Expat 2.2.3",
        "details": "Expat 2.2.2 was released with multiple security fixes:\n\n* #43: Protect against compilation without any source of high quality\n  entropy enabled, e.g. with CMake build system\n* #60: Windows with _UNICODE: Unintended use of LoadLibraryW with a non-wide\n  string resulted in failure to load advapi32.dll and degradation in quality\n  of used entropy when compiled with _UNICODE for Windows; you can launch\n  existing binaries with EXPAT_ENTROPY_DEBUG=1 in the environment to inspect\n  the quality of entropy used during runtime\n* [MOX-006]: Fix non-NULL parser parameter validation in XML_Parse; resulted\n  in NULL dereference, previously\n\nExpat 2.2.3 contains an additional security fix: #82: CVE-2017-11742 --\nWindows: Fix DLL hijacking vulnerability using Steve Holme's LoadLibrary\nwrapper for/of cURL\n",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "297516ea509c72d8ebed3a9b3ce200f023aca0b7"
                            },
                            {
                                "fixed": "83e37e16f3065086d721d4e62a3788e01db3431c"
                            },
                            {
                                "fixed": "86a713cb0c110b6798ca7f9e630fc511ee0a4028"
                            },
                            {
                                "fixed": "93d0cb58b4da2a88c56f472c6c19491cc7a390df"
                            },
                            {
                                "fixed": "ec4ab09b7c0b5070bdb27351f979cbecc4636245"
                            },
                            {
                                "fixed": "f2492bb6aae061aea47e21fc7e56b7ab9bfdf543"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue30947"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2022-2",
        "summary": "Buffer overflow vulnerability in os.symlink on Windows",
        "details": "Python Software Foundation CPython version From 3.2 until 3.6.4 on Windows contains a Buffer Overflow vulnerability in os.symlink() function on Windows that can result in Arbitrary code execution, likely escalation of privilege. This attack appears to be exploitable via a python script that creates a symlink with an attacker controlled name or location. This vulnerability appears to have been fixed in 3.7.0 and 3.6.5.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "6921e73e33edc3c61bc2d78ed558eaa22a89a564"
                            },
                            {
                                "fixed": "77c02cdce2d7b8360771be35b7676a4977e070c1"
                            },
                            {
                                "fixed": "96fdbacb7797a564249fd59ccf86ec153c4bb095"
                            },
                            {
                                "fixed": "baa45079466eda1f5636a6d13f3a60c2c00fdcd3"
                            },
                            {
                                "fixed": "f381cfe07d15d52f27de771a62a8167668f0dd51"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "https://mail.python.org/mm3/archives/list/security-announce@python.org/thread/PVSURQ2YCNZODILA3QE7ZF3GCD25EVVT/"
            },
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue33001"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2017-7",
        "summary": "Expat 2.2.1",
        "details": "XML External Entity vulnerability in libexpat 2.2.0 and earlier (Expat XML Parser Library) allows attackers to put the parser in an infinite loop using a malformed external entity definition from an external DTD.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "2ada64d2a073f85f135461833952dbe8d656810d"
                            },
                            {
                                "fixed": "5ff7132313eb651107b179d20218dfe5d4e47f13"
                            },
                            {
                                "fixed": "71572bbe82aa0836c036d44d41c8269ba6a321be"
                            },
                            {
                                "fixed": "91d171be45942d37a973b0675521b5159a96be31"
                            },
                            {
                                "fixed": "ab90986600ba7dea2aa41e5c1773791070725453"
                            },
                            {
                                "fixed": "ea1ab803ddc14ab02ffed50ecc5089897f259623"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "https://libexpat.github.io/doc/cve-2017-9233/"
            },
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue30694"
            },
            {
                "type": "WEB",
                "url": "https://github.com/libexpat/libexpat/blob/R_2_2_1/expat/Changes"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2008-3",
        "summary": "Multiple integer overflows (Apple)",
        "details": "Python 2.5.2 and earlier allows context-dependent attackers to execute arbitrary code via multiple vectors that cause a negative size value to be provided to the PyString_FromStringAndSize function, which allocates less memory than expected when assert() is disabled and triggers a buffer overflow.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "3ce5d9207e66d61d4b0502cf47ed2d2bcdd2212f"
                            },
                            {
                                "fixed": "e7d8be80ba634fa15ece6f503c33592e0d333361"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "https://lists.apple.com/archives/security-announce/2009/Feb/msg00000.html"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2012-4",
        "summary": "Expat 2.2.1",
        "details": "The XML parser (xmlparse.c) in expat before 2.1.0 computes hash values without restricting the ability to trigger hash collisions predictably, which allows context-dependent attackers to cause a denial of service (CPU consumption) via an XML file with many identifiers with the same value.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "2ada64d2a073f85f135461833952dbe8d656810d"
                            },
                            {
                                "fixed": "5ff7132313eb651107b179d20218dfe5d4e47f13"
                            },
                            {
                                "fixed": "71572bbe82aa0836c036d44d41c8269ba6a321be"
                            },
                            {
                                "fixed": "91d171be45942d37a973b0675521b5159a96be31"
                            },
                            {
                                "fixed": "ab90986600ba7dea2aa41e5c1773791070725453"
                            },
                            {
                                "fixed": "ea1ab803ddc14ab02ffed50ecc5089897f259623"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "https://libexpat.github.io/doc/cve-2017-9233/"
            },
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue30694"
            },
            {
                "type": "WEB",
                "url": "https://github.com/libexpat/libexpat/blob/R_2_2_1/expat/Changes"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2023-6",
        "summary": "hmac.compare_digest() accumulator not constant-time",
        "details": "An issue was discovered in compare_digest in Lib/hmac.py in Python through 3.9.1. Constant-time-defeating optimisations were possible in the accumulator variable in hmac.compare_digest.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "31729366e2bc09632e78f3896dbce0ae64914f28"
                            },
                            {
                                "fixed": "c1bbca5b004b3f74d240ef8a76ff445cc1a27efb"
                            },
                            {
                                "fixed": "97136d71a78a4b6b816f7e14acc52be426efcb6f"
                            },
                            {
                                "fixed": "db95802bdfac4d13db3e2a391ec7b9e2f8d92dbe"
                            },
                            {
                                "fixed": "8bef9ebb1b88cfa4b2a38b93fe4ea22015d8254a"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "https://nvd.nist.gov/vuln/detail/CVE-2022-48566"
            },
            {
                "type": "WEB",
                "url": "https://bugs.python.org/issue40791"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2016-3",
        "summary": "smtplib TLS stripping",
        "details": "The smtplib library in CPython (aka Python) before 2.7.12, 3.x before 3.4.5, and 3.5.x before 3.5.2 does not return an error when StartTLS fails, which might allow man-in-the-middle attackers to bypass the TLS protections by leveraging a network position between the client and the registry to block the StartTLS command, aka a \"StartTLS stripping attack.\"",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "2e1b7fc998e1744eeb3bb31b131eba0145b88a2f"
                            },
                            {
                                "fixed": "3625f7fd11679ecb390ffa58ef36d487acc8159b"
                            },
                            {
                                "fixed": "46b32f307c48bcb999b22eebf65ffe8ed5cca544"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2016-0772"
            },
            {
                "type": "WEB",
                "url": "http://seclists.org/oss-sec/2016/q2/541"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2018-2",
        "summary": "Python 2.7 readahead is not thread safe",
        "details": "Python 2.7.14 is vulnerable to a Heap-Buffer-Overflow as well as a Heap-Use-After-Free. Python versions prior to 2.7.14 may also be vulnerable and it appears that Python 2.7.17 and prior may also be vulnerable however this has not been confirmed. The vulnerability lies when multiply threads are handling large amounts of data. In both cases there is essentially a race condition that occurs. For the Heap-Buffer-Overflow, Thread 2 is creating the size for a buffer, but Thread1 is already writing to the buffer without knowing how much to write. So when a large amount of data is being processed, it is very easy to cause memory corruption using a Heap-Buffer-Overflow. As for the Use-After-Free, Thread3->Malloc->Thread1->Free's->Thread2-Re-uses-Free'd Memory. The PSRT has stated that this is not a security vulnerability due to the fact that the attacker must be able to run code, however in some situations, such as function as a service, this vulnerability can potentially be used by an attacker to violate a trust boundary, as such the DWF feels this issue deserves a CVE.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "dbf52e02f18dac6f5f0a64f78932f3dc6efc056b"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "https://access.redhat.com/security/cve/cve-2018-1000030"
            },
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue31530"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2011-1",
        "summary": "CGI directory traversal (is_cgi() function)",
        "details": "The is_cgi method in CGIHTTPServer.py in the CGIHTTPServer module in Python 2.5, 2.6, and 3.0 allows remote attackers to read script source code via an HTTP GET request that lacks a / (slash) character at the beginning of the URI.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "923ba361d8f757f0656cfd216525aca4848e02aa"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue2254"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2024-4",
        "summary": "",
        "details": "A defect was discovered in the Python \u201cssl\u201d module where there is a memory\nrace condition with the ssl.SSLContext methods \u201ccert_store_stats()\u201d and\n\u201cget_ca_certs()\u201d. The race condition can be triggered if the methods are\ncalled at the same time as certificates are loaded into the SSLContext,\nsuch as during the TLS handshake with a certificate directory configured.\nThis issue is fixed in CPython 3.10.14, 3.11.9, 3.12.3, and 3.13.0a5.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "01c37f1d0714f5822d34063ca7180b595abf589d"
                            },
                            {
                                "fixed": "29c97287d205bf2f410f4895ebce3f43b5160524"
                            },
                            {
                                "fixed": "37324b421b72b7bc9934e27aba85d48d4773002e"
                            },
                            {
                                "fixed": "542f3272f56f31ed04e74c40635a913fbc12d286"
                            },
                            {
                                "fixed": "b228655c227b2ca298a8ffac44d14ce3d22f6faa"
                            },
                            {
                                "fixed": "bce693111bff906ccf9281c22371331aaff766ab"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://github.com/python/cpython/issues/114572"
            },
            {
                "type": "WEB",
                "url": "https://github.com/python/cpython/pull/114573"
            },
            {
                "type": "ADVISORY",
                "url": "https://mail.python.org/archives/list/security-announce@python.org/thread/BMAK5BCGKYWNJOACVUSLUF6SFGBIM4VP/"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/01c37f1d0714f5822d34063ca7180b595abf589d"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/29c97287d205bf2f410f4895ebce3f43b5160524"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/37324b421b72b7bc9934e27aba85d48d4773002e"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/542f3272f56f31ed04e74c40635a913fbc12d286"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/b228655c227b2ca298a8ffac44d14ce3d22f6faa"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/bce693111bff906ccf9281c22371331aaff766ab"
            },
            {
                "type": "WEB",
                "url": "http://www.openwall.com/lists/oss-security/2024/06/17/2"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2020-3",
        "summary": "[CVE-2020-14422] Hash collisions in IPv4Interface and IPv6Interface",
        "details": "Lib/ipaddress.py in Python through 3.8.3 improperly computes hash values in the IPv4Interface and IPv6Interface classes, which might allow a remote attacker to cause a denial of service if an application is affected by the performance of a dictionary containing IPv4Interface or IPv6Interface objects, and this attacker can cause many dictionary entries to be created. This is fixed in: v3.5.10, v3.5.10rc1; v3.6.12; v3.7.9; v3.8.4, v3.8.4rc1, v3.8.5, v3.8.6, v3.8.6rc1; v3.9.0, v3.9.0b4, v3.9.0b5, v3.9.0rc1, v3.9.0rc2.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "11d258ceafdf60ab3840f9a5700f2d0ad3e2e2d1"
                            },
                            {
                                "fixed": "9a646aa82dfa62d70ca2a99ada901ee6cf9f82bd"
                            },
                            {
                                "fixed": "b30ee26e366bf509b7538d79bfec6c6d38d53f28"
                            },
                            {
                                "fixed": "b98e7790c77a4378ec4b1c71b84138cb930b69b7"
                            },
                            {
                                "fixed": "cfc7ff8d05f7a949a88b8a8dd506fb5c1c30d3e9"
                            },
                            {
                                "fixed": "dc8ce8ead182de46584cc1ed8a8c51d48240cbd5"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue41004"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2010-5",
        "summary": "audioop input validation",
        "details": "The audioop module in Python 2.7 and 3.2 does not verify the relationships between size arguments and byte string lengths, which allows context-dependent attackers to cause a denial of service (memory corruption and application crash) via crafted arguments, as demonstrated by a call to audioop.reverse with a one-byte string, a different vulnerability than CVE-2010-1634.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "8e42fb7ada3198e66d3f060c5c87c52465a86e36"
                            },
                            {
                                "fixed": "e9123efa21a16584758b5ce7da93d3966cf0cd81"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue7673"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2019-6",
        "summary": "Reflected XSS in DocXMLRPCServer",
        "details": "The documentation XML-RPC server in Python through 2.7.16, 3.x through 3.6.9, and 3.7.x through 3.7.4 has XSS via the server_title field. This occurs in Lib/DocXMLRPCServer.py in Python 2.x, and in Lib/xmlrpc/server.py in Python 3.x. If set_server_title is called with untrusted input, arbitrary JavaScript can be delivered to clients that visit the http URL for this server.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "1698cacfb924d1df452e78d11a4bf81ae7777389"
                            },
                            {
                                "fixed": "39a0c7555530e31c6941a78da19b6a5b61170687"
                            },
                            {
                                "fixed": "3fe1b19265b55c290fc956e9aafcf661803782de"
                            },
                            {
                                "fixed": "6447b9f9bd27e1f6b04cef674dd3a7ab27bf4f28"
                            },
                            {
                                "fixed": "8eb64155ff26823542ccf0225b3d57b6ae36ea89"
                            },
                            {
                                "fixed": "e8650a4f8c7fb76f570d4ca9c1fbe44e91c8dfaa"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue38243"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2014-2",
        "summary": "Hash function not randomized properly",
        "details": "Python 2.7 before 3.4 only uses the last eight bits of the prefix to randomize hash values, which causes it to compute hash values without restricting the ability to trigger hash collisions predictably and makes it easier for context-dependent attackers to cause a denial of service (CPU consumption) via crafted input to an application that maintains a hash table.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2012-1150.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "985ecdcfc29adfc36ce2339acf03f819ad414869"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue14621"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2019-15",
        "summary": "Remove newline characters from uu encoding methods",
        "details": "Filenames passed to the UU encoding methods (uu.py and uu_codec.py) that\ncontain a newline character will overflow data into the UU content section.\nThis can potentially be used to inject replace or corrupt data content in a\nfile during the decode process.\n\nThe fix removes newline characters from filenames.\n",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "30afc91f5e70cf4748ffac77a419ba69ebca6f6a"
                            },
                            {
                                "fixed": "87f2d261ee1c63ed39517355833d087c5a78b4bf"
                            },
                            {
                                "fixed": "8835f465fa94f114dcf865429c0410821d365dae"
                            },
                            {
                                "fixed": "8859fc629474ab1ca7eb2e67aec538097c327e58"
                            },
                            {
                                "fixed": "a016d4e32cc9faa48105d00db275439c3dc93559"
                            },
                            {
                                "fixed": "a62ad4730c9b575f140f24074656c0257c86a09a"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue38945"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2020-8",
        "summary": "urllib basic auth regex denial of service",
        "details": "Python 2.7 through 2.7.17, 3.5 through 3.5.9, 3.6 through 3.6.10, 3.7 through 3.7.6, and 3.8 through 3.8.1 allows an HTTP server to conduct Regular Expression Denial of Service (ReDoS) attacks against a client because of urllib.request.AbstractBasicAuthHandler catastrophic backtracking.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "0b297d4ff1c0e4480ad33acae793fbaf4bf015b4"
                            },
                            {
                                "fixed": "37fe316479e0b6906a74b0c0a5e495c55037fdfd"
                            },
                            {
                                "fixed": "69cdeeb93e0830004a495ed854022425b93b3f3e"
                            },
                            {
                                "fixed": "b57a73694e26e8b2391731b5ee0b1be59437388e"
                            },
                            {
                                "fixed": "ea9e240aa02372440be8024acb110371f69c9d41"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue38826"
            },
            {
                "type": "WEB",
                "url": "https://bugs.python.org/issue39503"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2016-8",
        "summary": "HTTP header injection",
        "details": "CRLF injection vulnerability in the HTTPConnection.putheader function in urllib2 and urllib in CPython (aka Python) before 2.7.10 and 3.x before 3.4.4 allows remote attackers to inject arbitrary HTTP headers via CRLF sequences in a URL.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "59bdf6392de446de8a19bfa37cee52981612830e"
                            },
                            {
                                "fixed": "8e88f6b5e2a35ee458c161aa3f2b7f1f17fb45d1"
                            },
                            {
                                "fixed": "a112a8ae47813f75aa8ad27ee8c42a7c2e937d13"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue22928"
            },
            {
                "type": "WEB",
                "url": "http://blog.blindspotsecurity.com/2016/06/advisory-http-header-injection-in.html"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2008-8",
        "summary": "Multiple integer overflows (Apple)",
        "details": "Multiple integer overflows in the PyOS_vsnprintf function in Python/mysnprintf.c in Python 2.5.2 and earlier allow context-dependent attackers to cause a denial of service (memory corruption) or have unspecified other impact via crafted input to string formatting operations.  NOTE: the handling of certain integer values is also affected by related integer underflows and an off-by-one error.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "3ce5d9207e66d61d4b0502cf47ed2d2bcdd2212f"
                            },
                            {
                                "fixed": "e7d8be80ba634fa15ece6f503c33592e0d333361"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "https://lists.apple.com/archives/security-announce/2009/Feb/msg00000.html"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2022-9",
        "summary": "Linux specific local privilege escalation via the multiprocessing forkserver start method",
        "details": "Python 3.9.x before 3.9.16 and 3.10.x before 3.10.9 on Linux allows local privilege escalation in a non-default configuration. The Python multiprocessing library, when used with the forkserver start method on Linux, allows pickles to be deserialized from any user in the same machine local network namespace, which in many system configurations means any user on the same machine. Pickles can execute arbitrary code. Thus, this allows for local user privilege escalation to the user that any forkserver process is running as. Setting multiprocessing.util.abstract_sockets_supported to False is a workaround. The forkserver start method for multiprocessing is not the default start method. This issue is Linux specific because only Linux supports abstract namespace sockets. CPython before 3.9 does not make use of Linux abstract namespace sockets by default. Support for users manually specifying an abstract namespace socket was added as a bugfix in 3.7.8 and 3.8.3, but users would need to make specific uncommon API calls in order to do that in CPython before 3.9.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "4c0c1e201a896ee5141df9a698e8a94aad2d5e6d"
                            },
                            {
                                "fixed": "b43496c01a554cf41ae654a0379efae18609ad39"
                            },
                            {
                                "fixed": "eae692eed18892309bcc25a2c0f8980038305ea2"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2138705"
            },
            {
                "type": "ADVISORY",
                "url": "https://bugzilla.suse.com/show_bug.cgi?id=1204886"
            },
            {
                "type": "ADVISORY",
                "url": "https://ubuntu.com/security/notices/USN-5713-1"
            },
            {
                "type": "REPORT",
                "url": "https://github.com/python/cpython/issues/97514"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2014-5",
        "summary": "os.makedirs() not thread-safe",
        "details": "Race condition in the _get_masked_mode function in Lib/os.py in Python 3.2 through 3.5, when exist_ok is set to true and multiple threads are used, might allow local users to bypass intended file permissions by leveraging a separate application vulnerability before the umask has been set to the expected value.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "ee5f1c13d1ea21c628068fdf142823177f5526c2"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue21082"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2007-1",
        "summary": "rgbimg and imageop overflows",
        "details": "Multiple integer overflows in the imageop module in Python 2.5.1 and earlier allow context-dependent attackers to cause a denial of service (application crash) and possibly obtain sensitive information (memory contents) via crafted arguments to (1) the tovideo method, and unspecified other vectors related to (2) imageop.c, (3) rbgimgmodule.c, and other files, which trigger heap-based buffer overflows.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "4df1b6d478020ac51c84467f47e42083f53adbad"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue1179"
            },
            {
                "type": "WEB",
                "url": "http://bugs.python.org/issue8678"
            },
            {
                "type": "WEB",
                "url": "http://seclists.org/fulldisclosure/2007/Sep/279"
            },
            {
                "type": "WEB",
                "url": "https://bugzilla.redhat.com/show_bug.cgi?id=541698"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2019-12",
        "summary": "urllib module local_file:// scheme",
        "details": "urllib in Python 2.x through 2.7.16 supports the local_file: scheme, which makes it easier for remote attackers to bypass protection mechanisms that blacklist file: URIs, as demonstrated by triggering a urllib.urlopen('local_file:///etc/passwd') call.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "0c2b6a3943aa7b022e8eb4bfd9bffcddebf9a587"
                            },
                            {
                                "fixed": "34bab215596671d0dec2066ae7d7450cd73f638b"
                            },
                            {
                                "fixed": "4f06dae5d8d4400ba38d8502da620f07d4a5696e"
                            },
                            {
                                "fixed": "4fe82a8eef7aed60de05bfca0f2c322730ea921e"
                            },
                            {
                                "fixed": "b15bde8058e821b383d81fcae68b335a752083ca"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue35907"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2019-1",
        "summary": "smtplib unlimited read",
        "details": "The smtplib module doesn't limit the amount of read data in\nits call to readline(). An erroneous or malicious SMTP server can trick the\nsmtplib module to consume large amounts of memory.\n",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "16d63202af35dadd652a5e3eae687ea709e95b11"
                            },
                            {
                                "fixed": "210ee47e3340d8e689d8cce584e7c918d368f16b"
                            },
                            {
                                "fixed": "2585e1e48abb3013abeb8a1fe9dccb5f79ac4091"
                            },
                            {
                                "fixed": "42faa55124abcbb132c57745dec9e0489ac74406"
                            },
                            {
                                "fixed": "b3ac84322fe6dd542aa755779cdbc155edca8064"
                            },
                            {
                                "fixed": "c9cb18d3f7e5bf03220c213183ff0caa75905bdd"
                            },
                            {
                                "fixed": "d7b6ac66c1b81d13f2efa8d9ebba69e17c158c0a"
                            },
                            {
                                "fixed": "dabfc56b57f5086eb5522d8e6cd7670c62d2482d"
                            },
                            {
                                "fixed": "eaca8616ab0e219ebb5cf37d495f4bf336ec0f5e"
                            },
                            {
                                "fixed": "faad6bbea6c86e30c770eb0a3648e2cd52b2e55e"
                            },
                            {
                                "fixed": "ff1bbba92aad261df1ebd8fd8cc189c104e113b0"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "https://access.redhat.com/security/cve/cve-2013-1752"
            },
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue16038"
            },
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue16039"
            },
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue16040"
            },
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue16041"
            },
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue16042"
            },
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue6791"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2023-11",
        "summary": "Use-after-free in heappushpop() of heapq module",
        "details": "A use-after-free exists in Python through 3.9 via heappushpop in heapq.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "79f89e6e5a659846d1068e8b1bd8e491ccdef861"
                            },
                            {
                                "fixed": "958064f8d2b84062b0582bbae911df8ccfc11fd6"
                            },
                            {
                                "fixed": "993811ffe75c2573f97fb3fd1414b34609b8c8db"
                            },
                            {
                                "fixed": "c563f409ea30bcb0623d785428c9257917371b76"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "https://www.cve.org/CVERecord?id=CVE-2022-48560"
            },
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue39421"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/pull/18118"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2010-2",
        "summary": "rgbimg and imageop overflows",
        "details": "Integer overflow in rgbimgmodule.c in the rgbimg module in Python 2.5 allows remote attackers to have an unspecified impact via a large image that triggers a buffer overflow.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2008-3143.12.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "4df1b6d478020ac51c84467f47e42083f53adbad"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue1179"
            },
            {
                "type": "WEB",
                "url": "http://bugs.python.org/issue8678"
            },
            {
                "type": "WEB",
                "url": "http://seclists.org/fulldisclosure/2007/Sep/279"
            },
            {
                "type": "WEB",
                "url": "https://bugzilla.redhat.com/show_bug.cgi?id=541698"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2020-4",
        "summary": "Py_SetPath(): _Py_CheckPython3 uses uninitialized DLL path",
        "details": "In Python 3.6 through 3.6.10, 3.7 through 3.7.8, 3.8 through 3.8.4rc1, and 3.9 through 3.9.0b4 on Windows, a Trojan horse python3.dll might be used in cases where CPython is embedded in a native application. This occurs because python3X.dll may use an invalid search path for python3.dll loading (after Py_SetPath has been used). NOTE: this issue CANNOT occur when using python.exe from a standard (non-embedded) Python installation on Windows.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "110dd153662a13b8ae1bb06348e5b1f118ab26d7"
                            },
                            {
                                "fixed": "46cbf6148a46883110883488d3e9febbe46ba861"
                            },
                            {
                                "fixed": "4981fe36c7477303de830e8dca929a02caaaffe4"
                            },
                            {
                                "fixed": "aa7f7756149a10c64d01f583b71e91814db886ab"
                            },
                            {
                                "fixed": "dcbaa1b49cd9062fb9ba2b9d49555ac6cd8c60b5"
                            },
                            {
                                "fixed": "f205f1000a2d7f8b044caf281041b3705f293480"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue29778"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2015-1",
        "summary": "Issue #26556: Expat 2.1.1",
        "details": "Multiple integer overflows in the XML_GetBuffer function in Expat through 2.1.0, as used in Google Chrome before 44.0.2403.89 and other products, allow remote attackers to cause a denial of service (heap-based buffer overflow) or possibly have unspecified other impact via crafted XML data, a related issue to CVE-2015-2716.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "196d7db3956f4c0b03e87b570771b3460a61bab5"
                            },
                            {
                                "fixed": "ab90986600ba7dea2aa41e5c1773791070725453"
                            },
                            {
                                "fixed": "d244a8f7cb0ec6979ec9fc7acd39e95f5339ad0e"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue26556"
            },
            {
                "type": "WEB",
                "url": "https://sourceforge.net/p/expat/bugs/528/"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2024-3",
        "summary": "",
        "details": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.\n",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "81939dad77001556c527485d31a2d0f4a759033e"
                            },
                            {
                                "fixed": "8ed546679524140d8282175411fd141fe7df070d"
                            },
                            {
                                "fixed": "35c799d79177b962ddace2fa068101465570a29a"
                            },
                            {
                                "fixed": "5130731c9e779b97d00a24f54cdce73ce9975dfd"
                            },
                            {
                                "fixed": "66f8bb76a15e64a1bb7688b177ed29e26230fdee"
                            },
                            {
                                "fixed": "6d0850c4c8188035643586ab4d8ec2468abd699e"
                            },
                            {
                                "fixed": "91e3669e01245185569d09e9e6e11641282971ee"
                            },
                            {
                                "fixed": "94591dca510c796c7d40e9b4167ea56f2fdf28ca"
                            },
                            {
                                "fixed": "c8f868dc52f98011d0f9b459b6487920bfb0ac4d"
                            },
                            {
                                "fixed": "d86b49411753bf2c83291e3a14ae43fefded2f84"
                            },
                            {
                                "fixed": "e1dfa978b1ad210d551385ad8073ec6154f53763"
                            },
                            {
                                "fixed": "eb29e2f5905da93333d1ce78bc98b151e763ff46"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "https://mail.python.org/archives/list/security-announce@python.org/thread/PRGS5OR3N3PNPT4BMV2VAGN5GMUI5636/"
            },
            {
                "type": "REPORT",
                "url": "https://github.com/python/cpython/issues/118486"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/81939dad77001556c527485d31a2d0f4a759033e"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/8ed546679524140d8282175411fd141fe7df070d"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/35c799d79177b962ddace2fa068101465570a29a"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/5130731c9e779b97d00a24f54cdce73ce9975dfd"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/66f8bb76a15e64a1bb7688b177ed29e26230fdee"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/6d0850c4c8188035643586ab4d8ec2468abd699e"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/91e3669e01245185569d09e9e6e11641282971ee"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/94591dca510c796c7d40e9b4167ea56f2fdf28ca"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/c8f868dc52f98011d0f9b459b6487920bfb0ac4d"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/d86b49411753bf2c83291e3a14ae43fefded2f84"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/e1dfa978b1ad210d551385ad8073ec6154f53763"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/eb29e2f5905da93333d1ce78bc98b151e763ff46"
            },
            {
                "type": "WEB",
                "url": "https://security.netapp.com/advisory/ntap-20240705-0005/"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2018-5",
        "summary": "_elementree C accelerator doesn't call XML_SetHashSalt()",
        "details": "Python's elementtree C accelerator failed to initialise Expat's hash salt during initialization. This could make it easy to conduct denial of service attacks against Expat by constructing an XML document that would cause pathological hash collisions in Expat's internal data structures, consuming large amounts CPU and RAM. The vulnerability exists in Python versions 3.7.0, 3.6.0 through 3.6.6, 3.5.0 through 3.5.6, 3.4.0 through 3.4.9, 2.7.0 through 2.7.15.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "18b20bad75b4ff0486940fba4ec680e96e70f3a2"
                            },
                            {
                                "fixed": "41b48e71ac8a71f56694b548f118bd20ce203410"
                            },
                            {
                                "fixed": "470a435f3b42c9be5fdb7f7b04f3df5663ba7305"
                            },
                            {
                                "fixed": "cb5778f00ce48631c7140f33ba242496aaf7102b"
                            },
                            {
                                "fixed": "d16eaf36795da48b930b80b20d3805bc27820712"
                            },
                            {
                                "fixed": "f7666e828cc3d5873136473ea36ba2013d624fa1"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue34623"
            },
            {
                "type": "WEB",
                "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1632095"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2016-4",
        "summary": "Sweet32 attack (DES, 3DES)",
        "details": "The DES and Triple DES ciphers, as used in the TLS, SSH, and IPSec protocols and other protocols and products, have a birthday bound of approximately four billion blocks, which makes it easier for remote attackers to obtain cleartext data via a birthday attack against a long-duration encrypted session, as demonstrated by an HTTPS session using Triple DES in CBC mode, aka a \"Sweet32\" attack.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "03d13c0cbfe912eb0f9b9a02987b9e569f25fe19"
                            },
                            {
                                "fixed": "d988f429fe43808345812ef63dfa8da170c61871"
                            },
                            {
                                "fixed": "fa53dbdec818b0f2a0e22ca12a49d83ec948fc91"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "https://www.openssl.org/blog/blog/2016/08/24/sweet32/"
            },
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue27850"
            },
            {
                "type": "WEB",
                "url": "https://sweet32.info/"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2023-1",
        "summary": "urlparse does not correctly handle schemes",
        "details": "An issue in the urllib.parse component of Python before 3.11.4 allows attackers to bypass blocklisting methods by supplying a URL that starts with blank characters.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "439b9cfaf43080e91c4ad69f312f21fa098befc7"
                            },
                            {
                                "fixed": "72d356e3584ebfb8e813a8e9f2cd3dccf233c0d9"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://github.com/python/cpython/issues/99418"
            },
            {
                "type": "WEB",
                "url": "https://pointernull.com/security/python-url-parse-problem.html"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2008-4",
        "summary": "Multiple integer overflows (Apple)",
        "details": "Multiple integer overflows in Python 2.5.2 and earlier allow context-dependent attackers to have an unknown impact via vectors related to the (1) stringobject, (2) unicodeobject, (3) bufferobject, (4) longobject, (5) tupleobject, (6) stropmodule, (7) gcmodule, and (8) mmapmodule modules.  NOTE: The expandtabs integer overflows in stringobject and unicodeobject in 2.5.2 are covered by CVE-2008-5031.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "3ce5d9207e66d61d4b0502cf47ed2d2bcdd2212f"
                            },
                            {
                                "fixed": "e7d8be80ba634fa15ece6f503c33592e0d333361"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "https://lists.apple.com/archives/security-announce/2009/Feb/msg00000.html"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2012-3",
        "summary": "XML-RPC DoS",
        "details": "SimpleXMLRPCServer.py in SimpleXMLRPCServer in Python before 2.6.8, 2.7.x before 2.7.3, 3.x before 3.1.5, and 3.2.x before 3.2.3 allows remote attackers to cause a denial of service (infinite loop and CPU consumption) via an XML-RPC POST request that contains a smaller amount of data than specified by the Content-Length header.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "66f3cc6f8de83c447d937160e4a1630c4482b5f5"
                            },
                            {
                                "fixed": "ec1712a1662282c909b4cd4cc0c7486646bc9246"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue14001"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2022-5",
        "summary": "http.server: Open Redirection if the URL path starts with //",
        "details": "Python 3.x through 3.10 has an open redirection vulnerability in lib/http/server.py due to no protection against multiple (/) at the beginning of URI path which may leads to information disclosure. NOTE: this is disputed by a third party because the http.server.html documentation page states \"Warning: http.server is not recommended for production. It only implements basic security checks.\"",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "4dc2cae3abd75f386374d0635d00443b897d0672"
                            },
                            {
                                "fixed": "5715382d3a89ca118ce2e224d8c69550d21fe51b"
                            },
                            {
                                "fixed": "8a34afd55258c721e446d6de4a70353c39a24148"
                            },
                            {
                                "fixed": "defaa2b19a9a01c79c1d5641a8aa179bb10ead3f"
                            },
                            {
                                "fixed": "e2e8847bf52f4a81490653c6d13b7e3821b2c2be"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "https://access.redhat.com/security/cve/CVE-2021-28861"
            },
            {
                "type": "REPORT",
                "url": "https://github.com/python/cpython/issues/87389"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2022-10",
        "summary": "Slow IDNA decoding with large strings",
        "details": "An issue was discovered in Python before 3.11.1. An unnecessary quadratic algorithm exists in one path when processing some inputs to the IDNA (RFC 3490) decoder, such that a crafted, unreasonably long name being presented to the decoder could lead to a CPU denial of service. Hostnames are often supplied by remote servers that could be controlled by a malicious actor; in such a scenario, they could trigger excessive CPU consumption on the client attempting to make use of an attacker-supplied supposed hostname. For example, the attack payload could be placed in the Location header of an HTTP response with status code 302. A fix is planned in 3.11.1, 3.10.9, 3.9.16, 3.8.16, and 3.7.16.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "82ca2839c9ec6bf9a9400e791a52411824df67f3"
                            },
                            {
                                "fixed": "9bb8e18ca46fe66fa6802602f8a7228a24dd785f"
                            },
                            {
                                "fixed": "a6f6c3a3d6f2b580f2d87885c9b8a9350ad7bf15"
                            },
                            {
                                "fixed": "b0b590be9597fd5919228d251812dd54145f70a7"
                            },
                            {
                                "fixed": "c09dba57cfbbf74273ce44b1f48f71b46806605c"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://github.com/python/cpython/issues/98433"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2022-11",
        "summary": "Buffer overflow in the _sha3 module in Python 3.10 and older",
        "details": "The Keccak XKCP SHA-3 reference implementation before fdc6fef has an integer overflow and resultant buffer overflow that allows attackers to execute arbitrary code or eliminate expected cryptographic properties. This occurs in the sponge function interface.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "0e4e058602d93b88256ff90bbef501ba20be9dd3"
                            },
                            {
                                "fixed": "8088c90044ba04cd5624b278340ebf934dbee4a5"
                            },
                            {
                                "fixed": "857efee6d2d43c5c12fc7e377ce437144c728ab8"
                            },
                            {
                                "fixed": "948c6794711458fd148a3fa62296cadeeb2ed631"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://github.com/python/cpython/issues/98517"
            },
            {
                "type": "WEB",
                "url": "https://bugzilla.suse.com/show_bug.cgi?id=CVE-2022-37454"
            },
            {
                "type": "WEB",
                "url": "https://github.com/XKCP/XKCP/security/advisories/GHSA-6w4m-2xhg-2658"
            },
            {
                "type": "WEB",
                "url": "https://mouha.be/sha-3-buffer-overflow/"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2022-4",
        "summary": "Prevent DoS by large str-int conversions",
        "details": "A flaw was found in python. In algorithms with quadratic time complexity using non-binary bases, when using int(\"text\"), a system could take 50ms to parse an int string with 100,000 digits and 5s for 1,000,000 digits (float, decimal, int.from_bytes(), and int() for binary bases 2, 4, 8, 16, and 32 are not affected). The highest threat from this vulnerability is to system availability.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "15ec1afd4fcd2da1e2d2b256c562fb42d8d886a2"
                            },
                            {
                                "fixed": "8f0fa4bd10aba723aff988720cd26b93be99bc12"
                            },
                            {
                                "fixed": "b5e331fdb38684808ffc540d53e8595bdc408b89"
                            },
                            {
                                "fixed": "cec1e9dfd769bd3a16142d0fdd1a36f19c77ed15"
                            },
                            {
                                "fixed": "f8b71da9aac6ea74808dcdd0cc266e705431356b"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "https://access.redhat.com/security/cve/CVE-2020-10735"
            },
            {
                "type": "REPORT",
                "url": "https://github.com/python/cpython/issues/95778"
            },
            {
                "type": "WEB",
                "url": "https://github.com/pydantic/pydantic/issues/1477"
            },
            {
                "type": "WEB",
                "url": "https://lwn.net/Articles/907572/"
            },
            {
                "type": "WEB",
                "url": "https://pythoninsider.blogspot.com/2022/09/python-releases-3107-3914-3814-and-3714.html"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2017-1",
        "summary": "JSONDecoder.raw_decode",
        "details": "Array index error in the scanstring function in the _json module in Python 2.7 through 3.5 and simplejson before 2.6.1 allows context-dependent attackers to read arbitrary process memory via a negative index value in the idx argument to the raw_decode function.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "6c939cb6f6dfbd273609577b0022542d31ae2802"
                            },
                            {
                                "fixed": "99b5afab74428e5ddfd877bdf3aa8a8c479696b1"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "https://access.redhat.com/security/cve/cve-2014-4616"
            },
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue21529"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2008-5",
        "summary": "Multiple integer overflows (Apple)",
        "details": "Integer overflow in _hashopenssl.c in the hashlib module in Python 2.5.2 and earlier might allow context-dependent attackers to defeat cryptographic digests, related to \"partial hashlib hashing of data exceeding 4GB.\"",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "3ce5d9207e66d61d4b0502cf47ed2d2bcdd2212f"
                            },
                            {
                                "fixed": "e7d8be80ba634fa15ece6f503c33592e0d333361"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "https://lists.apple.com/archives/security-announce/2009/Feb/msg00000.html"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2012-2",
        "summary": "pypirc created insecurely",
        "details": "Python 2.6 through 3.2 creates ~/.pypirc with world-readable permissions before changing them after data has been written, which introduces a race condition that allows local users to obtain a username and password by reading this file.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "d61926e6bef6c4d8105a2848362377dce91d7fc8"
                            },
                            {
                                "fixed": "e5567ccc863cadb68f5e57a2760e021e0d3807cf"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue13512"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2016-5",
        "summary": "Windows: vulnerable bzip2 1.0.6",
        "details": "Use-after-free vulnerability in bzip2recover in bzip2 1.0.6 allows remote attackers to cause a denial of service (crash) via a crafted bzip2 file, related to block ends set to before the start of the block.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "4a3c610cd635f14747cf02c77908e80620aae6ea"
                            },
                            {
                                "fixed": "58d576a43cb1800dd68f06a429d7d41f746a8c01"
                            },
                            {
                                "fixed": "6649519e67841b1aa12672f1d9b5cb24494f6196"
                            },
                            {
                                "fixed": "e1639f361ee0dfbf08bb8538839d3d557c1a995c"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "https://access.redhat.com/security/cve/cve-2016-3189"
            },
            {
                "type": "ADVISORY",
                "url": "https://access.redhat.com/security/cve/cve-2019-12900"
            },
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue44549"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2018-4",
        "summary": "difflib and poplib catastrophic backtracking",
        "details": "python before versions 2.7.15, 3.4.9, 3.5.6rc1, 3.6.5rc1 and 3.7.0 is vulnerable to catastrophic backtracking in the difflib.IS_LINE_JUNK method.  An attacker could use this flaw to cause denial of service.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "0902a2d6b2d1d9dbde36aeaaccf1788ceaa97143"
                            },
                            {
                                "fixed": "0e6c8ee2358a2e23117501826c008842acb835ac"
                            },
                            {
                                "fixed": "937ac1fe069a4dc8471dff205f553d82e724015b"
                            },
                            {
                                "fixed": "942cc04ae44825ea120e3a19a80c9b348b8194d0"
                            },
                            {
                                "fixed": "c9516754067d71fd7429a25ccfcb2141fc583523"
                            },
                            {
                                "fixed": "e052d40cea15f582b50947f7d906b39744dc62a2"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue32981"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2024-2",
        "summary": "",
        "details": "An issue was found in the CPython `zipfile` module affecting versions 3.12.1, 3.11.7, 3.10.13, 3.9.18, and 3.8.18 and prior.\n\nThe zipfile module is vulnerable to \u201cquoted-overlap\u201d zip-bombs which exploit the zip format to create a zip-bomb with a high compression ratio. The fixed versions of CPython makes the zipfile module reject zip archives which overlap entries in the archive.\n\n",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "repo": "https://github.com/python/cpython",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "66363b9a7b9fe7c99eba3a185b74c5fdbf842eba"
                            },
                            {
                                "fixed": "fa181fcf2156f703347b03a3b1966ce47be8ab3b"
                            },
                            {
                                "fixed": "a956e510f6336d5ae111ba429a61c3ade30a7549"
                            },
                            {
                                "fixed": "30fe5d853b56138dbec62432d370a1f99409fc85"
                            },
                            {
                                "fixed": "a2c59992e9e8d35baba9695eb186ad6c6ff85c51"
                            },
                            {
                                "fixed": "d05bac0b74153beb541b88b4fca33bf053990183"
                            },
                            {
                                "fixed": "70497218351ba44bffc8b571201ecb5652d84675"
                            }
                        ]
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/66363b9a7b9fe7c99eba3a185b74c5fdbf842eba"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/fa181fcf2156f703347b03a3b1966ce47be8ab3b"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/a956e510f6336d5ae111ba429a61c3ade30a7549"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/30fe5d853b56138dbec62432d370a1f99409fc85"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/a2c59992e9e8d35baba9695eb186ad6c6ff85c51"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/d05bac0b74153beb541b88b4fca33bf053990183"
            },
            {
                "type": "REPORT",
                "url": "https://github.com/python/cpython/issues/109858"
            },
            {
                "type": "WEB",
                "url": "https://www.bamsoftware.com/hacks/zipbomb/"
            },
            {
                "type": "ADVISORY",
                "url": "https://mail.python.org/archives/list/security-announce@python.org/thread/XELNUX2L3IOHBTFU7RQHCY6OUVEWZ2FG/"
            },
            {
                "type": "WEB",
                "url": "https://lists.debian.org/debian-lts-announce/2024/03/msg00024.html"
            },
            {
                "type": "WEB",
                "url": "https://lists.debian.org/debian-lts-announce/2024/03/msg00025.html"
            },
            {
                "type": "WEB",
                "url": "http://www.openwall.com/lists/oss-security/2024/03/20/5"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/commit/70497218351ba44bffc8b571201ecb5652d84675"
            },
            {
                "type": "WEB",
                "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/T3IGRX54M7RNCQOXVQO5KQKTGWCOABIM/"
            },
            {
                "type": "WEB",
                "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/U5VHWS52HGD743C47UMCSAK2A773M2YE/"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2020-5",
        "summary": "http.client: HTTP Header Injection in the HTTP method",
        "details": "http.client in Python 3.x before 3.5.10, 3.6.x before 3.6.12, 3.7.x before 3.7.9, and 3.8.x before 3.8.5 allows CRLF injection if the attacker controls the HTTP request method, as demonstrated by inserting CR and LF control characters in the first argument of HTTPConnection.request.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "27b811057ff5e93b68798e278c88358123efdc71"
                            },
                            {
                                "fixed": "524b8de630036a29ca340bc2ae6fd6dc7dda8f40"
                            },
                            {
                                "fixed": "668d321476d974c4f51476b33aaca870272523bf"
                            },
                            {
                                "fixed": "8ca8a2e8fb068863c1138f07e3098478ef8be12e"
                            },
                            {
                                "fixed": "ca75fec1ed358f7324272608ca952b2d8226d11a"
                            },
                            {
                                "fixed": "f02de961b9f19a5db0ead56305fe0057a78787ae"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue39603"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2023-10",
        "summary": "DoS when reading malformed Apple Property List files in binary format",
        "details": "read_ints in plistlib.py in Python through 3.9.1 is vulnerable to a potential DoS attack via CPU and RAM exhaustion when processing malformed Apple Property List files in binary format.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "34637a0ce21e7261b952fbd9d006474cc29b681f"
                            },
                            {
                                "fixed": "e277cb76989958fdbc092bf0b2cb55c43e86610a"
                            },
                            {
                                "fixed": "547d2bcc55e348043b2f338027c1acd9549ada76"
                            },
                            {
                                "fixed": "225e3659556616ad70186e7efc02baeebfeb5ec4"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "https://www.cve.org/CVERecord?id=CVE-2022-48564"
            },
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue42103"
            },
            {
                "type": "FIX",
                "url": "https://github.com/python/cpython/pull/22882"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2010-3",
        "summary": "rgbimg and imageop overflows",
        "details": "Multiple buffer overflows in the RLE decoder in the rgbimg module in Python 2.5 allow remote attackers to have an unspecified impact via an image file containing crafted data that triggers improper processing within the (1) longimagedata or (2) expandrow function.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "4df1b6d478020ac51c84467f47e42083f53adbad"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue1179"
            },
            {
                "type": "WEB",
                "url": "http://bugs.python.org/issue8678"
            },
            {
                "type": "WEB",
                "url": "http://seclists.org/fulldisclosure/2007/Sep/279"
            },
            {
                "type": "WEB",
                "url": "https://bugzilla.redhat.com/show_bug.cgi?id=541698"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2014-4",
        "summary": "socket.recvfrom_into() overflow",
        "details": "Buffer overflow in the socket.recvfrom_into function in Modules/socketmodule.c in Python 2.5 before 2.7.7, 3.x before 3.3.4, and 3.4.x before 3.4rc1 allows remote attackers to execute arbitrary code via a crafted string.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "28cf368c1baba3db1f01010e921f63017af74c8f"
                            },
                            {
                                "fixed": "fbf648ebba32bbc5aa571a4b09e2062a65fd2492"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue20246"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2019-13",
        "summary": "ssl.match_hostname() ignores extra string after whitespace in IPv4 address",
        "details": "``inet_aton()`` accepts trailing characters after a valid IP.  Because of\nthat, Python ``ssl.match_hostname('1.1.1.1 ; this should not work but does')``\nsucceeded when it should fail.\n\nThe issue was introduced in `bpo-32819\n<https://bugs.python.org/issue32819>`_ by `commit aef1283b\n<https://github.com/python/cpython/commit/aef1283ba428e33397d87cee3c54a5110861552d>`_.\nOnly Python 3.7 and newer are affected. It's a potential security bug\nalthough **low severity**. For one Python 3.7 and newer **no longer use**\n``ssl.match_hostname()`` to verify hostnames and IP addresses of a\ncertificate: **matching is performed by OpenSSL**.\n\nIt should not possible to register a x509 certificate with a hostname with\nspaces.\n\nThe glibc function ``inet_aton()`` accepts input as valid if said input is\na IPv4 address followed by zero or more characters that are valid\nwhite-space as decided by ``isspace()``, with the rest of the string after\nthe first white-space being ignored. As ``'\\r'`` is a valid white-space\ncharacter the rest of the string is ignored (including the ``'\\r'``). See\n`glibc bug 24111: Deprecate inet_addr, inet_aton\n<https://sourceware.org/bugzilla/show_bug.cgi?id=24111>`_.\n",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "070fae6d0ff49e63bfd5f2bdc66f8eb1df3b6557"
                            },
                            {
                                "fixed": "3cba3d3c55f230a59174a0dfcafb1d4685269e60"
                            },
                            {
                                "fixed": "477b1b25768945621d466a8b3f0739297a842439"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue37463"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2021-1",
        "summary": "urllib parse_qsl(): Web cache poisoning - semicolon as a query args separator",
        "details": "The package python/cpython from 0 and before 3.6.13, from 3.7.0 and before 3.7.10, from 3.8.0 and before 3.8.8, from 3.9.0 and before 3.9.2 are vulnerable to Web Cache Poisoning via urllib.parse.parse_qsl and urllib.parse.parse_qs by using a vector called parameter cloaking. When the attacker can separate query parameters using a semicolon (;), they can cause a difference in the interpretation of the request between the proxy (running with default configuration) and the server. This can result in malicious requests being cached as completely safe ones, as the proxy would usually not see the semicolon as a separator, and therefore would not include it in a cache key of an unkeyed parameter.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "5c17dfc5d70ce88be99bc5769b91ce79d7a90d61"
                            },
                            {
                                "fixed": "c9f07813ab8e664d8c34413c4fc2d4f86c061a92"
                            },
                            {
                                "fixed": "d0d4d30882fe3ab9b1badbecf5d15d94326fd13e"
                            },
                            {
                                "fixed": "e3110c3cfbb7daa690d54d0eff6c264c870a71bf"
                            },
                            {
                                "fixed": "fcbe0cb04d35189401c0c880ebfb4311e952d776"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "https://snyk.io/vuln/SNYK-UPSTREAM-PYTHONCPYTHON-1074933"
            },
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue42967"
            },
            {
                "type": "WEB",
                "url": "https://snyk.io/blog/cache-poisoning-in-popular-open-source-packages/"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2022-8",
        "summary": "urllib.parse should sanitize urls containing ASCII newline and tabs.",
        "details": "A flaw was found in Python, specifically within the urllib.parse module. This module helps break Uniform Resource Locator (URL) strings into components. The issue involves how the urlparse method does not sanitize input and allows characters like '\\r' and '\\n' in the URL path. This flaw allows an attacker to input a crafted URL, leading to injection attacks. This flaw affects Python versions prior to 3.10.0b1, 3.9.5, 3.8.11, 3.7.11 and 3.6.14.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "491fde0161d5e527eeff8586dd3972d7d3a631a7"
                            },
                            {
                                "fixed": "515a7bc4e13645d0945b46a8e1d9102b918cd407"
                            },
                            {
                                "fixed": "6c472d3a1d334d4eeb4a25eba7bf3b01611bf667"
                            },
                            {
                                "fixed": "76cd81d60310d65d01f9d7b48a8985d8ab89c8b4"
                            },
                            {
                                "fixed": "f4dac7ec55477a6c5d965e594e74bd6bda786903"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2047376"
            },
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue43882"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2008-9",
        "summary": "Multiple integer overflows (Apple)",
        "details": "Multiple integer overflows in imageop.c in the imageop module in Python 1.5.2 through 2.5.1 allow context-dependent attackers to break out of the Python VM and execute arbitrary code via large integer values in certain arguments to the crop function, leading to a buffer overflow, a different vulnerability than CVE-2007-4965 and CVE-2008-1679.",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "3ce5d9207e66d61d4b0502cf47ed2d2bcdd2212f"
                            },
                            {
                                "fixed": "e7d8be80ba634fa15ece6f503c33592e0d333361"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "ADVISORY",
                "url": "https://lists.apple.com/archives/security-announce/2009/Feb/msg00000.html"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2016-9",
        "summary": "Issue #26657: HTTP server directory traversal",
        "details": "Fix directory traversal vulnerability with ``http.server`` and\n``SimpleHTTPServer`` on Windows.\n\nRegression of Python 3.3.5.\n\nPython issue reported at 2016-03-14.\n",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "0cf2cf2b7d726d12a6046441e4067d32c7dd4feb"
                            },
                            {
                                "fixed": "6f6bc1da8aaae52664e7747e328d26eb59c0e74f"
                            },
                            {
                                "fixed": "7b92f9fa47df754b50c64aac84cf1c09693571af"
                            },
                            {
                                "fixed": "d274b3f1f1e2d8811733fb952c9f18d7da3a376a"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue26657"
            }
        ]
    },
    {
        "source": "PSF",
        "id": "PSF-2018-8",
        "summary": "Email folding function Denial-of-Service",
        "details": "The email folding function enters an infinite loop if a header is longer\nthan the policy maximum line length and contains many non-ASCII characters.\n\nRegression introduced in Python 3.6.4.\n",
        "affected": [
            {
                "ranges": [
                    {
                        "type": "GIT",
                        "events": [
                            {
                                "introduced": "0"
                            },
                            {
                                "fixed": "2fef5b01e36a17e36fd7e65c4b51f5ede8880dda"
                            },
                            {
                                "fixed": "516a6a254814d2bc6a90290dfc44d77fdfb4050b"
                            },
                            {
                                "fixed": "c1f5667be1e3ec5871560c677402c1252c6018a6"
                            }
                        ],
                        "repo": "https://github.com/python/cpython"
                    }
                ]
            }
        ],
        "references": [
            {
                "type": "REPORT",
                "url": "https://bugs.python.org/issue33529"
            }
        ]
    }
]